// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AgentifaiFeatureNotifications
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AgentifaiCoreCommon
import AgentifaiCoreNotifications
import AgentifaiCoreUI
@_exported import AgentifaiFeatureNotifications
import AgentifaiSharedResources
import Foundation
import RxCocoa
import RxRelay
import RxSwift
import Swift
import Swinject
import UIKit
import _Concurrency
import _StringProcessing
@_hasMissingDesignatedInitializers public class FeatureNotificationsDI {
  public static func register(container: Swinject.Container)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class NotificationButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public func apply(theme: AgentifaiCoreUI.ButtonTheme)
  @objc deinit
}
public class NotificationFeatureOutput {
  public init(action: @escaping (_ notificationId: Swift.String) -> Swift.Void, openUrl: @escaping (Foundation.URL, Swift.String) -> Swift.Void)
  @objc deinit
}
public class NotificationFeatureInput {
  public init(title: Swift.String, emptyMessage: Swift.String, sortByLabel: Swift.String, sortByPriority: Swift.String, sortByMostRecent: Swift.String, loadingLabel: Swift.String, errorMessage: Swift.String, theme: AgentifaiFeatureNotifications.NotificationTheme)
  @objc deinit
}
public class NotificationFilterTheme {
  public init(labelTheme: AgentifaiCoreUI.TextTheme, filterButton: AgentifaiCoreUI.ButtonTheme)
  @objc deinit
}
public class NotificationEmptyTheme {
  public init(imageBackgroundColor: AgentifaiCoreUI.Color, imageColor: AgentifaiCoreUI.Color, labelTheme: AgentifaiCoreUI.TextTheme)
  @objc deinit
}
public class NotificationTheme {
  public init(navigationTheme: AgentifaiCoreUI.NavigationTheme, backgroundColor: AgentifaiCoreUI.Color, itemTheme: AgentifaiFeatureNotifications.NotificationItemTheme, filterTheme: AgentifaiFeatureNotifications.NotificationFilterTheme, emptyTheme: AgentifaiFeatureNotifications.NotificationEmptyTheme, loadingTheme: AgentifaiCoreUI.TextTheme, refreshTheme: AgentifaiCoreUI.RefreshControlTheme)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class NotificationsViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc deinit
}
extension AgentifaiFeatureNotifications.NotificationsViewController : UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
extension AgentifaiFeatureNotifications.NotificationsViewController : UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
}
public class NotificationItemTheme {
  public init(titleTheme: AgentifaiCoreUI.TextTheme, descriptionTheme: AgentifaiCoreUI.TextTheme, dateTheme: AgentifaiCoreUI.TextTheme, actionButtonTheme: AgentifaiCoreUI.ButtonTheme, infoButtonTheme: AgentifaiCoreUI.TextTheme, contentBackgroundColor: AgentifaiCoreUI.Color, backgroundColor: AgentifaiCoreUI.Color, iconActionColor: AgentifaiCoreUI.Color, iconInfoColor: AgentifaiCoreUI.Color, doneActionIconColor: AgentifaiCoreUI.Color, doneActionLabelTheme: AgentifaiCoreUI.TextTheme)
  @objc deinit
}
