// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AgentifaiCoreUI
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AgentifaiCoreCommon
@_exported import AgentifaiCoreUI
import AgentifaiSharedResources
import Foundation
import Lottie
import PDFKit
import RxCocoa
import RxSwift
import Swift
import UIKit
import _Concurrency
import _StringProcessing
@_hasMissingDesignatedInitializers public class AgentifaiCoreUIDI {
  public static func register(loading: AgentifaiCoreUI.Animation)
  @objc deinit
}
public class AgentifaiFont {
  public init(name: Swift.String, size: Swift.Int)
  public func getFont() -> UIKit.UIFont
  @objc deinit
}
public protocol AlertViewProtocol {
  func setup(theme: AgentifaiCoreUI.AlertViewTheme)
  func showDialog(superView: UIKit.UIView, text: Swift.String)
  func showDialog(superView: UIKit.UIView, text: Swift.String, onCompleted: (() -> Swift.Void)?)
  func showDialog(superView: UIKit.UIView, title: Swift.String, text: Swift.String, withAnimation: Swift.Bool, onCompleted: (() -> Swift.Void)?)
  func closeDialog()
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class AlertView : AgentifaiCoreUI.NibView, AgentifaiCoreUI.AlertViewProtocol {
  @_Concurrency.MainActor(unsafe) public init(standbyAnimation: AgentifaiCoreUI.Animation)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSublayers(of layer: QuartzCore.CALayer)
  @_Concurrency.MainActor(unsafe) public func setup(theme: AgentifaiCoreUI.AlertViewTheme)
  @_Concurrency.MainActor(unsafe) public func showDialog(superView: UIKit.UIView, text: Swift.String)
  @_Concurrency.MainActor(unsafe) public func showDialog(superView: UIKit.UIView, text: Swift.String, onCompleted: (() -> Swift.Void)?)
  @_Concurrency.MainActor(unsafe) public func showDialog(superView: UIKit.UIView, title: Swift.String, text: Swift.String, withAnimation: Swift.Bool = true, onCompleted: (() -> Swift.Void)?)
  @_Concurrency.MainActor(unsafe) public func closeDialog()
  @objc deinit
}
public class AlertViewTheme {
  public init(backgroundColor: AgentifaiCoreUI.Color, titleTheme: AgentifaiCoreUI.TextTheme, messageTextTheme: AgentifaiCoreUI.TextTheme, actionButtonTheme: AgentifaiCoreUI.ButtonTheme)
  @objc deinit
}
public class Animation : Swift.Decodable {
  final public let filename: Swift.String
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension AgentifaiCoreUI.Animation : Swift.Equatable {
  public static func == (lhs: AgentifaiCoreUI.Animation, rhs: AgentifaiCoreUI.Animation) -> Swift.Bool
}
public class AnimationConfiguration : Swift.Decodable {
  final public let open: AgentifaiCoreUI.Animation
  final public let close: AgentifaiCoreUI.Animation
  final public let standby: AgentifaiCoreUI.Animation
  final public let typing: AgentifaiCoreUI.Animation
  final public let talking: AgentifaiCoreUI.Animation
  final public let loading: AgentifaiCoreUI.Animation
  final public let info: AgentifaiCoreUI.Animation
  final public let infoOpen: AgentifaiCoreUI.Animation
  final public let infoClose: AgentifaiCoreUI.Animation
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
}
public typealias BehaviourCompletionHandler = ((_ complete: Swift.Bool) -> ())
public protocol BehaviourViewProtocol {
  func animate(_ animation: AgentifaiCoreUI.Animation, repeats: Swift.Bool, onComplete: AgentifaiCoreUI.BehaviourCompletionHandler?)
  func stopAnimation(waitCompletion: Swift.Bool)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class BehaviourView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @objc deinit
}
extension AgentifaiCoreUI.BehaviourView : AgentifaiCoreUI.BehaviourViewProtocol {
  @_Concurrency.MainActor(unsafe) public func animate(_ animation: AgentifaiCoreUI.Animation, repeats: Swift.Bool, onComplete: AgentifaiCoreUI.BehaviourCompletionHandler? = nil)
  @_Concurrency.MainActor(unsafe) public func stopAnimation(waitCompletion: Swift.Bool = false)
}
public class ButtonTheme {
  public var backgroundColor: AgentifaiCoreUI.Color?
  public var textColor: AgentifaiCoreUI.Color
  public var selectedBackgroundColor: AgentifaiCoreUI.Color?
  public var selectedTextColor: AgentifaiCoreUI.Color?
  public var disabledBackgroundColor: AgentifaiCoreUI.Color?
  public var disabledTextColor: AgentifaiCoreUI.Color?
  public var font: AgentifaiCoreUI.AgentifaiFont
  public init(backgroundColor: AgentifaiCoreUI.Color? = nil, textColor: AgentifaiCoreUI.Color, selectedBackgroundColor: AgentifaiCoreUI.Color? = nil, selectedTextColor: AgentifaiCoreUI.Color? = nil, disabledBackgroundColor: AgentifaiCoreUI.Color? = nil, disabledTextColor: AgentifaiCoreUI.Color? = nil, font: AgentifaiCoreUI.AgentifaiFont)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class CheckboxView : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) final public let isChecked: RxRelay.BehaviorRelay<Swift.Bool>
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func check()
  @_Concurrency.MainActor(unsafe) public func uncheck()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class CloseBarButtonItem : AgentifaiCoreUI.CustomButtonUIBarButtonItem {
  @_Concurrency.MainActor(unsafe) public init(target: Any?, action: ObjectiveC.Selector)
  @objc deinit
}
public class Color : Swift.Codable {
  public var hexadecimal: Swift.String {
    get
  }
  public var ui: UIKit.UIColor {
    get
  }
  public init(hex: Swift.String, alpha: CoreFoundation.CGFloat = 1)
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class CustomButtonUIBarButtonItem : UIKit.UIBarButtonItem {
  @objc deinit
}
extension UIKit.NSLayoutConstraint {
  @_Concurrency.MainActor(unsafe) public static func create(withVisualFormat format: Swift.String, view: UIKit.UIView) -> [UIKit.NSLayoutConstraint]
  @_Concurrency.MainActor(unsafe) public static func pin(view: UIKit.UIView, padding: Swift.Int) -> [UIKit.NSLayoutConstraint]
  @_Concurrency.MainActor(unsafe) public static func pin(view: UIKit.UIView, topMargin: Swift.Int = 0, bottomMargin: Swift.Int = 0, leadingMargin: Swift.Int = 0, trailingMargin: Swift.Int = 0) -> [UIKit.NSLayoutConstraint]
}
extension UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) public func placeImageOnRight()
  @_Concurrency.MainActor(unsafe) public func setInsets(forContentPadding contentPadding: UIKit.UIEdgeInsets, imageTitlePadding: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public func getImage() -> UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public func setImageColor(color: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @_Concurrency.MainActor(unsafe) public func setDesign(backgroundColor: AgentifaiCoreUI.Color?, titleColor: AgentifaiCoreUI.Color?, imageColor: AgentifaiCoreUI.Color?)
}
extension UIKit.UIFont {
  public static func registerFont(withBundle bundle: Foundation.Bundle, fileName: Swift.String, ofType ext: Swift.String? = nil)
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func roundCorners(corners: UIKit.UIRectCorner, radius: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public func setShadow(color: UIKit.UIColor, opacity: Swift.Float, radius: CoreFoundation.CGFloat, offset: CoreFoundation.CGSize, cornerRadius: CoreFoundation.CGFloat)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class LoadingView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var isHiddenWhenStopped: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) public func startAnimating()
  @_Concurrency.MainActor(unsafe) public func stopAnimating(waitCompletion: Swift.Bool = false)
  @objc deinit
}
public class NavigationBarTheme {
  public init(tintColor: AgentifaiCoreUI.Color, titleTextTheme: AgentifaiCoreUI.TextTheme, shadowColor: AgentifaiCoreUI.Color, backgroundColor: AgentifaiCoreUI.Color, isTranslucent: Swift.Bool = false)
  @objc deinit
}
public class NavigationTheme {
  final public let style: AgentifaiCoreUI.UserInterfaceStyle
  final public let navigationBarTheme: AgentifaiCoreUI.NavigationBarTheme
  public init(style: AgentifaiCoreUI.UserInterfaceStyle, navigationBarTheme: AgentifaiCoreUI.NavigationBarTheme)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class NibView : UIKit.UIStackView {
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class RefreshControl : UIKit.UIRefreshControl {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) public func set(theme: AgentifaiCoreUI.RefreshControlTheme)
  @_Concurrency.MainActor(unsafe) public func set(text: Swift.String)
  @objc deinit
}
public class RefreshControlTheme {
  final public let textTheme: AgentifaiCoreUI.TextTheme
  public init(textTheme: AgentifaiCoreUI.TextTheme)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class RoundedButton : AgentifaiCoreUI.SimpleButton {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class SearchBar : UIKit.UISearchBar {
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SimpleButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open func apply(theme: AgentifaiCoreUI.ButtonTheme)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public class TextTheme {
  public init(font: AgentifaiCoreUI.AgentifaiFont, color: AgentifaiCoreUI.Color)
  public func getFont() -> UIKit.UIFont
  public func getColor() -> AgentifaiCoreUI.Color
  @objc deinit
}
extension UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) public func apply(theme: AgentifaiCoreUI.TextTheme)
}
extension UIKit.UITextView {
  @_Concurrency.MainActor(unsafe) public func apply(theme: AgentifaiCoreUI.TextTheme)
}
extension UIKit.UITextField {
  @_Concurrency.MainActor(unsafe) public func apply(theme: AgentifaiCoreUI.TextTheme)
}
extension UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) public func apply(theme: AgentifaiCoreUI.TextTheme, for state: UIKit.UIControl.State)
  @_Concurrency.MainActor(unsafe) public func apply(textColor: AgentifaiCoreUI.Color, for state: UIKit.UIControl.State)
  @_Concurrency.MainActor(unsafe) public func apply(theme: AgentifaiCoreUI.ButtonTheme, for state: UIKit.UIControl.State)
}
extension UIKit.UINavigationBar {
  @_Concurrency.MainActor(unsafe) public func apply(theme: AgentifaiCoreUI.NavigationBarTheme)
}
extension UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) public func apply(theme: AgentifaiCoreUI.NavigationTheme)
  @_Concurrency.MainActor(unsafe) public func apply(style: AgentifaiCoreUI.UserInterfaceStyle)
}
public enum UserInterfaceStyle : Swift.String, Swift.Codable {
  case light
  case dark
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension AgentifaiCoreUI.UserInterfaceStyle : Swift.Equatable {}
extension AgentifaiCoreUI.UserInterfaceStyle : Swift.Hashable {}
extension AgentifaiCoreUI.UserInterfaceStyle : Swift.RawRepresentable {}
