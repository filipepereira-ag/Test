// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AgentifaiCoreNotifications
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AgentifaiCoreCommon
import AgentifaiCoreNetworking
@_exported import AgentifaiCoreNotifications
import AgentifaiCoreRealtime
import AgentifaiCoreUserAuth
import Foundation
import RxSwift
import Swift
import Swinject
import _Concurrency
import _StringProcessing
public protocol NotificationContent : Swift.Decodable, Swift.Encodable {
}
public enum NotificationStatus : Swift.String, Swift.Codable {
  case read
  case partialRead
  case unread
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum NotificationContentType : Swift.String, Swift.Codable {
  case urlInfo
  case flowAction
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class NotificationRepositoryConfiguration {
  public init(baseUrl: Swift.String, socketPath: Swift.String, notificationsPath: Swift.String, notificationPath: Swift.String, updateStatusPath: Swift.String, countPath: Swift.String, notificationEvent: Swift.String, notificationsTotalUnread: Swift.String, healthEvent: Swift.String, serverEvent: Swift.String, tokenValidityFactor: Swift.Double, pingTime: Swift.Double)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CoreNotificationsDI {
  public static func register(container: Swinject.Container)
  @objc deinit
}
public protocol NotificationPayload : Swift.Decodable, Swift.Encodable {
  associatedtype Content : AgentifaiCoreNotifications.NotificationContent
  var text: Swift.String { get }
  var title: Swift.String { get }
  var content: Self.Content { get }
  var contentType: AgentifaiCoreNotifications.NotificationContentType { get }
}
public class FlowActionNotificationContent : AgentifaiCoreNotifications.NotificationContent {
  public enum Status : Swift.String, Swift.Codable {
    case pending
    case done
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  final public let actionText: Swift.String
  final public let actionStatus: AgentifaiCoreNotifications.FlowActionNotificationContent.Status
  final public let actionDoneText: Swift.String
  public init(actionText: Swift.String, actionStatus: AgentifaiCoreNotifications.FlowActionNotificationContent.Status, actionDoneText: Swift.String)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class NotificationRequestParameters : Swift.Encodable {
  public enum Sort : Swift.String, Swift.Codable {
    case date
    case priority
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public init(page: Swift.Int? = nil, limit: Swift.Int? = nil, notificationStatus: [AgentifaiCoreNotifications.NotificationStatus] = [], sort: AgentifaiCoreNotifications.NotificationRequestParameters.Sort? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol Notification : Swift.Decodable, Swift.Encodable {
  associatedtype Payload : AgentifaiCoreNotifications.NotificationPayload
  var id: Swift.String { get }
  var triggerDate: Foundation.Date { get }
  var priority: Swift.Int { get }
  var attentionLevel: AgentifaiCoreNotifications.NotificationAttentionLevel { get }
  var payload: Self.Payload { get }
  var status: AgentifaiCoreNotifications.NotificationStatus { get }
}
public class UrlInfoNotification : AgentifaiCoreNotifications.Notification {
  public typealias Payload = AgentifaiCoreNotifications.UrlInfoNotificationPayload
  final public let id: Swift.String
  final public let triggerDate: Foundation.Date
  final public let priority: Swift.Int
  final public let attentionLevel: AgentifaiCoreNotifications.NotificationAttentionLevel
  final public let payload: AgentifaiCoreNotifications.UrlInfoNotification.Payload
  final public let status: AgentifaiCoreNotifications.NotificationStatus
  public init(id: Swift.String, triggerDate: Foundation.Date, priority: Swift.Int, attentionLevel: AgentifaiCoreNotifications.NotificationAttentionLevel, payload: AgentifaiCoreNotifications.UrlInfoNotification.Payload, status: AgentifaiCoreNotifications.NotificationStatus)
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public protocol NotificationsRepository {
  func getRealtimeTotal(parameters: AgentifaiCoreNotifications.NotificationRequestParameters, skipMissedEvents: Swift.Bool) -> RxSwift.Observable<Swift.Int>
  func getTotal(parameters: AgentifaiCoreNotifications.NotificationRequestParameters) -> RxSwift.Single<Swift.Int>
  func getRealtimeNotifications(parameters: AgentifaiCoreNotifications.NotificationRequestParameters) -> RxSwift.Observable<[AgentifaiCoreNotifications.Notification]>
  func getNotifications(parameters: AgentifaiCoreNotifications.NotificationRequestParameters) -> RxSwift.Single<[AgentifaiCoreNotifications.Notification]>
  func updateNotificationStatus(id: Swift.String, status: AgentifaiCoreNotifications.NotificationStatus) -> RxSwift.Completable
}
public class FlowActionNotification : AgentifaiCoreNotifications.Notification {
  public typealias Payload = AgentifaiCoreNotifications.FlowActionNotificationPayload
  final public let id: Swift.String
  final public let triggerDate: Foundation.Date
  final public let priority: Swift.Int
  final public let attentionLevel: AgentifaiCoreNotifications.NotificationAttentionLevel
  final public let payload: AgentifaiCoreNotifications.FlowActionNotification.Payload
  final public let status: AgentifaiCoreNotifications.NotificationStatus
  public init(id: Swift.String, triggerDate: Foundation.Date, priority: Swift.Int, attentionLevel: AgentifaiCoreNotifications.NotificationAttentionLevel, payload: AgentifaiCoreNotifications.FlowActionNotification.Payload, status: AgentifaiCoreNotifications.NotificationStatus)
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public enum NotificationAttentionLevel : Swift.String, Swift.Codable {
  case info
  case warning
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class FlowActionNotificationPayload : AgentifaiCoreNotifications.NotificationPayload {
  public typealias Content = AgentifaiCoreNotifications.FlowActionNotificationContent
  final public let text: Swift.String
  final public let title: Swift.String
  final public let content: AgentifaiCoreNotifications.FlowActionNotificationPayload.Content
  final public let contentType: AgentifaiCoreNotifications.NotificationContentType
  public init(text: Swift.String, title: Swift.String, content: AgentifaiCoreNotifications.FlowActionNotificationPayload.Content)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class UrlInfoNotificationContent : AgentifaiCoreNotifications.NotificationContent {
  final public let linkText: Swift.String
  final public let url: Swift.String
  public init(linkText: Swift.String, url: Swift.String)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class UrlInfoNotificationPayload : AgentifaiCoreNotifications.NotificationPayload {
  public typealias Content = AgentifaiCoreNotifications.UrlInfoNotificationContent
  final public let text: Swift.String
  final public let title: Swift.String
  final public let content: AgentifaiCoreNotifications.UrlInfoNotificationPayload.Content
  final public let contentType: AgentifaiCoreNotifications.NotificationContentType
  public init(text: Swift.String, title: Swift.String, content: AgentifaiCoreNotifications.UrlInfoNotificationPayload.Content)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension AgentifaiCoreNotifications.NotificationStatus : Swift.Equatable {}
extension AgentifaiCoreNotifications.NotificationStatus : Swift.Hashable {}
extension AgentifaiCoreNotifications.NotificationStatus : Swift.RawRepresentable {}
extension AgentifaiCoreNotifications.NotificationContentType : Swift.Equatable {}
extension AgentifaiCoreNotifications.NotificationContentType : Swift.Hashable {}
extension AgentifaiCoreNotifications.NotificationContentType : Swift.RawRepresentable {}
extension AgentifaiCoreNotifications.FlowActionNotificationContent.Status : Swift.Equatable {}
extension AgentifaiCoreNotifications.FlowActionNotificationContent.Status : Swift.Hashable {}
extension AgentifaiCoreNotifications.FlowActionNotificationContent.Status : Swift.RawRepresentable {}
extension AgentifaiCoreNotifications.NotificationRequestParameters.Sort : Swift.Equatable {}
extension AgentifaiCoreNotifications.NotificationRequestParameters.Sort : Swift.Hashable {}
extension AgentifaiCoreNotifications.NotificationRequestParameters.Sort : Swift.RawRepresentable {}
extension AgentifaiCoreNotifications.NotificationAttentionLevel : Swift.Equatable {}
extension AgentifaiCoreNotifications.NotificationAttentionLevel : Swift.Hashable {}
extension AgentifaiCoreNotifications.NotificationAttentionLevel : Swift.RawRepresentable {}
