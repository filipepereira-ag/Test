// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AgentifaiCoreCommon
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import AgentifaiCoreCommon
import Combine
import Foundation
import Swift
import _Concurrency
import _StringProcessing
public class DictionaryEncoder {
  public init()
  public func encode<T>(_ value: T) throws -> [Swift.String : Any] where T : Swift.Encodable
  @objc deinit
}
extension AgentifaiCoreCommon.DictionaryEncoder : Combine.TopLevelEncoder {
  public typealias Output = [Swift.String : Any]
}
public protocol ReadWriteCoordinatorProtocol {
  func read<R>(_ fn: () -> R) -> R
  func enqueueWrite(_ fn: @escaping () -> Swift.Void)
  func blockingWrite<R>(_ fn: () throws -> R) rethrows -> R
}
final public class ReadWriteCoordinator : AgentifaiCoreCommon.ReadWriteCoordinatorProtocol {
  public init(queue: Dispatch.DispatchQueue)
  final public func read<R>(_ fn: () -> R) -> R
  final public func enqueueWrite(_ fn: @escaping () -> Swift.Void)
  final public func blockingWrite<R>(_ fn: () throws -> R) rethrows -> R
  @objc deinit
}
extension Swift.String {
  public func searchContains(_ other: Swift.String) -> Swift.Bool
}
public class EnvironmentConfiguration {
  public init()
  @objc deinit
}
@propertyWrapper public class ISO8601Date : Swift.Codable {
  public var wrappedValue: Foundation.Date
  public init(date: Foundation.Date)
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @propertyWrapper public class ISO8601FullDate : AgentifaiCoreCommon.ISO8601Date {
  override public var wrappedValue: Foundation.Date {
    get
    set
  }
  override public init(date: Foundation.Date)
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
public protocol AgentifaiError : Swift.CustomStringConvertible, Swift.Error {
}
@_hasMissingDesignatedInitializers public class Logger {
  public static func initialize(environmentConfig: AgentifaiCoreCommon.EnvironmentConfiguration)
  public static func log(_ item: @autoclosure () -> Any, separator: Swift.String = " ", terminator: Swift.String = "\n")
  @objc deinit
}
public protocol JSONMapper {
  func decode<T>(_ type: T.Type, from data: Foundation.Data) throws -> T where T : Swift.Decodable
  func decode<T>(_ type: T.Type, from json: [Swift.String : Any]) throws -> T where T : Swift.Decodable
  func decode(from data: Foundation.Data) throws -> Any
  func encodeToData<T>(object: T) throws -> Foundation.Data where T : Swift.Encodable
  func encode<T>(object: T) throws -> [Swift.String : Any] where T : Swift.Encodable
}
public class NativeJSONMapper : AgentifaiCoreCommon.JSONMapper {
  public init(jsonDecoder: Foundation.JSONDecoder, jsonEncoder: Foundation.JSONEncoder, dictionaryDecoder: AgentifaiCoreCommon.DictionaryDecoder, dictionaryEncoder: AgentifaiCoreCommon.DictionaryEncoder)
  public func decode<T>(_ type: T.Type, from data: Foundation.Data) throws -> T where T : Swift.Decodable
  public func decode<T>(_ type: T.Type, from json: [Swift.String : Any]) throws -> T where T : Swift.Decodable
  public func decode(from data: Foundation.Data) throws -> Any
  public func encodeToData<T>(object: T) throws -> Foundation.Data where T : Swift.Encodable
  public func encode<T>(object: T) throws -> [Swift.String : Any] where T : Swift.Encodable
  @objc deinit
}
public enum CommonErrors : Swift.Error {
  case selfNotFound
  public static func == (a: AgentifaiCoreCommon.CommonErrors, b: AgentifaiCoreCommon.CommonErrors) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol CollectionFactoryProtocol {
  func concurrentDictionary<Key, Value>() -> AgentifaiCoreCommon.ConcurrentDictionary<Key, Value> where Key : Swift.Hashable
}
public class CollectionFactory : AgentifaiCoreCommon.CollectionFactoryProtocol {
  public init(readWriteCoordinator: AgentifaiCoreCommon.ReadWriteCoordinatorProtocol)
  public func concurrentDictionary<Key, Value>() -> AgentifaiCoreCommon.ConcurrentDictionary<Key, Value> where Key : Swift.Hashable
  @objc deinit
}
public class DictionaryDecoder {
  public init()
  public func decode<T>(_ type: T.Type, from dictionary: [Swift.String : Any]) throws -> T where T : Swift.Decodable
  @objc deinit
}
extension AgentifaiCoreCommon.DictionaryDecoder : Combine.TopLevelDecoder {
  public typealias Input = [Swift.String : Any]
}
@_hasMissingDesignatedInitializers public class ConcurrentDictionary<Key, Value> where Key : Swift.Hashable {
  public subscript(key: Key) -> Value? {
    get
    set
  }
  public subscript(setAsync key: Key) -> Value? {
    get
    set
  }
  public func values() -> Swift.Dictionary<Key, Value>.Values
  public func merge(_ other: [Key : Value], uniquingKeysWith combine: (Value, Value) throws -> Value) rethrows
  @objc deinit
}
extension AgentifaiCoreCommon.ConcurrentDictionary : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
final public class Atomic<A> {
  public init(_ value: A)
  final public var value: A {
    get
    set
  }
  final public func mutate(_ transform: (inout A) -> Swift.Void)
  @objc deinit
}
extension AgentifaiCoreCommon.CommonErrors : Swift.Equatable {}
extension AgentifaiCoreCommon.CommonErrors : Swift.Hashable {}
