// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AgentifaiCoreUserAuth
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AgentifaiCoreCommon
import AgentifaiCoreNetworking
@_exported import AgentifaiCoreUserAuth
import Foundation
import JWTDecode
import RxSwift
import Swift
import Swinject
import _Concurrency
import _StringProcessing
public protocol UserAuthenticatorProtocol {
  func getAuth() -> RxSwift.Single<AgentifaiCoreUserAuth.UserAuth>
}
public enum UserAuthenticator : Swift.Error {
  case unableToGetAuth
  public static func == (a: AgentifaiCoreUserAuth.UserAuthenticator, b: AgentifaiCoreUserAuth.UserAuthenticator) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class DefaultUserAuthenticator : AgentifaiCoreUserAuth.UserAuthenticatorProtocol {
  public init(restApi: AgentifaiCoreNetworking.RestApiProtocol, mapper: AgentifaiCoreCommon.JSONMapper, configuration: AgentifaiCoreUserAuth.UserAuthenticatorConfiguration, user: AgentifaiCoreCommon.InternalUserProtocol)
  public func getAuth() -> RxSwift.Single<AgentifaiCoreUserAuth.UserAuth>
  @objc deinit
}
open class UserAuth : Swift.Codable {
  final public let token: Swift.String
  public init(token: Swift.String)
  open func expiresAt() throws -> Foundation.Date?
  open func isValid() throws -> Swift.Bool
  open func isValid(at: Foundation.Date) throws -> Swift.Bool
  open func initialValidationTime() throws -> Foundation.TimeInterval?
  @objc deinit
  open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension AgentifaiCoreUserAuth.UserAuth : Swift.Equatable {
  public static func == (lhs: AgentifaiCoreUserAuth.UserAuth, rhs: AgentifaiCoreUserAuth.UserAuth) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class CoreUserAuthenticatorDI {
  public static func register(container: Swinject.Container)
  @objc deinit
}
public class UserAuthenticatorConfiguration : Swift.Codable {
  public init(tenantId: Swift.String, channelId: Swift.String, tokenValidityFactor: Swift.Double, url: Swift.String)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension AgentifaiCoreUserAuth.UserAuthenticator : Swift.Equatable {}
extension AgentifaiCoreUserAuth.UserAuthenticator : Swift.Hashable {}
