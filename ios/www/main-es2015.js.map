{"version":3,"sources":["./src/app/models/operation/Credential.ts","./src/app/agentifai/commands/cards/payment/execute-card-payment.ts","./src/app/agentifai/commands/cards/acquisition/init-new-credit-card.ts","./src/app/services/agentifai/agentifai-manager.service.ts","./src/app/agentifai/commands/terms-and-conditions/consent-terms-and-conditions.ts","./src/app/agentifai/commands/loans/get-personal-loan-general-data.ts","./src/app/agentifai/commands/credentialsmanagement/matrixactivation/simulate-activate-matrix.ts","./src/app/models/operation/request/payments/ServicePaymentRequest.ts","./src/app/agentifai/commands/accounts/get-account-balances.ts","./src/app/models/operation/Charges.ts","./src/app/models/operation/request/loans/GenericPersonalCreditWorkElement.ts","./src/app/agentifai/commands/callback/get-customer-manager.ts","./src/app/agentifai/commands/cards/acquisition/get-card-adhesion-accounts.ts","./src/app/agentifai/commands/customers/update-client-information/get-update-client-information-list.ts","./src/app/agentifai/commands/payments/services/execute-service-payment.ts","./src/app/models/operation/request/loans/ConsumerLoanAdhesionRequest.ts","./src/app/agentifai/commands/cards/acquisition/get-showcase-product-document.ts","./src/app/agentifai/commands/customers/update-client-information/get-update-client-information-address.ts","./src/app/models/cardMatrix/MatrixActivateSimExe.ts","./src/app/models/operation/request/customers/GetContractNumberQuestionsRequest.ts","./src/app/agentifai/commands/cards/payment/simulate-card-payment.ts","./src/app/agentifai/commands/unlock-credentials/unlock-credentials.ts","./src/app/models/operation/request/customers/CallbackSolicitationRequest.ts","./src/app/agentifai/models/agentifai-response-event.ts","./src/app/agentifai/commands/payments/services/get-frequent-service-payment.ts","./src/app/agentifai/commands/transfers/get-transfer-type-validation.ts","./src/app/agentifai/commands/customers/update-client-information/update-client-information-utils.ts","./src/app/models/operation/request/GenericOperationRequest.ts","./src/environments/environment.ts","./src/app/agentifai/commands/unlock-contract-number/get-contract-number-unlock-questions.ts","./src/app/agentifai/commands/payments/services/simulate-service-payment.ts","./src/app/models/operation/request/customers/GetContractNumberAnswersRequest.ts","./src/app/agentifai/commands/customers/update-client-information/get-update-client-information-personal.ts","./src/app/services/storage/storage.service.ts","./src/app/agentifai/commands/unlock-credentials/get-credential-unlock-questions.ts","./src/app/agentifai/utils/agentifai-utils.ts","./src/app/agentifai/commands/payments/telecommunications/get-telecommunicaition-configurations.ts","./src/app/services/agentifai/agentifai-cards-transformer.service.ts","./src/app/models/operation/request/customers/CredentialUnlockQuestionsRequest.ts","./src/app/agentifai/commands/credentialsmanagement/credentials-management-utils.ts","./src/app/agentifai/commands/credentialsmanagement/matrixrequisition/get-matrix-config.ts","./src/app/models/operation/request/cards/MBWayPartnerAcceptTransferCGDAccountRequest.ts","./src/app/models/operation/request/transfers/TransferInternalRequest.ts","./src/app/agentifai/commands/content/disable-banner-page.ts","./src/app/services/utils/utils.service.ts","./src/app/services/agentifai/agentifai-command-factory.service.ts","./src/app/agentifai/commands/credentialsmanagement/matrixrequisition/simulate-matrix-requisition.ts","./src/app/agentifai/commands/mbway/get-mbway-cards.ts","./src/app/agentifai/commands/content/get-private-content.ts","./src/app/agentifai/commands/operation-proof/get-operation-proof.ts","./src/app/services/agentifai/agentifai-services.service.ts","./src/app/agentifai/commands/credentialsmanagement/matrixrequisition/execute-matrix-requisition.ts","./src/app/agentifai/commands/customers/update-client-information/get-update-client-information-professional.ts","./src/app/services/agentifai/agentifai-response-factory.service.ts","./src/app/models/operation/OperationProofByEmailRequest.ts","./src/app/agentifai/commands/accounts/get-accounts.ts","./src/app/agentifai/commands/transfers/internal/simulate-internal-transfer.ts","./src/app/services/agentifai/agentifai-accounts-transformer.service.ts","./src/app/agentifai/commands/credentialsmanagement/get-credentials-management.ts","./src/app/services/agentifai/agentifai-plugin-controller.service.ts","./src/app/agentifai/commands/loans/simulate-personal-loan.ts","./src/app/agentifai/commands/cards/acquisition/simulate-card-adhesion.ts","./src/app/models/GenericKeyValue.ts","./src/app/agentifai/commands/commom/agentifai-command-type.ts","./src/app/models/operation/request/payments/TelecommunicationsPaymentRequest.ts","./src/app/agentifai/commands/customers/update-client-information/get-update-client-information-validity.ts","./src/app/agentifai/commands/cards/activation/activate-card.ts","./src/app/agentifai/commands/callback/get-manager-callback-config.ts","./src/app/agentifai/commands/payments/telecommunications/get-frequent-telecommunication-payment.ts","./src/app/agentifai/commands/credentialsmanagement/matrixactivation/execute-activate-matrix.ts","./src/app/agentifai/commands/cards/acquisition/get-showcase-characteristics.ts","./src/app/app.component.ts","./src/app/models/customers/updateClientInfo/UpdateClientInfoRequest.ts","./src/app/agentifai/commands/transfers/internal/execute-internal-transfer.ts","./src/app/agentifai/commands/cards/get-card-account-transactions.ts","./src/app/agentifai/commands/accounts/get-transactions.ts","./src/app/agentifai/commands/transfers/get-client-status.ts","./src/app/agentifai/commands/unlock-contract-number/unlock-contract-number.ts","./src/app/app.component.html","./src/app/agentifai/commands/transfers/sepa/simulate-sepa-transfer.ts","./src/app/models/operation/request/cards/MBWayPartnerRequest.ts","./src/app/agentifai/utils/anonymization-utils.ts","./src/app/agentifai/commands/payments/telecommunications/execute-telecommunication-payment.ts","./src/app/agentifai/commands/cards/acquisition/get-card-adhesion-configurations.ts","./src/app/app.module.ts","./src/app/agentifai/commands/transfers/get-transfer-calendar-restrictions.ts","./src/app/agentifai/commands/transfers/internal/get-frequent-internal-transfer.ts","./src/app/agentifai/commands/cards/acquisition/execute-card-adhesion.ts","./src/app/agentifai/commands/payments/get-payments-entity.ts","./src/app/agentifai/commands/payments/get-payments-general-data.ts","./src/app/models/operation/request/devices/VoiceTreatmentConsentRequest.ts","./src/app/models/cardMatrix/MatrixRequisitionSimExe.ts","./src/app/models/operation/request/cards/CardRequestRequest.ts","./src/app/agentifai/commands/loans/execute-personal-loan-adhesion.ts","./src/app/services/agentifai/agentifai-request-factory.service.ts","./src/app/agentifai/commands/cards/get-payment-cards.ts","./src/app/agentifai/commands/transfers/immediate/get-immediate-transfer-phone-numbers.ts","./src/app/agentifai/commands/transfers/immediate/execute-immediate-transfer.ts","./src/app/agentifai/commands/accounts/accounts-utils.ts","./src/app/agentifai/commands/callback/get-manager-available-time.ts","./node_modules/@ionic/core/dist/esm lazy ^\\.\\/.*\\.entry\\.js$ include: \\.entry\\.js$ exclude: \\.system\\.entry\\.js$ namespace object","./src/app/internal/internal-utils.ts","./src/app/models/operation/request/transfers/TransferImmediateRequest.ts","./src/app/agentifai/commands/cards/cards-utils.ts","./src/app/agentifai/commands/transfers/immediate/simulate-immediate-transfer.ts","./src/app/agentifai/commands/payments/telecommunications/simulate-telecommunication-payment.ts","./src/app/agentifai/models/agentifai-request.ts","./src/app/services/environment-service/environment-service.service.ts","./src/app/services/api/api.service.ts","./src/app/agentifai/commands/get-current-customer-contacts.ts","./src/app/agentifai/models/agentifai-response.ts","./src/app/services/assistant-utils/assistant-utils.service.ts","./src/app/agentifai/commands/transfers/sepa/get-frequent-sepa-transfer.ts","./src/app/agentifai/commands/callback/set-callback.ts","./src/app/models/operation/Scheduling.ts","./src/app/agentifai/commands/mbway/update-transfer-consent-for-cgd-account.ts","./src/app/agentifai/commands/terms-and-conditions/get-terms-and-conditions-consent.ts","./src/app/models/operation/request/customers/CredentialUnlockAnswersRequest.ts","./src/app/agentifai/commands/cards/get-cards-general-data.ts","./src/app/models/operation/request/transfers/TransferSEPARequest.ts","./src/app/agentifai/commands/cards/get-sms-token-phone-number.ts","./src/app/app-routing.module.ts","./src/app/models/operation/request/cards/CardPaymentRequest.ts","./src/app/agentifai/commands/mbway/simulate-mbway-adhesion.ts","./src/app/agentifai/commands/transfers/get-transfers-general-data.ts","./src/app/agentifai/commands/customers/update-client-information/simulate-update-client-information.ts","./src/app/agentifai/commands/customers/update-client-information/execute-update-client-information.ts","./src/app/app.component.scss","./src/app/agentifai/commands/mbway/execute-mbway-adhesion.ts","./src/app/agentifai/models/agentifai-widget-response.ts","./src/app/agentifai/commands/loans/simulate-personal-loan-adhesion.ts","./src/app/agentifai/commands/transfers/sepa/execute-sepa-transfer.ts","./src/main.ts","./src/app/agentifai/commands/operation-proof/send-operation-proof.ts","./src/app/agentifai/commands/cards/acquisition/get-showcase-cards.ts","./$_lazy_route_resource lazy namespace object","./src/app/agentifai/commands/transfers/immediate/get-immediate-transfer-accounts.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["export class Credential {\n    type: string;\n    value: string;\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiRequestFactoryService } from 'src/app/services/agentifai/agentifai-request-factory.service';\nimport { Credential } from 'src/app/models/operation/Credential';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { CardPaymentRequest } from 'src/app/models/operation/request/cards/CardPaymentRequest';\n\nexport class ExecuteCardPaymentCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexesPathsSuccess: String[] = [\n        \"headers.+\",\n        \"status\",\n        `body\\.(operationId|operationStatus|charges.*|${Anonymization.scheduling()})`\n    ]\n\n    private nonAnonymizableRegexesPathsError: String[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private requestFactory: AgentifaiRequestFactoryService,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters = this.request.getParameters()\n        const request = this.createRequest(parameters);\n        const credential = this.createCredentials(parameters);\n\n        return service.executeCardPayment(headers, request, credential)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(resp => this.createErrorResponse(resp))\n            );\n    }\n\n    private createRequest(parameters: any): CardPaymentRequest {\n        const request = new CardPaymentRequest();\n        request.operationId = parameters.operationId;\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation;\n        request.scheduling = this.requestFactory.createScheduling(parameters);\n        request.sourceAccount = parameters.sourceAccount;\n        request.destinationCardNumber = parameters.destinationCardNumber;\n        request.amount = parameters.amount;\n        request.currency = parameters.currency;\n        request.cardPaymentType = parameters.cardPaymentType;\n        request.manuallyEnteredCardNumber = parameters.manuallyEnteredCardNumber;\n        \n        return request;\n    }\n\n    private createCredentials(parameters: any): Credential {\n        return this.requestFactory.createCredentials(parameters);\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexesPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizableRegexesPathsError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { CardRequestRequest } from 'src/app/models/operation/request/cards/CardRequestRequest';\nimport { AgentifaiRequestFactoryService } from 'src/app/services/agentifai/agentifai-request-factory.service';\n\nexport class InitNewCreditCard implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        String.raw `^body\\.(operationId|showCardCreditDocuments)$`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private requestFactory: AgentifaiRequestFactoryService\n    ) {}\n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders();\n        const parameters = this.request.getParameters();\n        const request = this.createRequest(parameters);\n\n        return service.initNewCreditCard(headers, request)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createRequest(parameters: any): CardRequestRequest {\n        const request = new CardRequestRequest();\n\n        if (parameters.operationId != null) {\n            request.operationId = parseInt(parameters.operationId)\n        }\n\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation;\n        request.scheduling = this.requestFactory.createScheduling(parameters);\n\n        request.fullAccountKey = parameters.fullAccountKey;\n        request.productCode = parameters.productCode;\n        request.cardPaymentMode = parameters.cardPaymentMode;\n\n        if (parameters.paymentPercentage != null) {\n            request.paymentPercentage = parseInt(parameters.paymentPercentage)\n        }\n\n        request.paymentFixedValue = parameters.paymentFixedValue;\n        request.nameToPrintOnCard = parameters.nameToPrintOnCard;\n\n        if (parameters.statementEmissionDay != null) {\n            request.statementEmissionDay = parseInt(parameters.statementEmissionDay)\n        }\n        \n        request.postalAddress = parameters.postalAddress;\n        request.creditLimit = parameters.creditLimit;\n\n        if (parameters.checkForCredit != null) {\n            request.checkForCredit = this.requestFactory.parseBool(parameters.checkForCredit)\n        }\n\n        if (parameters.onlineAdherence != null) {\n            request.onlineAdherence = this.requestFactory.parseBool(parameters.onlineAdherence)\n        }\n\n        if (parameters.safeMessageAdhesion != null) {\n            request.safeMessageAdhesion = this.requestFactory.parseBool(parameters.safeMessageAdhesion)\n        }\n\n        return request;\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { Injectable } from '@angular/core';\nimport { AgentifaiResponse } from 'src/app/agentifai/models/agentifai-response';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { Observable, throwError } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { AgentifaiCommandType } from 'src/app/agentifai/commands/commom/agentifai-command-type';\nimport { AgentifaiUtils } from 'src/app/agentifai/utils/agentifai-utils';\nimport { AgentifaiCommandFactoryService } from 'src/app/services/agentifai/agentifai-command-factory.service';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AgentifaiManagerProvider {\n\n  private static commandKey: string = \"requestType\";\n\n  constructor(\n    private service: AgentifaiServicesProvider,\n    private commandsFactory: AgentifaiCommandFactoryService\n  ) { }\n\n  executeWidgetRequest(data: JSON): Observable<AgentifaiResponse> {\n    const request = this.createRequest(data);\n    const commandValue: string = request.data[AgentifaiManagerProvider.commandKey];\n    const commandType: AgentifaiCommandType = commandValue as AgentifaiCommandType;\n    const command: AgentifaiCommand<any> = this.commandsFactory.createCommand(commandType, request);\n\n    try {\n      return this.executeCommand(command, request.id);\n    } catch (error) {\n      return this.handleError(request.id, error.toString())\n    }\n  }\n\n  private executeCommand(command: AgentifaiCommand<any>, requestId: string): Observable<AgentifaiResponse> {\n    return command.execute(this.service)\n      .pipe(\n        map(result => this.createSuccessResponse(requestId, result)),\n        catchError(error => this.handleError(requestId, error))\n      );\n  }\n\n  private createSuccessResponse(requestId: string, response: Object): AgentifaiResponse {\n    const json = AgentifaiUtils.mapFromAny(response);\n    return new AgentifaiResponse(requestId, true, json);\n  }\n\n  private createFailedResponse(requestId: string, errorResponse: any | Error) {\n    const json = AgentifaiUtils.mapFromAny(errorResponse);\n    return new AgentifaiResponse(requestId, false, json);\n  }\n\n  private handleError(requestId: string, error: any | Error) {\n    const errorResponse = this.createFailedResponse(requestId, error);\n    return throwError(errorResponse);\n  }\n\n  private createRequest(data: JSON): AgentifaiRequest {\n    const id = data[\"requestId\"];\n    delete data[\"requestId\"];\n    return new AgentifaiRequest(id, data);\n  }\n\n}\n","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { VoiceTreatmentConsentRequest } from 'src/app/models/operation/request/devices/VoiceTreatmentConsentRequest';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class ConsentTermsAndConditionsCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizablePathRegex: String[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const request = new VoiceTreatmentConsentRequest();\n\n        return service.addVoiceTreatmentConsent(headers, request)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizablePathRegex)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegex)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiAccountsTransformerService } from 'src/app/services/agentifai/agentifai-accounts-transformer.service';\nimport { AgentifaiUtils } from 'src/app/agentifai/utils/agentifai-utils';\nimport { AccountsUtils } from 'src/app/agentifai/commands/accounts/accounts-utils'\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetPersonalLoanGeneralData implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        String.raw`^body\\.(pedidoExistenteMes|validClient|client95_96|professionalInformation\\..+|accounts\\.[^.]+\\.(${AccountsUtils.nonAnonymizedAccountsProperties}))$`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private transformer: AgentifaiAccountsTransformerService\n    ) {}\n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n\n        return service.getConsumerLoanAdhesionGeneralData(headers)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        var transformedResponse = this.transformResponse(response);\n        return this.createResponse(transformedResponse, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n    private transformResponse(response: any): any {\n        const data = AgentifaiUtils.mapFromString(response.data);\n\n        if (data.accounts != null) {\n            data.accounts = this.transformer.transformAccounts(data.accounts);\n\n            response.data = data;\n        }\n\n        return response;\n    }\n\n}","import { Observable, throwError } from \"rxjs\";\nimport { catchError, map } from \"rxjs/operators\";\nimport { AgentifaiRequest } from \"src/app/agentifai/models/agentifai-request\";\nimport { WidgetResponse } from \"src/app/agentifai/models/agentifai-widget-response\";\nimport { Anonymization } from \"src/app/agentifai/utils/anonymization-utils\";\nimport { MatrixActivateSimExe } from \"src/app/models/cardMatrix/MatrixActivateSimExe\";\nimport { AgentifaiRequestFactoryService } from \"src/app/services/agentifai/agentifai-request-factory.service\";\nimport { AgentifaiResponseFactoryService } from \"src/app/services/agentifai/agentifai-response-factory.service\";\nimport { AgentifaiServicesProvider } from \"src/app/services/agentifai/agentifai-services.service\";\nimport { AgentifaiCommand } from \"../../commom/agentifai-command\";\nimport { CredentialsManagementUtils } from \"../credentials-management-utils\";\n\nexport class SimulateActivateMatrix implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        'headers.+',\n        'status',\n        `body\\.(operationId|operationStatus|${Anonymization.scheduling()})`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private requestFactory: AgentifaiRequestFactoryService\n    ) { }  \n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters = this.request.getParameters()\n        const request = this.createRequest(parameters)\n\n        return service.simulateActivateMatrix(headers, request)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createRequest(parameters: any): MatrixActivateSimExe {\n        return CredentialsManagementUtils.createMatrixActivateSimExe(parameters, this.requestFactory);\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { GenericOperationRequest } from 'src/app/models/operation/request/GenericOperationRequest'\n\nexport class ServicePaymentRequest extends GenericOperationRequest {\n    sourceAccount: string;\n    entity: string;\n    reference: string;\n    amount: string;\n\n    constructor() {\n        super();\n    }\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { map, catchError } from 'rxjs/operators';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\n\nexport class GetAccountBalance implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        \"body\\.(accountCurrency|accountBalancesList\\.[^.]+\\.currency)(?:$|\\W)\"\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(private request: AgentifaiRequest, private responseFactory: AgentifaiResponseFactoryService) {\n    }\n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const fullAccountKey = this.request.getParameters()[\"fullAccountKey\"];\n        \n        return service.getAccountBalance(headers, fullAccountKey)\n            .pipe(\n                map( resp => this.createSuccessResponse(resp) ),\n                catchError( error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n    \n}","export class Charges {\n    cost: number;\n    type: string;\n    code: string;\n    description: string;\n    amount: number;\n    currency: string;\n    taxCode: string;\n    taxDescription: string;\n    taxAmount: number;\n    taxCurrency: string;\n    taxRate: number;\n    taxExemption: number;\n    chargeCollectionCancellationOperationCode: string;\n    chargeCollectionOperationCode: string;\n    taxCollectionOperationCode: string;\n    taxCollectionCancellationOperationCode: string;\n    taxExemptionOperationCode: string;\n    taxExemptionCancellationOperationCode: string;\n    operationCost: number;\n    commissions: number;\n    stampDuty: number;\n    expense: number;\n    vat: number;\n\n    constructor() {\n        this.type = '';\n        this.code = '';\n        this.description = '';\n        this.amount = null;\n        this.currency = '';\n        this.taxCode = '';\n        this.taxDescription = '';\n        this.taxAmount = null;\n        this.taxCurrency = '';\n        this.taxRate = null;\n        this.taxExemption = null;\n        this.chargeCollectionCancellationOperationCode = '';\n        this.chargeCollectionOperationCode = '';\n        this.taxCollectionOperationCode = '';\n        this.taxCollectionCancellationOperationCode = '';\n        this.taxExemptionOperationCode = '';\n        this.taxExemptionCancellationOperationCode = '';\n        this.operationCost = null;\n        this.commissions = null;\n        this.stampDuty = null;\n        this.expense = null;\n        this.vat = null;\n    }\n}","export class GenericPersonalCreditWorkElement {\n    cod: string;\n    description: string;\n    constructor(){\n        this.cod = \"\",\n        this.description = \"\";\n    }\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetCustomerManager implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        String.raw `^body\\.serviceModel$`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) {}\n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n\n        return service.getCustomerManager(headers)\n            .pipe(\n                map( resp => this.createSuccessResponse(resp) ),\n                catchError( error => this.createErrorResponse(error) )\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiUtils } from 'src/app/agentifai/utils/agentifai-utils'\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { AgentifaiAccountsTransformerService } from 'src/app/services/agentifai/agentifai-accounts-transformer.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetCardAdhesionAccounts implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        'headers.+',\n        'status'\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private transformer: AgentifaiAccountsTransformerService\n    ) {}\n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders();\n\n        return service.getCardAdhesionAccounts(headers)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: string[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        const transformedResponse = this.transformResponse(response);\n        return this.createResponse(transformedResponse, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n    private transformResponse(response: any): any {\n        const data = AgentifaiUtils.mapFromString(response.data);\n\n        if (data.defaultAccount != null && data.accounts != null) {\n            data.accounts = this.transformer.transformAccounts(data.accounts);\n            data.defaultAccount = this.transformer.transformAccount(data.defaultAccount);\n\n            response.data = data;\n        }\n\n        return response;\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetUpdateClientInformationList implements AgentifaiCommand<WidgetResponse> {\n\n  private nonAnonymizableRegexPathsSuccess: string[] = [\n      \"headers.+\",\n      \"status\",\n      \"body.*\"\n  ]\n\n  private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n  constructor(\n      private request: AgentifaiRequest,\n      private responseFactory: AgentifaiResponseFactoryService\n  ) {}\n  \n  execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n      const headers = this.request.getHeaders()\n      const id = this.request.getParameters().id\n\n      return service.getUpdateClientListField(headers, id)\n          .pipe(\n              map(resp => this.createSuccessResponse(resp)),\n              catchError(error => this.createErrorResponse(error))\n          )\n  }\n\n  private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n      return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n  }\n\n  private createSuccessResponse(response: any): WidgetResponse {\n      return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n  }\n\n  private createErrorResponse(errorResponse: any) {\n      return throwError(\n          this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n      )\n  }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { map, catchError } from 'rxjs/operators';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { Observable, throwError } from 'rxjs';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiRequestFactoryService } from 'src/app/services/agentifai/agentifai-request-factory.service';\nimport { ServicePaymentRequest } from 'src/app/models/operation/request/payments/ServicePaymentRequest';\nimport { Credential } from 'src/app/models/operation/Credential';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\n\nexport class ExecuteServicePaymentCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizablePathRegex: String[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private requestFactory: AgentifaiRequestFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters = this.request.getParameters()\n        const request = this.createRequest(parameters);\n        const credential = this.createCredentials(parameters);\n\n        return service.executeServicePayment(headers, request, credential)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(resp => this.createErrorResponse(resp))\n            );\n    }\n\n    private createRequest(parameters: any): ServicePaymentRequest {\n        const request = new ServicePaymentRequest();\n        request.sourceAccount = parameters.sourceAccount;\n        request.entity = parameters.entity;\n        request.reference = parameters.reference;\n        request.amount = parameters.amount;\n        request.operationId = parseInt(parameters.operationId);\n        request.operationName = \"\";\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation;\n        request.scheduling = this.requestFactory.createScheduling(parameters);\n\n        return request;\n    }\n\n    private createCredentials(parameters: any): Credential {\n        return this.requestFactory.createCredentials(parameters);\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizablePathRegex)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegex)\n        )\n    }\n\n}","import { GenericOperationRequest } from '../GenericOperationRequest';\r\nimport { GenericPersonalCreditWorkElement } from './GenericPersonalCreditWorkElement';\r\n\r\nexport class ConsumerLoanAdhesionRequest extends GenericOperationRequest {\r\n    targetAmount: number;\r\n    periodMonths: number;\r\n    includeDocuments: boolean;\r\n    periodYears: number;\r\n    fullKeyToAccount: string;\r\n    currency: string;\r\n    receiptsVenc : any;\r\n    irs : any;\r\n    laboralVinc : any;\r\n    questions: any[];\r\n    professionProof: any;\r\n    addressProof: any;\r\n\r\n    // campos profissionais\r\n    profissao: GenericPersonalCreditWorkElement;\r\n    sector: GenericPersonalCreditWorkElement;\r\n    contrato: GenericPersonalCreditWorkElement;\r\n    trabalho: GenericPersonalCreditWorkElement;\r\n    antiguidade: number;\r\n    codigoIRS: string;\r\n\r\n    // campos financeiros\r\n    nrAgregado: number;\r\n    rendimentoBruto: number;  // exemplo: 11111\r\n    rendimentoLiquido: number;  // exemplo: 11111\r\n    despesasFamiliares: number;  // exemplo: 11111\r\n    encargosMensais: number;  // exemplo: 11111\r\n\r\n    // outros\r\n    prestacao: string; // exemplo: 75,89\r\n    addressDoc: any;\r\n    professionDoc: any;\r\n    citzeanCardDoc: any;\r\n    ral: boolean;\r\n    \r\n    // Otimização de produto\r\n    defaultSimulation: boolean; // para distinguir simulações base de simulações com dados do cliente\r\n    financedLifeInsurance: boolean; // para indicar se o cliente quer seguro de vida\r\n\tuseProd57: boolean; // para distinguir que produto está a ser usado\r\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetShowcaseProductDocument implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\"\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) {}\n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders();\n        const parameters = this.request.getParameters();\n        const productCode = parameters.productCode;\n        const docType = parameters.docType;\n\n        return service.getShowcaseProductDocument(headers, productCode, docType)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetUpdateClientInformationAddress implements AgentifaiCommand<WidgetResponse> {\n\n  private nonAnonymizableRegexPathsSuccess: string[] = [\n      \"headers.+\",\n      \"status\",\n      \"body.expirado\"\n  ]\n\n  private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n  constructor(\n      private request: AgentifaiRequest,\n      private responseFactory: AgentifaiResponseFactoryService\n  ) {}\n  \n  execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n      const headers = this.request.getHeaders()\n\n      return service.getUpdateClientInfoAddress(headers)\n          .pipe(\n              map(resp => this.createSuccessResponse(resp)),\n              catchError(error => this.createErrorResponse(error))\n          )\n  }\n\n  private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n      return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n  }\n\n  private createSuccessResponse(response: any): WidgetResponse {\n      return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n  }\n\n  private createErrorResponse(errorResponse: any) {\n      return throwError(\n          this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n      )\n  }\n\n}","import{ GenericOperationRequest } from \"../operation/request/GenericOperationRequest\";\r\n\r\nexport class MatrixActivateSimExe extends GenericOperationRequest{\r\n    matrixReferenceNumber: string\r\n    hasNifCreds: boolean;\r\n    constructor(){\r\n        super();\r\n        this.matrixReferenceNumber = '';\r\n        this.hasNifCreds = false;\r\n    }\r\n}","export class GetContractNumberQuestionsRequest {\r\n\r\n    nif: string;\r\n    phoneNumber: String;\r\n\r\n    constructor(){\r\n        this.nif = \"\";\r\n        this.phoneNumber = \"\";\r\n    }\r\n\r\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { AgentifaiRequestFactoryService } from 'src/app/services/agentifai/agentifai-request-factory.service';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { CardPaymentRequest } from 'src/app/models/operation/request/cards/CardPaymentRequest';\n\nexport class SimulateCardPaymentCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexesPathsSuccess: String[] = [\n        \"headers.+\",\n        \"status\",\n        `body\\.(operationId|operationStatus|charges.*|${Anonymization.scheduling()})`\n    ]\n\n    private nonAnonymizableRegexesPathsError: String[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private requestFactory: AgentifaiRequestFactoryService,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters: any = this.request.getParameters()\n        const request = this.createRequest(parameters);\n\n        return service.simulateCardPayment(headers, request)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(resp => this.createErrorResponse(resp))\n            );\n    }\n\n    private createRequest(parameters: any): CardPaymentRequest {\n        const request = new CardPaymentRequest();\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation;\n        request.scheduling = this.requestFactory.createScheduling(parameters);\n        request.sourceAccount = parameters.sourceAccount;\n        request.destinationCardNumber = parameters.destinationCardNumber;\n        request.amount = parameters.amount;\n        request.currency = parameters.currency;\n        request.cardPaymentType = parameters.cardPaymentType;\n        request.manuallyEnteredCardNumber = parameters.manuallyEnteredCardNumber;\n\n        return request;\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexesPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizableRegexesPathsError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { CredentialUnlockAnswersRequest } from 'src/app/models/operation/request/customers/CredentialUnlockAnswersRequest';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\n\nexport class UnlockCredentials implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexesPathsSuccess: String[] = [\n        \"headers.+\",\n        \"status\",\n        \"body\\.(operationId|success)\"\n    ]\n\n    private nonAnonymizableRegexesPathsError: String[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters: any = this.request.getParameters()\n        const request = this.createRequest(parameters);\n\n        return service.credentialUnlockAnswers(headers, request)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(resp => this.createErrorResponse(resp))\n            );\n    }\n\n    private createRequest(parameters: any): CredentialUnlockAnswersRequest {\n        const request = new CredentialUnlockAnswersRequest();\n        request.answers = parameters.answers;\n        request.contractNumber = parameters.contractNumber;\n        request.operationId = parameters.operationId;\n        return request;\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexesPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizableRegexesPathsError)\n        )\n    }\n\n}","export class CallbackSolicitationRequest {\n    destinationTelephone: string;\n    period: string;\n    availableDate: string;\n    availableTime: string;\n    subjectKey: string;\n    coments: string;\n    subject: string;\n    destinationType: string;\n    subjectId: string;\n}","\nexport class ResponseEvent{\n    headers: JSON;\n    status: number;\n    body: JSON;\n\n    constructor(headers: JSON, status: number, body: JSON) {\n        this.headers = headers;\n        this.status = status;\n        this.body = body;\n    }\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\n\nexport class GetFrequentServicePaymentCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        \"body\\.(operationName|operationId|amount)(?:$|\\W)\"\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const idFrequentOperation = this.request.getParameters()[\"idFrequentOperation\"];\n\n        return service.getFrequentPaymentDetail(headers, String(idFrequentOperation))\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\n\nexport class GetTransferTypeValidation implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPaths: String[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const targetAccount = this.request.getParameters()[\"targetAccount\"];\n\n        return service.getTransferType(headers, targetAccount)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPaths)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizableRegexPaths)\n        )\n    }\n\n}","import { UpdateClientAddress, UpdateClientAttachment, UpdateClientInfoRequest, UpdateClientPersonal, UpdateClientProfessional } from 'src/app/models/customers/updateClientInfo/UpdateClientInfoRequest';\n\nexport class UpdateClientInformationUtils {\n\n  static createAddress(parameters: any): UpdateClientAddress {\n    const address = new UpdateClientAddress()\n    address.codigoPostal = parameters.postalCode\n    address.codigoPostalFiscal = parameters.fiscalPostalCode\n    address.localidade = parameters.locality\n    address.localidadeFiscal = parameters.fiscalLocality\n    address.moradaFiscalResidencia = parameters.fiscalHomeAddress\n    address.moradaResidencia = parameters.homeAddress\n    address.pais = parameters.country\n    address.paisFiscal = parameters.fiscalCountry\n    address.contribuinteFiscalEstrangeiro = parameters.foreignTaxpayerNumber\n    address.fiscal = parameters.fiscal\n\n    return address;\n  }\n\n  static createAttachments(parameters: [any]): UpdateClientAttachment[] {\n    return parameters.map(object => {\n      const attachment = new UpdateClientAttachment()\n      attachment.name = object.name\n      attachment.document = object.document\n      attachment.extension = object.extension\n\n      return attachment\n    })\n  }\n\n  static createPersonal(parameters: any): UpdateClientPersonal {\n    const personal = new UpdateClientPersonal()\n    personal.estadoCivil = parameters.maritalStatus\n    personal.naturalidade = parameters.naturalness\n    personal.nifEstrangeiro = parameters.foreignFiscalIdNumber\n    personal.nomeCompleto = parameters.fullName\n    personal.nrDoc = parameters.idNumber\n    personal.nrDocFiscal = parameters.fiscalIdNumber\n    personal.paisEstrangeiro = parameters.foreignCountry\n    personal.validade = parameters.validity\n    personal.paisNaturalidade = parameters.birthCountry\n    personal.distrito = parameters.birthDistrict\n    personal.concelho = parameters.birthCounty\n\n    return personal\n  }\n\n  static createProfessional(parameters: any): UpdateClientProfessional {\n    const professional = new UpdateClientProfessional()\n    professional.cirs = parameters.cirs\n    professional.entidadePatronal = parameters.employer\n    professional.profissao = parameters.profession\n    professional.trabalharPorContaDoutrem = parameters.workForSomeoneElse\n    professional.tipoDependencia = parameters.dependencyType\n    professional.tipoCliente = parameters.clientType\n    professional.dataInicioAtividade = parameters.activityBeginDate\n    professional.caeData = parameters.dateCae\n    professional.cae = parameters.cae\n    professional.situacaoSocioProfissional = parameters.socioProfessionalStatus\n    professional.codigoProfissao = parameters.professionCode\n    professional.interveniente = parameters.intervening\n\n    return professional\n  }\n}","import { Scheduling } from 'src/app/models/operation/Scheduling';\n\nexport class GenericOperationRequest {\n    operationId: number;\n    operationName: string;\n    operationEmail: string;\n    forceDuplicateOperation: boolean;\n    scheduling: Scheduling\n\n    constructor() {\n        this.operationId = null;\n        this.operationName = '';\n        this.forceDuplicateOperation = false;\n        this.scheduling = new Scheduling();\n    }\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  assistantConfiguration: {\n    apiUrl: \"https://development.agentifai.com/widget-setup-data\",\n    apiKey: \"eyJ0ZW5hbnRJZCI6ICJjZ2QiLCAiY2hhbm5lbElkIjogIkNnZFdpZGdldCJ9\"\n  },\n  assistantConfigurationEnabled: true,\n  endpoints: [\n    { label: \"development\", baseUrl: \"https://dev.agentifai.com:23007/\" },\n    { label: \"staging-agentifai\", baseUrl: \"https://cgd-staging-client.agentifai.com:23007/\" },\n    { label: \"cq-cgd\", baseUrl: \"https://qoba.cgd.pt/pceApi/rest/v1/\" },\n    { label: \"production\", baseUrl: \"https://app.cgd.pt/pceApi/rest/v1/\" }\n  ]\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { GetContractNumberQuestionsRequest } from 'src/app/models/operation/request/customers/GetContractNumberQuestionsRequest';\n\nexport class GetContractNumberUnlockQuestions implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        \"body\\.(questions\\.*)\"\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters: any = this.request.getParameters()\n        const request = this.createRequest(parameters);\n\n        return service.getContractNumberQuestions(headers, request)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createRequest(parameters: any): GetContractNumberQuestionsRequest {\n        const request = new GetContractNumberQuestionsRequest();\n        request.nif = parameters.nif;\n        request.phoneNumber = parameters.phoneNumber;\n        return request;\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { map, catchError } from 'rxjs/operators';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { Observable, throwError } from 'rxjs';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiRequestFactoryService } from 'src/app/services/agentifai/agentifai-request-factory.service';\nimport { ServicePaymentRequest } from 'src/app/models/operation/request/payments/ServicePaymentRequest';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\n\nexport class SimulateServicePaymentCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexesPaths: String[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService, \n        private requestFactory: AgentifaiRequestFactoryService\n    ) {}\n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const request = this.createServicePaymentRequest();\n\n        return service.simulateServicePayment(headers, request)\n            .pipe(\n                map( resp => this.createSuccessResponse(resp) ),\n                catchError( resp => this.createErrorResponse(resp) )\n            );\n    }\n\n    private createServicePaymentRequest(): ServicePaymentRequest {\n        const parameters: any = this.request.getParameters()\n\n        let request = new ServicePaymentRequest()\n        request.sourceAccount = parameters.sourceAccount;\n        request.entity = parameters.entity;\n        request.reference = parameters.reference;\n        request.amount = parameters.amount;\n        request.operationName = \"\";\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation;\n        request.scheduling = this.requestFactory.createScheduling(parameters);\n\n        return request;\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexesPaths)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizableRegexesPaths)\n        )\n    }\n}\n","\r\nexport class GetContractNumberAnswersRequest {\r\n\r\n    respostasUser: string[];\r\n    nif: string;\r\n\r\n    constructor() {\r\n        this.respostasUser = [];\r\n        this.nif = \"\";\r\n    }\r\n\r\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetUpdateClientInformationPersonal implements AgentifaiCommand<WidgetResponse> {\n\n  private nonAnonymizableRegexPathsSuccess: string[] = [\n      \"headers.+\",\n      \"status\",\n      \"body.expirado\"\n  ]\n\n  private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n  constructor(\n      private request: AgentifaiRequest,\n      private responseFactory: AgentifaiResponseFactoryService\n  ) {}\n  \n  execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n      const headers = this.request.getHeaders()\n\n      return service.getUpdateClientInfoIdentification(headers)\n          .pipe(\n              map(resp => this.createSuccessResponse(resp)),\n              catchError(error => this.createErrorResponse(error))\n          )\n  }\n\n  private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n      return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n  }\n\n  private createSuccessResponse(response: any): WidgetResponse {\n      return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n  }\n\n  private createErrorResponse(errorResponse: any) {\n      return throwError(\n          this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n      )\n  }\n\n}","import { Injectable } from '@angular/core';\nimport { Storage } from '@ionic/storage';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StorageService {\n\n  private apiUrlKey = \"apiUrl\"\n  private apiKeyKey = \"apiKey\"\n  private baseUrlKey = \"baseUrl\"\n  private settingsKey = \"settings\"\n\n  constructor(private storage: Storage) { }\n\n  getApiUrl() {\n    return this.get(this.apiUrlKey)\n  }\n\n  setApiUrl(apiUrl: string) {\n    return this.set(this.apiUrlKey, apiUrl)\n  }\n\n  getApiKey() {\n    return this.get(this.apiKeyKey)\n  }\n\n  setApiKey(apiKey: string) {\n    return this.set(this.apiKeyKey, apiKey)\n  }\n\n  getbaseUrl() {\n    return this.get(this.baseUrlKey)\n  }\n\n  setBaseUrl(baseUrl: string) {\n    return this.set(this.baseUrlKey, baseUrl)\n  }\n\n  getSettings() {\n    return this.get(this.settingsKey)\n  }\n\n  setSettings(settings: any) {\n    return this.set(this.settingsKey, settings)\n  }\n\n  private get(key: string) {\n    return this.ready()\n      .then(() => this.storage.get(key))\n  }\n\n  private set(key: string, value: any) {\n    return this.ready()\n      .then(() => this.storage.set(key, value))\n  }\n\n  private ready() {\n    return this.storage.ready()\n  }\n\n}\n","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { CredentialUnlockQuestionsRequest } from 'src/app/models/operation/request/customers/CredentialUnlockQuestionsRequest';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\n\nexport class GetCredentialsUnlockQuestions implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        \"body\\.(operationId|questions\\.*|passwordRegeneration|forceDuplicateOperation)\"\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters: any = this.request.getParameters()\n        const request = this.createRequest(parameters);\n\n        return service.getCredentialUnlockQuestions(headers, request)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createRequest(parameters: any): CredentialUnlockQuestionsRequest {\n        const request = new CredentialUnlockQuestionsRequest();\n        request.contractNumber = parameters.contractNumber;\n        request.phoneNumber = parameters.phoneNumber;\n        return request;\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","\nexport class AgentifaiUtils {\n\n    static mapFromString(data: string) {\n        var json: any;\n        try {\n            json = JSON.parse(data);\n        } catch (error) {\n            json = this.mapFromAny(data);\n        }\n        return json\n    }\n\n    static mapFromAny(data: any) {\n        const dataStr = JSON.stringify(data);\n        return JSON.parse(dataStr);\n    }\n\n    static convertToApiFormat(detectedValue) {\n        const detectedValueWithDots = detectedValue.replace(\",\", \".\");\n        const result = parseFloat(detectedValueWithDots);\n        const resultInCents = (result * 100).toFixed(0);\n        const resultInApiFormat = resultInCents.toString();\n\n        return resultInApiFormat;\n    }\n\n}\n\n","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetTelecommunicationConfigurationsCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPaths: String[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n\n        return service.getTelecomConfigurations(headers)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPaths)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizableRegexPaths)\n        )\n    }\n\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AgentifaiCardsTransformerService {\n\n  addNewCardProperties(cards: [any]): [any] {\n    if (cards != null) {\n      cards.forEach(card => {\n        card.cardName = card.description != null ? card.description.split(\" - \").reverse()[0] : null;\n      });\n    }\n\n    return cards;\n  }\n\n  addCardsGeneralDataProperties(data: any): any {\n    var cardAccounts = data.cardAccounts\n    cardAccounts = this.addCardAccountsCardProperties(cardAccounts);\n\n    var defaultCardAccount = data.defaultCardAccount;\n    if (defaultCardAccount != null) {\n      defaultCardAccount = this.addNewCardProperties(defaultCardAccount.cards);\n    }\n\n    return data\n  }\n\n  private addCardAccountsCardProperties(accounts: [any]): [any] {\n    accounts.forEach(account => {\n      var cards = account.cards\n      account.cards = this.addNewCardProperties(cards)\n    })\n\n    return accounts\n  }\n\n}\n","export class CredentialUnlockQuestionsRequest {\n\n    contractNumber: string;\n    phoneNumber: String;\n\n    constructor(){\n        this.contractNumber = \"\";\n        this.phoneNumber = \"\";\n    }\n\n}","import { MatrixActivateSimExe } from \"src/app/models/cardMatrix/MatrixActivateSimExe\";\nimport { MatrixRequisitionSimExe } from \"src/app/models/cardMatrix/MatrixRequisitionSimExe\";\nimport { AgentifaiRequestFactoryService } from \"src/app/services/agentifai/agentifai-request-factory.service\";\n\nexport class CredentialsManagementUtils {\n\n    static createMatrixRequisitionSimExe(parameters: any, requestFactory: AgentifaiRequestFactoryService) : MatrixRequisitionSimExe {\n        const request = new MatrixRequisitionSimExe()\n        request.operationId = parseInt(parameters.operationId)\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation\n        request.operationName = ''\n        request.scheduling = requestFactory.createScheduling(parameters)\n        request.adressSequenceNumber = parseInt(parameters.addressSequenceNumber)\n        request.motive = requestFactory.createGenericKeyValue(parameters[\"motive\"])\n\n        return request\n    }\n\n    static createMatrixActivateSimExe(parameters: any, requestFactory: AgentifaiRequestFactoryService): MatrixActivateSimExe {\n        const request = new MatrixActivateSimExe()\n        request.operationId = parseInt(parameters.operationId)\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation\n        request.operationName = ''\n        request.scheduling = requestFactory.createScheduling(parameters)\n        request.matrixReferenceNumber = parameters.matrixReferenceNumber\n        request.hasNifCreds = parameters.hasNifCreds\n\n        return request\n    }\n\n}","import { Observable, throwError } from \"rxjs\";\nimport { catchError, map } from \"rxjs/operators\";\nimport { AgentifaiRequest } from \"src/app/agentifai/models/agentifai-request\";\nimport { WidgetResponse } from \"src/app/agentifai/models/agentifai-widget-response\";\nimport { Anonymization } from \"src/app/agentifai/utils/anonymization-utils\";\nimport { AgentifaiResponseFactoryService } from \"src/app/services/agentifai/agentifai-response-factory.service\";\nimport { AgentifaiServicesProvider } from \"src/app/services/agentifai/agentifai-services.service\";\nimport { AgentifaiCommand } from \"../../commom/agentifai-command\";\n\nexport class GetMatrixConfig implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        'headers.+',\n        'status',\n        String.raw `body\\.((adressList\\.[^.]+\\.adressSequenceNumber)|motiveList\\.[^.]+)`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        \n        return service.matrixConfig(headers)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { GenericOperationRequest } from 'src/app/models/operation/request/GenericOperationRequest'\n\nexport class MBWayPartnerAcceptTransferCGDAccountRequest extends GenericOperationRequest {\n  acceptedTransferCGD: boolean;\n}\n  ","import { GenericOperationRequest } from 'src/app/models/operation/request/GenericOperationRequest'\nimport { Charges } from 'src/app/models/operation/Charges';\n\nexport class TransferInternalRequest extends GenericOperationRequest {\n\n\n    charges: Charges[];\n    sourceAccount: string;\n    destinationAccount: string;\n    destinationAccountCurrency: string;\n    amount: string;\n    currency: string;\n    descriptionForSourceAccount: string;\n    descriptionForDestinationAccount: string;   \n    finality: string;\n    comment: string;\n\n    constructor() {\n        super();\n        this.charges = [new Charges()];\n        this.sourceAccount = '';\n        this.destinationAccount = '';\n        this.destinationAccountCurrency = '';\n        this.amount = '';\n        this.currency = '';\n        this.descriptionForSourceAccount = '';\n        this.descriptionForDestinationAccount = '';     \n        this.finality = '';\n        this.comment = '';\n    }\n\n    get getSourceAccount(): any {\n        return this.sourceAccount;\n    }\n\n    set setSourceAccount(sourceAccount: any) {\n        this.sourceAccount = sourceAccount;\n    }\n\n    get getDestinationAccountAccount(): any {\n        return this.destinationAccount;\n    }\n\n    set setDestinationAccountAccount(destinationAccount: any) {\n        this.destinationAccount = destinationAccount;\n    }\n\n    get getDestinationAccountCurrency(): any {\n        return this.destinationAccountCurrency;\n    }\n\n    set setDestinationAccountCurrency(destinationAccountCurrency: any) {\n        this.destinationAccountCurrency = destinationAccountCurrency;\n    }\n\n    get getAmount(): string {\n        return this.amount;\n    }\n\n    set setAmount(amount: string) {\n        this.amount = amount;\n    }\n\n    get getCurrency(): any {\n        return this.currency;\n    }\n\n    set setCurrency(currency: any) {\n        this.currency = currency;\n    }\n\n    get getDescriptionForSourceAccount(): any {\n        return this.descriptionForSourceAccount;\n    }\n\n    set setDescriptionForSourceAccount(descriptionForSourceAccount: any) {\n        this.descriptionForSourceAccount = descriptionForSourceAccount;\n    }\n\n    get getdescriptionForDestinationAccount(): any {\n        return this.descriptionForDestinationAccount;\n    }\n\n    set setdescriptionForDestinationAccount(descriptionForDestinationAccount: any) {\n        this.descriptionForDestinationAccount = descriptionForDestinationAccount;\n    }\n\n    get getFinality(): string {\n        return this.finality;\n    }\n\n    set setFinality(finality: string) {\n        this.finality = finality;\n    }\n\n    get getComment(): string {\n        return this.comment;\n    }\n\n    set setComment(comment: string) {\n        this.comment = comment;\n    }\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\n\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class DisableBannerPage implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\"\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) {}\n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters = this.request.getParameters()\n        const pageName = parameters.pageName\n\n        return service.disableLandingPageBanner(headers, pageName)\n            .pipe(\n                map( resp => this.createSuccessResponse(resp) ),\n                catchError( error => this.createErrorResponse(error) )\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UtilsService {\n\n  handleError({ error, isLogin = null, isFingerPrint = null }: { error: any; isLogin?: Boolean; isFingerPrint?: Boolean; }) { }\n\n  APPSetTimeout() { }\n\n  APPClearTimeout() { }\n\n  resetCredentials() { }\n\n\n}\n","import { Injectable } from '@angular/core';\nimport { AgentifaiCommandType } from 'src/app/agentifai/commands/commom/agentifai-command-type';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { ExecuteServicePaymentCommand } from 'src/app/agentifai/commands/payments/services/execute-service-payment';\nimport { GetAccountsCommand } from 'src/app/agentifai/commands/accounts/get-accounts';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { GetFrequentServicePaymentCommand } from 'src/app/agentifai/commands/payments/services/get-frequent-service-payment';\nimport { GetPaymentsGeneralData } from 'src/app/agentifai/commands/payments/get-payments-general-data';\nimport { GetOperationProofCommand } from 'src/app/agentifai/commands/operation-proof/get-operation-proof';\nimport { GetCurrentCustomerContactsCommand } from 'src/app/agentifai/commands/get-current-customer-contacts';\nimport { SendOperationProofCommand } from 'src/app/agentifai/commands/operation-proof/send-operation-proof';\nimport { SimulateServicePaymentCommand } from 'src/app/agentifai/commands/payments/services/simulate-service-payment';\nimport { GetPaymentsEntityCommand } from 'src/app/agentifai/commands/payments/get-payments-entity';\nimport { GetAccountBalance } from 'src/app/agentifai/commands/accounts/get-account-balances';\nimport { GetTransactions } from 'src/app/agentifai/commands/accounts/get-transactions';\nimport { SimulateInternalTransferCommand } from 'src/app/agentifai/commands/transfers/internal/simulate-internal-transfer';\nimport { AgentifaiRequestFactoryService } from 'src/app/services/agentifai/agentifai-request-factory.service';\nimport { ExecuteInternalTransferCommand } from 'src/app/agentifai/commands/transfers/internal/execute-internal-transfer';\nimport { ExecuteSEPATransferCommand } from 'src/app/agentifai/commands/transfers/sepa/execute-sepa-transfer';\nimport { SimulateSEPATransferCommand } from 'src/app/agentifai/commands/transfers/sepa/simulate-sepa-transfer';\nimport { ExecuteImmediateTransferCommand } from 'src/app/agentifai/commands/transfers/immediate/execute-immediate-transfer';\nimport { SimulateImmediateTransferCommand } from 'src/app/agentifai/commands/transfers/immediate/simulate-immediate-transfer';\nimport { GetTransferTypeValidation } from 'src/app/agentifai/commands/transfers/get-transfer-type-validation';\nimport { GetClientStatus } from 'src/app/agentifai/commands/transfers/get-client-status';\nimport { GetTransferCalendarRestrictions } from 'src/app/agentifai/commands/transfers/get-transfer-calendar-restrictions';\nimport { GetTransfersGeneralData } from 'src/app/agentifai/commands/transfers/get-transfers-general-data';\nimport { GetFrequentInternalTransfer } from 'src/app/agentifai/commands/transfers/internal/get-frequent-internal-transfer';\nimport { GetFrequentSEPATransfer } from 'src/app/agentifai/commands/transfers/sepa/get-frequent-sepa-transfer';\nimport { GetCredentialsUnlockQuestions } from 'src/app/agentifai/commands/unlock-credentials/get-credential-unlock-questions';\nimport { UnlockCredentials } from 'src/app/agentifai/commands/unlock-credentials/unlock-credentials';\nimport { GetTermsAndConditionsConsentCommand } from 'src/app/agentifai/commands/terms-and-conditions/get-terms-and-conditions-consent';\nimport { ConsentTermsAndConditionsCommand } from 'src/app/agentifai/commands/terms-and-conditions/consent-terms-and-conditions';\nimport { AgentifaiAccountsTransformerService } from 'src/app/services/agentifai/agentifai-accounts-transformer.service';\nimport { GetTelecommunicationConfigurationsCommand } from 'src/app/agentifai/commands/payments/telecommunications/get-telecommunicaition-configurations';\nimport { SimulateTelecommunicationPaymentCommand } from 'src/app/agentifai/commands/payments/telecommunications/simulate-telecommunication-payment';\nimport { ExecuteTelecommunicationPaymentCommand } from 'src/app/agentifai/commands/payments/telecommunications/execute-telecommunication-payment';\nimport { GetFrequentTelecommunicationPaymentCommand } from 'src/app/agentifai/commands/payments/telecommunications/get-frequent-telecommunication-payment';\nimport { GetMBWayCardsCommand } from 'src/app/agentifai/commands/mbway/get-mbway-cards';\nimport { SimulateMBWayAdhesionCommand } from 'src/app/agentifai/commands/mbway/simulate-mbway-adhesion';\nimport { ExecuteMBWayAdhesionCommand } from 'src/app/agentifai/commands/mbway/execute-mbway-adhesion';\nimport { UpdateTransferConsentForCgdAccountCommand } from 'src/app/agentifai/commands/mbway/update-transfer-consent-for-cgd-account';\nimport { GetImmediateTransferPhoneNumbersCommand } from 'src/app/agentifai/commands/transfers/immediate/get-immediate-transfer-phone-numbers';\nimport { GetImmediateTransferAccountsCommand } from 'src/app/agentifai/commands/transfers/immediate/get-immediate-transfer-accounts';\nimport { GetPaymentCards } from 'src/app/agentifai/commands/cards/get-payment-cards';\nimport { GetCardsGeneralData } from 'src/app/agentifai/commands/cards/get-cards-general-data';\nimport { GetCardAccountTransactions } from 'src/app/agentifai/commands/cards/get-card-account-transactions';\nimport { AgentifaiCardsTransformerService } from 'src/app/services/agentifai/agentifai-cards-transformer.service'\nimport { ExecuteCardPaymentCommand } from 'src/app/agentifai/commands/cards/payment/execute-card-payment';\nimport { SimulateCardPaymentCommand } from 'src/app/agentifai/commands/cards/payment/simulate-card-payment';\nimport { GetSmsTokenPhoneNumber } from 'src/app/agentifai/commands/cards/get-sms-token-phone-number';\nimport { ActivateCardCommand } from 'src/app/agentifai/commands/cards/activation/activate-card';\nimport { GetCustomerManager } from 'src/app/agentifai/commands/callback/get-customer-manager';\nimport { GetManagerCallbackConfig } from 'src/app/agentifai/commands/callback/get-manager-callback-config';\nimport { GetManagerAvailableTime } from 'src/app/agentifai/commands/callback/get-manager-available-time';\nimport { SetCallback } from 'src/app/agentifai/commands/callback/set-callback';\nimport { SimulatePersonalLoan } from 'src/app/agentifai/commands/loans/simulate-personal-loan';\nimport { GetPersonalLoanGeneralData } from 'src/app/agentifai/commands/loans/get-personal-loan-general-data';\nimport { SimulatePersonalLoanAdhesion } from 'src/app/agentifai/commands/loans/simulate-personal-loan-adhesion';\nimport { ExecutePersonalLoanAdhesion } from 'src/app/agentifai/commands/loans/execute-personal-loan-adhesion';\nimport { GetPrivateContent } from 'src/app/agentifai/commands/content/get-private-content';\nimport { DisableBannerPage } from 'src/app/agentifai/commands/content/disable-banner-page';\nimport { GetShowcaseCards } from 'src/app/agentifai/commands/cards/acquisition/get-showcase-cards';\nimport { GetShowcaseProductDocument } from 'src/app/agentifai/commands/cards/acquisition/get-showcase-product-document';\nimport { GetCardAdhesionAccounts } from 'src/app/agentifai/commands/cards/acquisition/get-card-adhesion-accounts';\nimport { GetCardAdhesionConfigurations } from 'src/app/agentifai/commands/cards/acquisition/get-card-adhesion-configurations';\nimport { SimulateCardAdhesion } from 'src/app/agentifai/commands/cards/acquisition/simulate-card-adhesion';\nimport { InitNewCreditCard } from 'src/app/agentifai/commands/cards/acquisition/init-new-credit-card';\nimport { ExecuteCardAdhesion } from 'src/app/agentifai/commands/cards/acquisition/execute-card-adhesion';\nimport { GetShowcaseCharacteristics } from 'src/app/agentifai/commands/cards/acquisition/get-showcase-characteristics';\nimport { UnlockContractNumber } from 'src/app/agentifai/commands/unlock-contract-number/unlock-contract-number';\nimport { GetContractNumberUnlockQuestions } from 'src/app/agentifai/commands/unlock-contract-number/get-contract-number-unlock-questions';\nimport { GetUpdateClientInformationAddress } from 'src/app/agentifai/commands/customers/update-client-information/get-update-client-information-address';\nimport { GetUpdateClientInformationList } from 'src/app/agentifai/commands/customers/update-client-information/get-update-client-information-list';\nimport { SimulateUpdateClientInformation } from 'src/app/agentifai/commands/customers/update-client-information/simulate-update-client-information';\nimport { ExecuteUpdateClientInformation } from 'src/app/agentifai/commands/customers/update-client-information/execute-update-client-information';\nimport { GetUpdateClientInformationValidity } from 'src/app/agentifai/commands/customers/update-client-information/get-update-client-information-validity';\nimport { GetUpdateClientInformationProfessional } from 'src/app/agentifai/commands/customers/update-client-information/get-update-client-information-professional';\nimport { GetUpdateClientInformationPersonal } from 'src/app/agentifai/commands/customers/update-client-information/get-update-client-information-personal';\nimport { GetCredentialsManagement } from 'src/app/agentifai/commands/credentialsmanagement/get-credentials-management';\nimport { GetMatrixConfig } from 'src/app/agentifai/commands/credentialsmanagement/matrixrequisition/get-matrix-config';\nimport { SimulateMatrixRequisition } from 'src/app/agentifai/commands/credentialsmanagement/matrixrequisition/simulate-matrix-requisition';\nimport { ExecuteMatrixRequisition } from 'src/app/agentifai/commands/credentialsmanagement/matrixrequisition/execute-matrix-requisition';\nimport { SimulateActivateMatrix } from 'src/app/agentifai/commands/credentialsmanagement/matrixactivation/simulate-activate-matrix';\nimport { ExecuteActivateMatrix } from 'src/app/agentifai/commands/credentialsmanagement/matrixactivation/execute-activate-matrix';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AgentifaiCommandFactoryService {\n\n  constructor(\n    private responseFactory: AgentifaiResponseFactoryService,\n    private requestFactory: AgentifaiRequestFactoryService,\n    private accountsTranformer: AgentifaiAccountsTransformerService,\n    private cardsTransformer: AgentifaiCardsTransformerService\n  ) { }\n\n  createCommand(\n    commandType: AgentifaiCommandType,\n    request: AgentifaiRequest\n  ): AgentifaiCommand<any> {\n    let command: AgentifaiCommand<any>;\n\n    switch (commandType) {\n\n      case AgentifaiCommandType.GetAccounts:\n        command = this.createGetAccounts(request);\n        break;\n\n      case AgentifaiCommandType.GetAccountBalances:\n        command = this.createGetAccountBalances(request);\n        break;\n\n      case AgentifaiCommandType.GetTransactions:\n        command = this.createGetTransactions(request);\n        break;\n\n      case AgentifaiCommandType.GetPaymentsEntity:\n        command = this.createGetPaymentsEntity(request);\n        break;\n\n      case AgentifaiCommandType.GetFrequentServicePayment:\n        command = this.createGetFrequentServicePayment(request);\n        break;\n\n      case AgentifaiCommandType.GetPaymentsGeneralData:\n        command = this.createGetPaymentsGeneralData(request);\n        break;\n\n      case AgentifaiCommandType.SimulateServicePayment:\n        command = this.createSimulateServicePayment(request);\n        break;\n\n      case AgentifaiCommandType.ExecuteServicePayment:\n        command = this.createExecuteService(request);\n        break;\n\n      case AgentifaiCommandType.GetTelecommunicationConfigurations:\n        command = this.createGetTelecommunicationConfigurations(request);\n        break;\n\n      case AgentifaiCommandType.SimulateTelecommunicationPayment:\n        command = this.createSimulateTelecommunicationPayment(request);\n        break;\n\n      case AgentifaiCommandType.ExecuteTelecommunicationPayment:\n        command = this.createExecuteTelecommunicationPayment(request);\n        break;\n\n      case AgentifaiCommandType.GetFrequentTelecommunicationPayment:\n        command = this.createGetFrequentTelecommunicationPayment(request);\n        break;\n\n      case AgentifaiCommandType.GetCurrentCustomerContacts:\n        command = this.createGetCurrentCustomerContacts(request);\n        break;\n\n      case AgentifaiCommandType.GetOperationProof:\n        command = this.createGetOperationProof(request);\n        break;\n\n      case AgentifaiCommandType.SendOperationProof:\n        command = this.createSendOperationProof(request);\n        break;\n\n      case AgentifaiCommandType.SimulateInternalTransfer:\n        command = this.createSimulateInternalTransfer(request);\n        break;\n\n      case AgentifaiCommandType.ExecuteInternalTransfer:\n        command = this.createExecuteInternalTransfer(request);\n        break;\n\n      case AgentifaiCommandType.SimulateSEPATransfer:\n        command = this.createSimulateSEPATransfer(request);\n        break;\n\n      case AgentifaiCommandType.ExecuteSEPATransfer:\n        command = this.createExecuteSEPATransfer(request);\n        break;\n\n      case AgentifaiCommandType.SimulateImmediateTransfer:\n        command = this.createSimulateImmediateTransferCommand(request);\n        break;\n\n      case AgentifaiCommandType.ExecuteImmediateTransfer:\n        command = this.createExecuteImmediateTransferCommand(request);\n        break;\n\n      case AgentifaiCommandType.GetTransferTypeValidation:\n        command = this.createGetTransferTypeValidation(request);\n        break;\n\n      case AgentifaiCommandType.GetTransferCalendarRestrictions:\n        command = this.createGeTransferCalendarRestrictions(request);\n        break;\n\n      case AgentifaiCommandType.GetClientStatus:\n        command = this.createGetClientStatus(request);\n        break;\n\n      case AgentifaiCommandType.GetTransfersGeneralData:\n        command = this.createGetTransfersGeneralData(request);\n        break;\n\n      case AgentifaiCommandType.GetFrequentInternalTransfer:\n        command = this.createGetFrequentInternalTransfer(request);\n        break;\n\n      case AgentifaiCommandType.GetFrequentSEPATransfer:\n        command = this.createGetFrequentSEPATransfer(request);\n        break;\n\n      case AgentifaiCommandType.GetImmediateTransferPhoneNumbers:\n        command = this.createGetImmediateTransferPhoneNumbers(request);\n        break;\n\n      case AgentifaiCommandType.GetImmediateTransferAccounts:\n        command = this.createGetImmediateTransferAccounts(request);\n        break;\n\n      case AgentifaiCommandType.GetCredentialUnlockQuestions:\n        command = this.createGetCredentialUnlockQuestions(request);\n        break;\n\n      case AgentifaiCommandType.UnlockCredentials:\n        command = this.createUnlockQuestions(request);\n        break;\n\n      case AgentifaiCommandType.GetContractNumberUnlockQuestions:\n        command = this.createGetContractNumberUnlockQuestions(request);\n        break;\n\n      case AgentifaiCommandType.UnlockContractNumber:\n        command = this.createUnlockContractNumber(request);\n        break;\n\n      case AgentifaiCommandType.GetTermsAndConditionsConsent:\n        command = this.createGetTermsAndConditionsConsent(request);\n        break;\n\n      case AgentifaiCommandType.ConsentTermsAndConditions:\n        command = this.createConsentTermsAndConditions(request);\n        break;\n\n      case AgentifaiCommandType.GetMBWayCards:\n        command = this.createGetMBWayCards(request);\n        break;\n\n      case AgentifaiCommandType.SimulateMBWayAdhesion:\n        command = this.createSimulateMBWayAdhesion(request);\n        break;\n\n      case AgentifaiCommandType.ExecuteMBWayAdhesion:\n        command = this.createExecuteMBWayAdhesion(request);\n        break;\n\n      case AgentifaiCommandType.UpdateTransferConsentForCgdAccount:\n        command = this.createUpdateTransferConsentForCgdAccounts(request);\n        break;\n\n      case AgentifaiCommandType.GetPaymentCards:\n        command = this.createGetPaymentCards(request);\n        break;\n\n      case AgentifaiCommandType.GetCardsGeneralData:\n        command = this.createGetCardsGeneralData(request);\n        break;\n\n      case AgentifaiCommandType.GetCardAccountTransactions:\n        command = this.createGetCardAccountTransactions(request);\n        break;\n\n      case AgentifaiCommandType.SimulateCardPayment:\n        command = this.createSimulateCardPayment(request);\n        break;\n\n      case AgentifaiCommandType.ExecuteCardPayment:\n        command = this.createExecuteCardPayment(request);\n        break;\n\n      case AgentifaiCommandType.ActivateCard:\n        command = this.createActivateCard(request);\n        break;\n\n      case AgentifaiCommandType.GetSmsTokenPhoneNumber:\n        command = this.createGetSmsTokenPhoneNumber(request);\n        break;\n\n      case AgentifaiCommandType.GetCustomerManager:\n        command = this.createGetCustomerManager(request);\n        break;\n\n      case AgentifaiCommandType.GetManagerCallbackConfig:\n        command = this.createGetManagerCallbackConfig(request);\n        break;\n\n      case AgentifaiCommandType.GetManagerAvailableTime:\n        command = this.createGetManagerAvailableTime(request);\n        break;\n\n      case AgentifaiCommandType.SetCallback:\n        command = this.createSetCallback(request);\n        break;\n\n      case AgentifaiCommandType.SimulatePersonalLoan:\n        command = this.createSimulatePersonalLoan(request);\n        break;\n\n      case AgentifaiCommandType.GetPersonalLoanGeneralData:\n        command = this.createGetPersonalLoanGeneralData(request);\n        break;\n\n      case AgentifaiCommandType.SimulatePersonalLoanAdhesion:\n        command = this.createSimulatePersonalLoanAdhesion(request);\n        break;\n\n      case AgentifaiCommandType.ExecutePersonalLoanAdhesion:\n        command = this.createExecutePersonalLoanAdhesion(request);\n        break;\n\n      case AgentifaiCommandType.GetPrivateContent:\n        command = this.createGetPrivateContent(request);\n        break;\n\n      case AgentifaiCommandType.DisableBannerPage:\n        command = this.createDisableBannerPage(request);\n        break;\n\n      case AgentifaiCommandType.GetShowcaseCards:\n        command = this.createGetShowcaseCards(request);\n        break;\n\n      case AgentifaiCommandType.GetShowcaseCharacteristics:\n        command = this.createGetShowcaseCharacteristics(request);\n        break;\n\n      case AgentifaiCommandType.GetShowcaseProductDocument:\n        command = this.createGetShowcaseProductDocument(request);\n        break;\n\n      case AgentifaiCommandType.GetCardAdhesionAccounts:\n        command = this.createGetCardAdhesionAccounts(request);\n        break;\n\n      case AgentifaiCommandType.GetCardAdhesionConfigurations:\n        command = this.createGetCardAdhesionConfigurations(request);\n        break;\n\n      case AgentifaiCommandType.SimulateCardAdhesion:\n        command = this.createSimulateCardAdhesion(request);\n        break;\n\n      case AgentifaiCommandType.InitNewCreditCard:\n        command = this.createInitNewCreditCard(request);\n        break;\n\n      case AgentifaiCommandType.ExecuteCardAdhesion:\n        command = this.createExecuteCardAdhesion(request);\n        break;\n\n      case AgentifaiCommandType.GetUpdateClientInformationAddress:\n        command = this.createGetUpdateClientInformationAddress(request);\n        break;\n\n      case AgentifaiCommandType.GetUpdateClientInformationPersonal:\n        command = this.createGetUpdateClientInformationPersonal(request);\n        break;\n\n      case AgentifaiCommandType.GetUpdateClientInformationProfessional:\n        command = this.createGetUpdateClientInformationProfessional(request);\n        break;\n\n      case AgentifaiCommandType.GetUpdateClientInformationValidity:\n        command = this.createGetUpdateClientInformationValidity(request);\n        break;\n\n      case AgentifaiCommandType.GetUpdateClientInformationList:\n        command = this.createGetUpdateClientInformationList(request);\n        break;\n\n      case AgentifaiCommandType.SimulateUpdateClientInformation:\n        command = this.createSimulateUpdateClientInformation(request);\n        break;\n\n      case AgentifaiCommandType.ExecuteUpdateClientInformation:\n        command = this.createExecuteUpdateClientInformation(request);\n        break;\n\n      case AgentifaiCommandType.GetCredentialsManagement:\n        command = this.createGetCredentialsManagement(request);\n        break;\n\n      case AgentifaiCommandType.GetMatrixConfig:\n        command = this.createGetMatrixConfig(request);\n        break;\n\n      case AgentifaiCommandType.SimulateMatrixRequisition:\n        command = this.createSimulateMatrixRequistion(request);\n        break;\n\n      case AgentifaiCommandType.ExecuteMatrixRequisition:\n        command = this.createExecuteMatrixRequisition(request);\n        break;\n\n      case AgentifaiCommandType.SimulateActivateMatrix:\n        command = this.createSimulateActivateMatrix(request);\n        break;\n      \n      case AgentifaiCommandType.ExecuteActivateMatrix:\n        command = this.createExecuteActivateMatrix(request);\n        break;\n\n      default:\n        break;\n        \n    }\n\n    return command;\n  }\n\n  //Accounts\n  private createGetAccounts(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetAccountsCommand(request, this.responseFactory, this.accountsTranformer);\n  }\n\n  private createGetAccountBalances(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetAccountBalance(request, this.responseFactory);\n  }\n\n  private createGetTransactions(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetTransactions(request, this.responseFactory);\n  }\n\n  //Services Payment\n  private createGetPaymentsEntity(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetPaymentsEntityCommand(request, this.responseFactory);\n  }\n\n  private createGetPaymentsGeneralData(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetPaymentsGeneralData(request, this.responseFactory, this.accountsTranformer);\n  }\n\n  private createGetFrequentServicePayment(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetFrequentServicePaymentCommand(request, this.responseFactory);\n  }\n\n  private createSimulateServicePayment(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new SimulateServicePaymentCommand(request, this.responseFactory, this.requestFactory);\n  }\n\n  private createExecuteService(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new ExecuteServicePaymentCommand(request, this.responseFactory, this.requestFactory);\n  }\n\n  private createGetCurrentCustomerContacts(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetCurrentCustomerContactsCommand(request, this.responseFactory);\n  }\n\n  //Telecommunications Payment\n  private createGetTelecommunicationConfigurations(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetTelecommunicationConfigurationsCommand(request, this.responseFactory);\n  }\n\n  private createSimulateTelecommunicationPayment(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new SimulateTelecommunicationPaymentCommand(request, this.requestFactory, this.responseFactory);\n  }\n\n  private createExecuteTelecommunicationPayment(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new ExecuteTelecommunicationPaymentCommand(request, this.requestFactory, this.responseFactory);\n  }\n\n  private createGetFrequentTelecommunicationPayment(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetFrequentTelecommunicationPaymentCommand(request, this.responseFactory);\n  }\n\n  //Proofs\n  private createGetOperationProof(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetOperationProofCommand(request, this.responseFactory);\n  }\n\n  private createSendOperationProof(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new SendOperationProofCommand(request, this.responseFactory);\n  }\n\n  //Transfers\n  private createSimulateInternalTransfer(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new SimulateInternalTransferCommand(request, this.responseFactory, this.requestFactory);\n  }\n\n  private createExecuteInternalTransfer(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new ExecuteInternalTransferCommand(request, this.responseFactory, this.requestFactory);\n  }\n\n  private createSimulateSEPATransfer(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new SimulateSEPATransferCommand(request, this.responseFactory, this.requestFactory);\n  }\n\n  private createExecuteSEPATransfer(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new ExecuteSEPATransferCommand(request, this.responseFactory, this.requestFactory);\n  }\n\n  private createSimulateImmediateTransferCommand(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new SimulateImmediateTransferCommand(request, this.responseFactory);\n  }\n\n  private createExecuteImmediateTransferCommand(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new ExecuteImmediateTransferCommand(request, this.responseFactory, this.requestFactory);\n  }\n\n  private createGetTransferTypeValidation(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetTransferTypeValidation(request, this.responseFactory);\n  }\n\n  private createGeTransferCalendarRestrictions(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetTransferCalendarRestrictions(request, this.responseFactory);\n  }\n\n  private createGetClientStatus(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetClientStatus(request, this.responseFactory);\n  }\n\n  private createGetTransfersGeneralData(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetTransfersGeneralData(request, this.responseFactory, this.accountsTranformer);\n  }\n\n  private createGetFrequentInternalTransfer(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetFrequentInternalTransfer(request, this.responseFactory);\n  }\n\n  private createGetFrequentSEPATransfer(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetFrequentSEPATransfer(request, this.responseFactory);\n  }\n\n  private createGetImmediateTransferPhoneNumbers(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetImmediateTransferPhoneNumbersCommand(request, this.responseFactory);\n  }\n\n  private createGetImmediateTransferAccounts(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetImmediateTransferAccountsCommand(request, this.responseFactory, this.accountsTranformer);\n  }\n\n  //Terms and Conditions\n  private createGetTermsAndConditionsConsent(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetTermsAndConditionsConsentCommand(request, this.responseFactory);\n  }\n\n  private createConsentTermsAndConditions(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new ConsentTermsAndConditionsCommand(request, this.responseFactory);\n  }\n\n  //Unlock Contract\n  private createGetCredentialUnlockQuestions(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetCredentialsUnlockQuestions(request, this.responseFactory);\n  }\n\n  private createUnlockQuestions(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new UnlockCredentials(request, this.responseFactory);\n  }\n\n  //Unlock Contract Number\n  private createGetContractNumberUnlockQuestions(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetContractNumberUnlockQuestions(request, this.responseFactory);\n  }\n\n  private createUnlockContractNumber(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new UnlockContractNumber(request, this.responseFactory);\n  }\n\n  // MBWAY\n  private createGetMBWayCards(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetMBWayCardsCommand(request, this.responseFactory);\n  }\n\n  private createSimulateMBWayAdhesion(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new SimulateMBWayAdhesionCommand(request, this.responseFactory, this.requestFactory);\n  }\n\n  private createExecuteMBWayAdhesion(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new ExecuteMBWayAdhesionCommand(request, this.responseFactory, this.requestFactory);\n  }\n\n  private createUpdateTransferConsentForCgdAccounts(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new UpdateTransferConsentForCgdAccountCommand(request, this.responseFactory, this.requestFactory);\n  }\n\n  // Cards\n  private createGetPaymentCards(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetPaymentCards(request, this.responseFactory, this.cardsTransformer);\n  }\n\n  private createGetCardsGeneralData(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetCardsGeneralData(request, this.responseFactory, this.cardsTransformer);\n  }\n\n  private createGetCardAccountTransactions(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetCardAccountTransactions(request, this.responseFactory, this.cardsTransformer);\n  }\n\n  private createSimulateCardPayment(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new SimulateCardPaymentCommand(request, this.requestFactory, this.responseFactory);\n  }\n\n  private createExecuteCardPayment(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new ExecuteCardPaymentCommand(request, this.requestFactory, this.responseFactory);\n  }\n\n  private createActivateCard(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new ActivateCardCommand(request, this.responseFactory);\n  }\n\n  private createGetSmsTokenPhoneNumber(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetSmsTokenPhoneNumber(request, this.responseFactory);\n  }\n\n  // Callback\n  private createGetCustomerManager(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetCustomerManager(request, this.responseFactory)\n  }\n\n  private createGetManagerCallbackConfig(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetManagerCallbackConfig(request, this.responseFactory)\n  }\n\n  private createGetManagerAvailableTime(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetManagerAvailableTime(request, this.responseFactory)\n  }\n\n  private createSetCallback(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new SetCallback(request, this.responseFactory)\n  }\n\n  // Loans\n  private createSimulatePersonalLoan(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new SimulatePersonalLoan(request, this.requestFactory, this.responseFactory)\n  }\n\n  private createGetPersonalLoanGeneralData(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetPersonalLoanGeneralData(request, this.responseFactory, this.accountsTranformer)\n  }\n\n  private createSimulatePersonalLoanAdhesion(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new SimulatePersonalLoanAdhesion(request, this.requestFactory, this.responseFactory)\n  }\n\n  private createExecutePersonalLoanAdhesion(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new ExecutePersonalLoanAdhesion(request, this.requestFactory, this.responseFactory)\n  }\n\n  private createGetPrivateContent(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetPrivateContent(request, this.responseFactory)\n  }\n\n  // Moratorium Form\n  private createDisableBannerPage(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new DisableBannerPage(request, this.responseFactory)\n  }\n\n  // Card acquisition\n  private createGetShowcaseCards(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetShowcaseCards(request, this.responseFactory)\n  }\n\n  private createGetShowcaseCharacteristics(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetShowcaseCharacteristics(request, this.responseFactory)\n  }\n\n  private createGetShowcaseProductDocument(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetShowcaseProductDocument(request, this.responseFactory)\n  }\n\n  private createGetCardAdhesionAccounts(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetCardAdhesionAccounts(request, this.responseFactory, this.accountsTranformer)\n  }\n\n  private createGetCardAdhesionConfigurations(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetCardAdhesionConfigurations(request, this.responseFactory)\n  }\n\n  private createSimulateCardAdhesion(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new SimulateCardAdhesion(request, this.responseFactory, this.requestFactory)\n  }\n\n  private createInitNewCreditCard(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new InitNewCreditCard(request, this.responseFactory, this.requestFactory)\n  }\n\n  private createExecuteCardAdhesion(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new ExecuteCardAdhesion(request, this.responseFactory, this.requestFactory)\n  }\n\n  //Update Client Information\n  private createGetUpdateClientInformationAddress(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetUpdateClientInformationAddress(request, this.responseFactory)\n  }\n\n  private createGetUpdateClientInformationPersonal(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetUpdateClientInformationPersonal(request, this.responseFactory)\n  }\n\n  private createGetUpdateClientInformationProfessional(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetUpdateClientInformationProfessional(request, this.responseFactory)\n  }\n\n  private createGetUpdateClientInformationValidity(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetUpdateClientInformationValidity(request, this.responseFactory)\n  }\n\n  private createGetUpdateClientInformationList(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetUpdateClientInformationList(request, this.responseFactory)\n  }\n\n  private createSimulateUpdateClientInformation(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new SimulateUpdateClientInformation(request, this.requestFactory, this.responseFactory)\n  }\n\n  private createExecuteUpdateClientInformation(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new ExecuteUpdateClientInformation(request, this.requestFactory, this.responseFactory)\n  }\n\n  private createGetCredentialsManagement(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetCredentialsManagement(request, this.responseFactory)\n  }\n\n  private createGetMatrixConfig(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetMatrixConfig(request, this.responseFactory)\n  }\n\n  private createSimulateMatrixRequistion(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new SimulateMatrixRequisition(request, this.responseFactory, this.requestFactory)\n  }\n\n  private createExecuteMatrixRequisition(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new ExecuteMatrixRequisition(request, this.responseFactory, this.requestFactory)\n  }\n\n  private createSimulateActivateMatrix(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new SimulateActivateMatrix(request, this.responseFactory, this.requestFactory)\n  }\n\n  private createExecuteActivateMatrix(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new ExecuteActivateMatrix(request, this.responseFactory, this.requestFactory)\n  }\n\n}","import { Observable, throwError } from \"rxjs\";\nimport { catchError, map } from \"rxjs/operators\";\nimport { AgentifaiRequest } from \"src/app/agentifai/models/agentifai-request\";\nimport { WidgetResponse } from \"src/app/agentifai/models/agentifai-widget-response\";\nimport { Anonymization } from \"src/app/agentifai/utils/anonymization-utils\";\nimport { MatrixRequisitionSimExe } from \"src/app/models/cardMatrix/MatrixRequisitionSimExe\";\nimport { AgentifaiRequestFactoryService } from \"src/app/services/agentifai/agentifai-request-factory.service\";\nimport { AgentifaiResponseFactoryService } from \"src/app/services/agentifai/agentifai-response-factory.service\";\nimport { AgentifaiServicesProvider } from \"src/app/services/agentifai/agentifai-services.service\";\nimport { AgentifaiCommand } from \"../../commom/agentifai-command\";\nimport { CredentialsManagementUtils } from \"../credentials-management-utils\";\n\nexport class SimulateMatrixRequisition implements AgentifaiCommand<WidgetResponse> {\n    \n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        'headers.+',\n        'status',\n        `body\\.(operationId|operationStatus|${Anonymization.scheduling()})`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private requestFactory: AgentifaiRequestFactoryService\n    ) { }   \n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters = this.request.getParameters()\n        const request = this.createRequest(parameters)\n        \n        return service.simulateMatrixRequisition(headers,request)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createRequest(parameters: any): MatrixRequisitionSimExe {\n        return CredentialsManagementUtils.createMatrixRequisitionSimExe(parameters, this.requestFactory);\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { CardsUtils } from 'src/app/agentifai/commands/cards/cards-utils';\n\nexport class GetMBWayCardsCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        `body\\.[^.]+\\.(${CardsUtils.nonAnonymizedCardProperties})`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const fullAccountKey = this.request.getParameters()[\"fullAccountKey\"];\n\n        return service.getCardsForMbwayAssociation(headers, fullAccountKey)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\n\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetPrivateContent implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\"\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) {}\n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters = this.request.getParameters()\n        const featureId = parameters.featureId\n\n        return service.getPrivateContent(headers, featureId)\n            .pipe(\n                map( resp => this.createSuccessResponse(resp) ),\n                catchError( error => this.createErrorResponse(error) )\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\n\nexport class GetOperationProofCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\"\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const operationId = Number(this.request.getParameters()[\"operationId\"]);\n\n        return service.getOperationProof(headers, operationId)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Api } from 'src/app/services/api/api.service';\nimport { Observable } from 'rxjs';\nimport { TransferInternalRequest } from 'src/app/models/operation/request/transfers/TransferInternalRequest';\nimport { TransferSEPARequest } from 'src/app/models/operation/request/transfers/TransferSEPARequest';\nimport { TransferImmediateRequest } from 'src/app/models/operation/request/transfers/TransferImmediateRequest';\nimport { ServicePaymentRequest } from 'src/app/models/operation/request/payments/ServicePaymentRequest';\nimport { TelecommunicationsPaymentRequest } from 'src/app/models/operation/request/payments/TelecommunicationsPaymentRequest';\nimport { Credential } from 'src/app/models/operation/Credential';\nimport { OperationProofByEmailRequest } from 'src/app/models/operation/OperationProofByEmailRequest';\nimport { CredentialUnlockQuestionsRequest } from 'src/app/models/operation/request/customers/CredentialUnlockQuestionsRequest';\nimport { CredentialUnlockAnswersRequest } from 'src/app/models/operation/request/customers/CredentialUnlockAnswersRequest';\nimport { VoiceTreatmentConsentRequest } from 'src/app/models/operation/request/devices/VoiceTreatmentConsentRequest';\nimport { MBWayPartnerRequest } from 'src/app/models/operation/request/cards/MBWayPartnerRequest';\nimport { MBWayPartnerAcceptTransferCGDAccountRequest } from 'src/app/models/operation/request/cards/MBWayPartnerAcceptTransferCGDAccountRequest';\nimport { CardPaymentRequest } from 'src/app/models/operation/request/cards/CardPaymentRequest';\nimport { CallbackSolicitationRequest } from 'src/app/models/operation/request/customers/CallbackSolicitationRequest';\nimport { ConsumerLoanAdhesionRequest } from 'src/app/models/operation/request/loans/ConsumerLoanAdhesionRequest';\nimport { CardRequestRequest } from 'src/app/models/operation/request/cards/CardRequestRequest';\nimport { GetContractNumberQuestionsRequest } from 'src/app/models/operation/request/customers/GetContractNumberQuestionsRequest';\nimport { GetContractNumberAnswersRequest } from 'src/app/models/operation/request/customers/GetContractNumberAnswersRequest';\nimport { UpdateClientInfoRequest } from 'src/app/models/customers/updateClientInfo/UpdateClientInfoRequest';\nimport { MatrixActivateSimExe } from 'src/app/models/cardMatrix/MatrixActivateSimExe';\nimport { MatrixRequisitionSimExe } from 'src/app/models/cardMatrix/MatrixRequisitionSimExe';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AgentifaiServicesProvider {\n\n  ACCOUNTS_FOR_BALANCES_AND_TRANSACTIONS: string = \"business/accounts?targetOperationType=BALANCES_AND_TRANSACTIONS\";\n  ACCOUNTS_FOR_BALANCES_AND_TRANSACTIONS_DEPOSITSONLY: string = \"business/accounts?targetOperationType=DEPOSIT_ACCOUNT_BALANCES\";\n  ACCOUNT_BALANCES_AND_TRANSACTIONS: string = \"business/accounts/#ACCOUNT#?includeBalancesInResponse=true&includeTransactionsInResponse=true&fromBookDate=#FROM_DATE#&toBookDate=#TO_DATE#\";\n  ACCOUNT_TRANSACTIONS: string = \"business/accounts/#ACCOUNT#/transactions?fromBookDate=#FROM_DATE#&toBookDate=#TO_DATE#\";\n  ACCOUNT_BALANCES: string = \"business/accounts/#ACCOUNT#/balances\";\n\n  EXECUTE_SERVICE_PAYMENT: string = \"business/payments/service/executions\";\n  SIMULATE_SERVICE_PAYMENT: string = \"business/payments/service/simulations\";\n  PAYMENTS_PAGE_DATA_SERVICE: string = \"business/payments/generaldataforpayments?paymentOperationsFilter=SERVICES_PAYMENT,TAXES_PAYMENT,TELECOMMUNICATIONS_PAYMENT,SOCIAL_SECURITY_PAYMENT\";\n  PAYMENT_CALENDAR_SERVICE: string = \"business/payments/calendarrestrictions\";\n  GET_ENTITY: string = \"business/payments/entities\";\n  GET_FREQUENT_SERVICE_PAYMENT_DETAIL: string = \"business/payments/service/frequent\";\n\n  TELECOM_CONFIGURATIONS: string = \"business/payments/telecommunications/configurations\";\n  SIMULATE_TELECOM_PAYMENT: string = \"business/payments/telecommunications/simulations\";\n  EXECUTE_TELECOM_PAYMENT: string = \"business/payments/telecommunications/executions\";\n  GET_FREQUENT_TELECOM_PAYMENT_DETAIL: string = \"business/payments/telecommunications/frequent\";\n\n  BUSINESS_OPERATIONS: string = \"business/operations\";\n  PROOFS_EMAILS: string = \"proofs/emails\";\n\n  INTERNAL_TRANSFER_SIMULATION_SERVICE: string = \"business/transfers/internal/simulations\";\n  INTERNAL_TRANSFER_EXECUTION_SERVICE: string = \"business/transfers/internal/executions\";\n  INTERNAL_TRANSFER_CERTIFICATE_SERVICE: string = \"business/transfers/internal/certificate\";\n  INTERNAL_TRANSFER_SIMULATE_CERTIFICATE_SERVICE: string = \"business/transfers/internal/certificate/simulations\";\n  INTERNAL_TRANSFER_FREQUENT_SERVICE: string = \"business/transfers/internal/frequent\";\n  TRANSFER_PAGE_DATA_SERVICE: string = \"business/transfers/generaldatafortransfers\";\n  TRANSFER_TYPE_SERVICE: string = \"business/transfers/types/validate?targetAccount=\";\n  INTERNAL_TRANSFER_CALENDAR_SERVICE: string = \"business/transfers/calendarrestrictions?transferTypeFilter=INTERNAL_TRANSFER\";\n  SEPA_TRANSFER_CALENDAR_SERVICE: string = \"business/transfers/calendarrestrictions?transferTypeFilter=SEPA_TRANSFER\";\n  ALL_TRANSFERS_CALENDAR_SERVICE: string = \"business/transfers/calendarrestrictions?transferTypeFilter=INTERNAL_TRANSFER,SEPA_TRANSFER,INTERNATIONAL_TRANSFER\";\n  SEPA_TRANSFER_SIMULATION_SERVICE: string = \"business/transfers/sepa/simulations\";\n  SEPA_TRANSFER_EXECUTION_SERVICE: string = \"business/transfers/sepa/executions\";\n  SEPA_TRANSFER_CERTIFICATE_SERVICE: string = \"business/transfers/sepa/certificate\";\n  SEPA_TRANSFER_SIMULATE_CERTIFICATE_SERVICE: string = \"business/transfers/sepa/certificate/simulations\";\n  SEPA_TRANSFER_FREQUENT_SERVICE: string = \"business/transfers/sepa/frequent\";\n  SEPA_TRANSFER_VALIDATE_BENEFICIARY: string = \"business/transfers/sepa/validations/beneficiary?beneficiaryName=\";\n  SEPA_TRANSFER_GET_FREQUENT_OPERATION: string = \"business/transfers/sepa/frequent\";\n  IMMEDIATE_TRANSFER_SIMULATION_SERVICE: string = \"business/transfers/immediate/simulations\";\n  IMMEDIATE_TRANSFER_EXECUTION_SERVICE: string = \"business/transfers/immediate/executions\";\n  ACCOUNTS_FOR_IMMEDIATE_TRANSFER_REGISTRATION: string = \"business/accounts?targetOperationType=IMMEDIATE_TRANSFER_REGISTRATION\";\n  PHONE_NUMBERS_FOR_IMMEDIATE_TRANSFER_REGISTRATION: string = \"business/transfers/immediate/registration/contacts\";\n  MBWAY_PARTNER_CLIENT_STATUS: string = \"business/cards/mbwaypartner/clientStatus\";\n  MBWAY_PARTNER_CARDS_LIST: string = \"business/cards/mbwaypartner/cards\";\n  WITHDRAWAL_SIMULATE_ADHESION_MBWAY: string = \"business/cards/mbwaypartner/adhesion/simulationsv2\";\n  WITHDRAWAL_EXECUTE_ADHESION_MBWAY: string = \"business/cards/mbwaypartner/adhesion/executionsv2\";\n  MBWAY_ACCEPT_TRANSFERS_CGD: string = \"business/cards/mbwaypartner/acceptTransferCGD\";\n  CUSTOMER_CONTACTS: string = \"business/customers/current/contacts\";\n  \n  CREDENTIAL_UNLOCK_QUESTIONS: string = \"business/customers/contracts/credencialUnlockQuestions\";\n  CREDENTIAL_UNLOCK_ANSWERS: string = \"business/customers/contracts/credencialUnlockAnswers\"\n  GET_CONTRACT_NUMBER_QUESTIONS: string = \"business/customers/contracts/contractUnlockQuestions\";\n  GET_CONTRACT_NUMBER_ANSWERS: string = \"business/customers/contracts/contractUnlockAnswers\"\n\n  VOICE_TREATMENT_CONSENT: string = \"business/consent/voiceTreatment\";\n  LOGOUT_SERVICE: string = \"system/security/authentications/current\";\n\n  GENERAL_CARD_DATA: string = \"business/cards/customercarddata\";\n  CARD_ACCOUNT_TRANSACTIONS: string = \"business/cards/accounts/#CARDACCOUNT#/transactions\";\n  CARD_PAYMENT_DATA: string = \"business/cards?targetCardOperationType=CARD_PAYMENT\";\n  SIMULATE_CARD_PAYMENT: string = \"business/cards/payments/simulations\";\n  EXECUTE_CARD_PAYMENT: string = \"business/cards/payments/executions\";\n\n  CARD_ACTIVATION: string = \"business/cards/activation/#CARDNUMBER#/#CARDVALIDITYDATE#/activateCard\";\n\n  GET_SMS_TOKEN: string = \"business/cards/phoneNumber\";\n\n  CUSTOMER_MANAGER: string = \"business/customers/manager\";\n  MANAGER_CALLBACK_CONFIG: string = \"business/customers/manager/callback/configuration\";\n  MANAGER_CALLBACK_AVAILABLETIME: string = \"business/customers/manager/callback/availabletime\";\n  CUSTOMER_CALLBACK: string = \"business/customers/manager/callback\";\n\n  LOANS_CONSUMER_CALCULATOR: string = \"business/loans/consumer/calculatorV2\";\n  CONSULT_LOAN_ADHESION_GENERAL_DATA: string = \"business/loans/consumer/adhesionGeneralDataV2\";\n  LOAN_ADHESION_SIMULATION: string = \"business/loans/consumer/adhesionSimulationV2\";\n  LOAN_ADHESION_EXECUTION: string = \"business/loans/consumer/adhesionExecutionV2\";\n\n  //contents\n  CONTENT_PRIVATE_CONTENT: string = \"business/content/privateContent/features/#FEATUREID#\";\n  CONTENT_PRIVATE_CONTENT_LANDING_BANNER_DISABLE: string = \"business/content/privateContent/landingPage/banner/disable\";\n\n  SHOWCASE_CARDS: string = \"business/showcase/cards\";\n  SHOWCASE_CHARACTERISTICS: string = \"business/showcase/characteristics?characteristicsId=#CHARACTERISTICSID#\";\n  SHOWCASE_PRODUCT_DOCUMENT: string = \"business/showcase/productdocument?productCode=#PRODUCTCODE#&docType=#DOCTYPE#\";\n  CARD_ADHESION_ACCOUNTS: string = \"business/accounts?targetOperationType=NEW_CARD_REQUEST\";\n  CARD_ADHESION_CONFIGURATIONS: string = \"business/cards/requests/configurations?fullAccountKey=#ACCOUNT#&productCode=#PRODUCTCODE#\";\n  CARD_ADHESION_SIMULATE: string = \"business/cards/requests/simulations\";\n  CARD_ADHESION_INIT: string = \"business/cards/requests/initNewCreditCard\";\n  CARD_ADHESION_EXECUTE: string = \"business/cards/requests/executions\";\n\n  // Update client personal data\n  UPDATE_CLIENT_INFO_VALIDITY: string = \"business/customers/updateClientInformation/validity\";\n  UPDATE_CLIENT_INFO_ADDRESS: string = \"business/customers/updateClientInformation/address\";\n  UPDATE_CLIENT_INFO_PERSONAL: string = \"business/customers/updateClientInformation/personal\";\n  UPDATE_CLIENT_INFO_PROFESSIONAL: string = \"business/customers/updateClientInformation/professional\";\n  UPDATE_CLIENT_MARTIAL_STATUS: string = \"business/customers/updateClientInformation/list/#ID#\";\n  UPDATE_CLIENT_SIMULATION: string = \"business/customers/updateClientInformation/simulation\";\n  UPDATE_CLIENT_EXECUTION: string = \"business/customers/updateClientInformation/execution\";\n\n  //CREDENTIALS_MANAGEMENT\n  GET_CREDENTIALS: string = \"business/credentialsmanagement/credentials/#CREDENTIALTYPE#\";\n\n  // MATRIX CARD\n  MATRIX_CONFIG: string = \"business/credentialsmanagement/matrixrequisition/config\";\n  MATRIX_REQUISITION_SIMULATION: string = \"business/credentialsmanagement/matrixrequisition/simulations\";\n  MATRIX_REQUISITION_EXECUTION: string = \"business/credentialsmanagement/matrixrequisition/executions\";\n  MATRIX_ACTIVE_SIMULATION: string = \"business/credentialsmanagement/matrixactivation/simulations\";\n  MATRIX_ACTIVE_EXECUTION: string = \"business/credentialsmanagement/matrixactivation/executions\";\n\n  // parametros de servicos\n  ACCOUNT_PARAM: string = \"#ACCOUNT#\";\n  FROM_DATE_PARAM: string = \"#FROM_DATE#\";\n  TO_DATE_PARAM: string = \"#TO_DATE#\";\n  CARD_ACCOUNT_PARAM: string = \"#CARDACCOUNT#\";\n  CARD_NUMBER: string = \"#CARDNUMBER#\";\n  CARD_VALIDITY_DATE: string = \"#CARDVALIDITYDATE#\"\n  CHARACTERISTICSID_PARAM: string = \"#CHARACTERISTICSID#\";\n  PRODUCTCODE_PARAM: string = \"#PRODUCTCODE#\";\n  DOCTYPE_PARAM: string = \"#DOCTYPE#\";\n  FEATUREID: string = \"#FEATUREID#\";\n  ID: string = \"#ID#\";\n  CREDENTIAL_PARAM = \"#CREDENTIALTYPE#\";\n\n  constructor(private api: Api) { }\n\n  logout(): Observable<any> {\n    let obs = this.api.deleteLogoutAgentifai(this.LOGOUT_SERVICE, null);\n    this.api.genericClearCookies();\n    return obs;\n  }\n\n  /* obter a listagem de contas para os saldos e movimentos de conta */\n  getBalancesAndTransactionsAccountList(headers: any, onlyDeposit: boolean = false): Observable<any> {\n    if (onlyDeposit == true) {\n      return this.api.genericGetAuthenticatedMethodAgentifai(this.ACCOUNTS_FOR_BALANCES_AND_TRANSACTIONS_DEPOSITSONLY, headers);\n    }\n    else {\n      return this.api.genericGetAuthenticatedMethodAgentifai(this.ACCOUNTS_FOR_BALANCES_AND_TRANSACTIONS, headers);\n    }\n  }\n\n  /* obtem os detalhes de saldo e movimentos da conta no formato label/value standard da app */\n  getDebitAccountBalancesAndMovements(headers: any, sourceAccount: string, minimumDate: string, maximumDate: string): Observable<any> {\n    let url = this.ACCOUNT_BALANCES_AND_TRANSACTIONS.replace(this.ACCOUNT_PARAM, sourceAccount)\n      .replace(this.FROM_DATE_PARAM, minimumDate)\n      .replace(this.TO_DATE_PARAM, maximumDate);\n    return this.api.genericGetAuthenticatedMethodAgentifai(url, headers);\n  }\n\n  /* lista de movimentos de uma conta DO */\n  getTransactions(headers: any, request: any): Observable<any> {\n    let url = this.ACCOUNT_TRANSACTIONS.replace(this.ACCOUNT_PARAM, request.sourceAccount)\n      .replace(this.FROM_DATE_PARAM, request.minimumDate)\n      .replace(this.TO_DATE_PARAM, request.maximumDate);\n\n    if (request.nextPageKeys && request.nextPageKeys != \"\") {\n      url += \"&pageKey=\" + request.nextPageKeys;\n    }\n    return this.api.genericGetAuthenticatedMethodAgentifai(url, headers);\n  }\n\n  /* obtem os detalhes de saldo da conta */\n  getAccountBalance(headers: any, fullAccountKey: string): Observable<any> {\n    let url = this.ACCOUNT_BALANCES.replace(this.ACCOUNT_PARAM, fullAccountKey);\n    return this.api.genericGetAuthenticatedMethodAgentifai(url, headers);\n  }\n\n  //SERVICES PAYMENT\n  /* dados para a pagina de pagamentos */\n  getPaymentsPageData(headers: any, includeFrequentOperationImages: boolean): Observable<any> {\n    var url = this.PAYMENTS_PAGE_DATA_SERVICE;\n\n    if (includeFrequentOperationImages) {\n      url += \"&includeFrequentOperationsImages=true\";\n    }\n\n    return this.api.genericGetAuthenticatedMethodAgentifai(url, headers);\n  }\n\n  /* obter calendario de pagamentos */\n  getCalendarToPayment(headers: any): Observable<any> {\n    return this.api.genericGetAuthenticatedMethodAgentifai(this.PAYMENT_CALENDAR_SERVICE, headers);\n  }\n\n  /* obter nome da entidade */\n  getPaymentsEntity(headers: any, entityNumber: string): Observable<any> {\n    var url = this.GET_ENTITY + \"/\" + entityNumber;\n    return this.api.genericGetAuthenticatedMethodAgentifai(url, headers);\n  }\n\n  /* simular pagamento de servicos */\n  simulateServicePayment(headers: any, request: ServicePaymentRequest): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.SIMULATE_SERVICE_PAYMENT, headers);\n  }\n\n  /* executar pagamento de servicos */\n  executeServicePayment(headers: any, request: ServicePaymentRequest, credential?: Credential): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.EXECUTE_SERVICE_PAYMENT, headers, credential);\n  }\n\n  /* dados para a pagina de pagamento de telecomunicacoes */\n  getTelecomConfigurations(headers: any): Observable<any> {\n    return this.api.genericGetAuthenticatedMethodAgentifai(this.TELECOM_CONFIGURATIONS, headers);\n  }\n\n  /* simular pagamento de telecomunicacoes */\n  simulateTelecomPayment(headers: any, request: TelecommunicationsPaymentRequest): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.SIMULATE_TELECOM_PAYMENT, headers);\n  }\n\n  /* executar pagamento de telecomunicacoes */\n  executeTelecomPayment(headers: any, request: TelecommunicationsPaymentRequest, credential?: Credential): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.EXECUTE_TELECOM_PAYMENT, headers, credential);\n  }\n\n  //OPERATIONS PROOF\n  /* send email to user with document of operation */\n  sendOperationProofByEmail(headers: any, operationId: number, request: OperationProofByEmailRequest): Observable<any> {\n    const url = this.BUSINESS_OPERATIONS + `/${operationId}/` + this.PROOFS_EMAILS;\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, url, headers);\n  }\n\n  getOperationProof(headers: any, operationId: number): Observable<any> {\n    let url = this.BUSINESS_OPERATIONS + `/${operationId}/` + \"proof\";\n    return this.api.genericGetAuthenticatedMethodAgentifai(url, headers);\n  }\n\n  //Frequent Operations\n  getFrequentPaymentDetail(headers: any, operationId: string): Observable<any> {\n    let url = this.GET_FREQUENT_SERVICE_PAYMENT_DETAIL + \"?idFrequentOperation=\" + operationId;\n    return this.api.genericGetAuthenticatedMethodAgentifai(url, headers);\n  }\n\n  getFrequentTelecomPaymentDetail(headers: any, operationId: string): Observable<any> {\n    let url = this.GET_FREQUENT_TELECOM_PAYMENT_DETAIL + \"?idFrequentOperation=\" + operationId;\n    return this.api.genericGetAuthenticatedMethodAgentifai(url, headers);\n  }\n\n  //Contacts\n  getCustomerContacts(headers: any): Observable<any> {\n    return this.api.genericGetAuthenticatedMethodAgentifai(this.CUSTOMER_CONTACTS, headers);\n  }\n\n  /********************************/\n  /******** Transferências ********/\n  /********************************/\n\n  /* dados para a pagina de transferencias */\n  getTransferPageData(headers: any, includeFrequentOperationImages: boolean, account?: string) {\n    let url = this.TRANSFER_PAGE_DATA_SERVICE + \"?transferOperationsFilter=INTERNAL_TRANSFER\";\n    url += \", SEPA_TRANSFER\";\n\n    if (account && account != \"\") {\n      url += \"&fullAccountKey=\" + account;\n    }\n    if (includeFrequentOperationImages) {\n      url += \"&includeFrequentOperationsImages=true\";\n    }\n    return this.api.genericGetAuthenticatedMethodAgentifai(url, headers);\n  }\n\n  /* tipo de transferencia */\n  getTransferType(headers: any, account: string): Observable<any> {\n    return this.api.genericGetAuthenticatedMethodAgentifai(this.TRANSFER_TYPE_SERVICE + account, headers);\n  }\n\n  getCalendarToAllTranfers(headers: any): Observable<any> {\n    return this.api.genericGetAuthenticatedMethodAgentifai(this.ALL_TRANSFERS_CALENDAR_SERVICE, headers);\n  }\n\n  /***** Transferências internas *****/\n\n  /* simular transferencia interna */\n  simulateInternalTransfer(headers: any, request: TransferInternalRequest): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.INTERNAL_TRANSFER_SIMULATION_SERVICE, headers);\n  }\n\n  /* executar transferencia interna */\n  executeInternalTransfer(headers: any, request: TransferInternalRequest, credential?: Credential): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.INTERNAL_TRANSFER_EXECUTION_SERVICE, headers, credential);\n  }\n\n  /* obter dados de uma transferencia frequente interna */\n  getFrequentINTERNALoperation(headers: any, operationId: number): Observable<any> {\n    let url = this.INTERNAL_TRANSFER_FREQUENT_SERVICE + \"?idFrequentOperation=\" + operationId;\n    return this.api.genericGetAuthenticatedMethodAgentifai(url, headers);\n  }\n\n  /***** Transferências SEPA *****/\n  /* validacao do nome do beneficiario nas transferencias SEPA */\n  validateSepaBeneficiaryName(headers: any, beneficiaryName): Observable<any> {\n    var url = this.SEPA_TRANSFER_VALIDATE_BENEFICIARY + beneficiaryName;\n    return this.api.genericGetAuthenticatedMethodAgentifai(url, headers);\n  }\n\n  /* simular transferencia SEPA */\n  simulateSepaTransfer(headers: any, request: TransferSEPARequest): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.SEPA_TRANSFER_SIMULATION_SERVICE, headers);\n  }\n\n  /* executar transferencia SEPA */\n  executeSepaTransfer(headers: any, request: TransferSEPARequest, credential?: Credential): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.SEPA_TRANSFER_EXECUTION_SERVICE, headers, credential);\n  }\n\n  /* obter dados de uma transferencia frequente SEPA */\n  getFrequentSEPAoperation(headers: any, operationId: number): Observable<any> {\n    let url = this.SEPA_TRANSFER_GET_FREQUENT_OPERATION + \"?idFrequentOperation=\" + operationId;\n    return this.api.genericGetAuthenticatedMethodAgentifai(url, headers);\n  }\n\n  /***** Transferências imediatas *****/\n\n  /* simular transferencia imediata - para contacto */\n  simulateImmediateTransfer(headers: any, request: TransferImmediateRequest): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.IMMEDIATE_TRANSFER_SIMULATION_SERVICE, headers);\n  }\n\n  /* executar transferencia imediata - para contacto */\n  executeImmediateTransfer(headers: any, request: TransferImmediateRequest, credential?: Credential): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.IMMEDIATE_TRANSFER_EXECUTION_SERVICE, headers, credential);\n  }\n\n  /* obter a lista de contas elegíveis para uma transferencia imediata */\n  getAccountsForImmediateTransfers(headers: any): Observable<any> {\n    return this.api.genericGetAuthenticatedMethodAgentifai(this.ACCOUNTS_FOR_IMMEDIATE_TRANSFER_REGISTRATION, headers);\n  }\n\n  /* obter a lista de numeros disponíveis para uma transferencia imediata */\n  getPhoneNumbersForImmediateTransfers(headers: any): Observable<any> {\n    return this.api.genericGetAuthenticatedMethodAgentifai(this.PHONE_NUMBERS_FOR_IMMEDIATE_TRANSFER_REGISTRATION, headers);\n  }\n\n  getMbwayPartnerClientStatus(headers: any): Observable<any> {\n    return this.api.genericGetAuthenticatedMethodAgentifai(this.MBWAY_PARTNER_CLIENT_STATUS, headers);\n  }\n\n  /* Obtém lista de cartões possíveis para associar para uma dada conta */\n  getCardsForMbwayAssociation(headers: any, fullAccountKey: string): Observable<any> {\n    let url = this.MBWAY_PARTNER_CARDS_LIST;\n    url += '?onlyCardsWithoutMBWAY=true&fullAccountKey=' + fullAccountKey;\n    return this.api.genericGetAuthenticatedMethodAgentifai(url, headers);\n  }\n\n  simulateAdhesionMbway(headers: any, request: MBWayPartnerRequest): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.WITHDRAWAL_SIMULATE_ADHESION_MBWAY, headers);\n  }\n\n  executeAdhesionMbway(headers: any, request: MBWayPartnerRequest, credential?: Credential): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.WITHDRAWAL_EXECUTE_ADHESION_MBWAY, headers, credential);\n  }\n\n  /* Após concluída a adesão deve ser perguntado ao cliente se pretende receber sempre as transferências MBWay na conta da Caixa\n      este serviço serve para registar a resposta do cliente */\n  acceptTransferCGD(headers: any, request: MBWayPartnerAcceptTransferCGDAccountRequest): Observable<any> {\n    return this.api.genericPutAuthenticatedMethodWithInputAgentifai(request, this.MBWAY_ACCEPT_TRANSFERS_CGD, headers);\n  }\n\n  /***** Termos e condições *****/\n  getVoiceTreatmentConsent(headers: any): Observable<any> {\n    return this.api.genericGetAuthenticatedMethodAgentifai(this.VOICE_TREATMENT_CONSENT, headers);\n  }\n\n  addVoiceTreatmentConsent(headers: any, request: VoiceTreatmentConsentRequest): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.VOICE_TREATMENT_CONSENT, headers);\n  }\n\n  deleteVoiceTreatmentConsent(headers: any): Observable<any> {\n    return this.api.genericDeleteAuthenticatedMethodAgentifai(this.VOICE_TREATMENT_CONSENT, headers);\n  }\n\n  /***** Desbloqueio de Contrato *****/\n\n  /* obter questões para desbloquear contrato */\n  getCredentialUnlockQuestions(headers: any, request: CredentialUnlockQuestionsRequest): Observable<any> {\n    let url = this.CREDENTIAL_UNLOCK_QUESTIONS\n      + \"?contractNumber=\" + request.contractNumber\n      + \"&phoneNumber=\" + request.phoneNumber\n\n    return this.api.genericGetMethodAgentifai(url, headers);\n  }\n\n  /* enviar respostas para desbloqueio do contrato */\n  credentialUnlockAnswers(headers: any, request: CredentialUnlockAnswersRequest): Observable<any> {\n    return this.api.genericPostMethodWithInputAgentifai(request, this.CREDENTIAL_UNLOCK_ANSWERS, headers);\n  }\n\n  /***** Obter numero de Contrato *****/\n\n  /* obter questões para obter numero de contrato */\n  getContractNumberQuestions(headers: any, request:GetContractNumberQuestionsRequest): Observable<any> {\n    let url = this.GET_CONTRACT_NUMBER_QUESTIONS\n      + \"?nif=\" + request.nif\n      + \"&phoneNumber=\" + request.phoneNumber\n\n    return this.api.genericGetMethodAgentifai(url, headers);\n  }\n\n  /* enviar respostas para obter numero de contrato */\n  getContractNumberAnswers(headers: any, request: GetContractNumberAnswersRequest): Observable<any> {\n    return this.api.genericPostMethodWithInputAgentifai(request, this.GET_CONTRACT_NUMBER_ANSWERS, headers);\n  }\n\n  /***** Cartões *****/\n\n  getCardsGeneralData(headers: any, cardAccountId?: string, targetCardOperationType?: string, omitTransactionsInResponse?: boolean): Observable<any> {\n    if (!targetCardOperationType) {\n      targetCardOperationType = 'BALANCES_AND_TRANSACTIONS';\n    }\n\n    let url = this.GENERAL_CARD_DATA + \"?targetCardOperationType=\" + targetCardOperationType;\n\n    if (cardAccountId) {\n      url += \"&cardAccountId=\" + cardAccountId + \"&omitAccountsInResponse=true\";\n    }\n\n    if (omitTransactionsInResponse) {\n      url += \"&omitTransactionsInResponse=true\";\n    }\n    return this.api.genericGetAuthenticatedMethodAgentifai(url, headers);\n  }\n\n  getCardStatementTransactions(headers: any, cardAccountId: string, statementDate?: string): Observable<any> {\n    let url = this.CARD_ACCOUNT_TRANSACTIONS.replace(this.CARD_ACCOUNT_PARAM, cardAccountId);\n\n    if (statementDate) {\n      url = url + \"?statementDate=\" + statementDate;\n    }\n\n    return this.api.genericGetAuthenticatedMethodAgentifai(url, headers);\n  }\n\n  getCardsPaymentData(headers: any): Observable<any> {\n    return this.api.genericGetAuthenticatedMethodAgentifai(this.CARD_PAYMENT_DATA, headers);\n  }\n\n  simulateCardPayment(headers: any, request: CardPaymentRequest): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.SIMULATE_CARD_PAYMENT, headers);\n  }\n\n  executeCardPayment(headers: any, request: CardPaymentRequest, credential?: Credential): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.EXECUTE_CARD_PAYMENT, headers, credential);\n  }\n\n  activateCard(headers: any, cardNumber: string, cardValidityDate: string): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodAgentifai(this.CARD_ACTIVATION.replace(this.CARD_NUMBER, cardNumber).replace(this.CARD_VALIDITY_DATE, cardValidityDate), headers);\n  }\n\n  getContactSmsToken(headers: any): Observable<any> {\n    return this.api.genericGetAuthenticatedMethodAgentifai(this.GET_SMS_TOKEN, headers);\n  }\n\n  /***** Callback *****/\n  getCustomerManager(headers: any): Observable<any> {\n    return this.api.genericGetAuthenticatedMethodAgentifai(this.CUSTOMER_MANAGER, headers);\n  }\n\n  getManagerCallbackConfig(headers: any): Observable<any> {\n    return this.api.genericGetAuthenticatedMethodAgentifai(this.MANAGER_CALLBACK_CONFIG, headers);\n  }\n\n  getManagerAvailableTime(headers: any, destinationType: number, date: string): Observable<any> {\n    let url = this.MANAGER_CALLBACK_AVAILABLETIME;\n    url += '?destinationType=' + destinationType.toString();\n    url += '&date=' + date;\n\n    return this.api.genericGetAuthenticatedMethodAgentifai(url, headers);\n  }\n\n  setCallback(headers: any, request: CallbackSolicitationRequest): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.CUSTOMER_CALLBACK, headers);\n  }\n\n  /***** LOANS *****/\n  getConsumerLoanCalculatorResult(headers: any, request: ConsumerLoanAdhesionRequest): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.LOANS_CONSUMER_CALCULATOR, headers);\n  }\n\n  getConsumerLoanAdhesionGeneralData(headers: any): Observable<any> {\n    return this.api.genericGetAuthenticatedMethodAgentifai(this.CONSULT_LOAN_ADHESION_GENERAL_DATA, headers);\n  }\n\n  simulateLoanRequest(headers: any, request: ConsumerLoanAdhesionRequest): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.LOAN_ADHESION_SIMULATION, headers);\n  }\n\n  executeLoanRequest(headers: any, request: ConsumerLoanAdhesionRequest, credential?: Credential): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.LOAN_ADHESION_EXECUTION, headers, credential);\n  }\n\n  getPrivateContent(headers: any, featureId: string): Observable<any>{\n    let url = this.CONTENT_PRIVATE_CONTENT.replace(this.FEATUREID, featureId);\n    return this.api.genericGetAuthenticatedMethodAgentifai(url, headers);\n  }\n\n  disableLandingPageBanner(headers: any, pageName: string): Observable<any> {\n    let url = this.CONTENT_PRIVATE_CONTENT_LANDING_BANNER_DISABLE + \"?pageName=\" + pageName;\n    return this.api.genericPutAuthenticatedMethodAgentifai(url, headers);\n  }\n\n  /***** CARD ACQUISITION *****/\n  getShowcaseCards(headers: any): Observable<any> {\n    return this.api.genericGetAuthenticatedMethodAgentifai(this.SHOWCASE_CARDS, headers);\n  }\n\n  getShowcaseCharacteristics(headers: any, characteristicsId: string): Observable<any> {\n    let url = this.SHOWCASE_CHARACTERISTICS.replace(this.CHARACTERISTICSID_PARAM, characteristicsId);\n    return this.api.genericGetAuthenticatedMethodAgentifai(url, headers);\n  }\n\n  getShowcaseProductDocument(headers: any, productCode: string, docType: string): Observable<any> {\n    let url = this.SHOWCASE_PRODUCT_DOCUMENT.replace(this.PRODUCTCODE_PARAM, productCode).replace(this.DOCTYPE_PARAM, docType);\n    return this.api.genericGetAuthenticatedMethodAgentifai(url, headers);\n  }\n\n  getCardAdhesionAccounts(headers: any): Observable<any> {\n    return this.api.genericGetAuthenticatedMethodAgentifai(this.CARD_ADHESION_ACCOUNTS, headers);\n  }\n\n  getCardAdhesionConfigurations(headers: any, fullAccountKey: string, productCode: string): Observable<any> {\n    let url = this.CARD_ADHESION_CONFIGURATIONS.replace(this.ACCOUNT_PARAM, fullAccountKey).replace(this.PRODUCTCODE_PARAM, productCode);\n    return this.api.genericGetAuthenticatedMethodAgentifai(url, headers);\n  }\n\n  simulateCardAdhesion(headers: any, request: CardRequestRequest): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.CARD_ADHESION_SIMULATE, headers);\n  }\n\n  initNewCreditCard(headers: any, request: CardRequestRequest): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.CARD_ADHESION_INIT, headers);\n  }\n\n  executeCardAdhesion(headers: any, request: CardRequestRequest, credential?: Credential): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.CARD_ADHESION_EXECUTE, headers, credential);\n  }\n\n  /***** UPDATE CLIENT INFO *****/\n  getUpdateClientInfoValidity(headers: any): Observable<any>  {\n    return this.api.genericGetAuthenticatedMethodAgentifai(this.UPDATE_CLIENT_INFO_VALIDITY, headers);\n  }\n\n  getUpdateClientInfoAddress(headers: any): Observable<any>  {\n    return this.api.genericGetAuthenticatedMethodAgentifai(this.UPDATE_CLIENT_INFO_ADDRESS, headers);\n  }\n\n  getUpdateClientInfoIdentification(headers: any): Observable<any> {\n    return this.api.genericGetAuthenticatedMethodAgentifai(this.UPDATE_CLIENT_INFO_PERSONAL, headers);\n  }\n\n  getUpdateClientInfoOccupation(headers: any): Observable<any> {\n    return this.api.genericGetAuthenticatedMethodAgentifai(this.UPDATE_CLIENT_INFO_PROFESSIONAL, headers);\n  }\n\n  /**\n     * \n     * @param id 0/1/2\n     * @returns Estado Civil/Paises/Profissoes\n     */\n  getUpdateClientListField(headers: any, id: string){\n    let url = this.UPDATE_CLIENT_MARTIAL_STATUS.replace(this.ID, id);\n    return this.api.genericGetAuthenticatedMethodAgentifai(url, headers);\n  }\n\n  simulateUpdateClientInfo(headers: any,request: UpdateClientInfoRequest): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.UPDATE_CLIENT_SIMULATION, headers);\n  }\n\n  executeUpdateClientInfo(headers: any, request: UpdateClientInfoRequest, credential?: Credential): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.UPDATE_CLIENT_EXECUTION,headers, credential);\n  }\n\n  /***** CREDENTIALS_MANAGEMENT *****/\n  getCredentials(headers: any, credentialType: string): Observable<any> {\n    var url = this.GET_CREDENTIALS.replace(this.CREDENTIAL_PARAM, credentialType);\n    return this.api.genericGetAuthenticatedMethodAgentifai(url, headers);\n  }\n\n  /***** MATRIX *****/\n  matrixConfig(headers: any): Observable<any> {\n    return this.api.genericGetAuthenticatedMethodAgentifai(this.MATRIX_CONFIG, headers);\n  }\n\n  simulateMatrixRequisition(headers:any, request: MatrixRequisitionSimExe): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.MATRIX_REQUISITION_SIMULATION, headers);\n  }\n\n  executeMatrixRequisition(headers:any, request: MatrixRequisitionSimExe, credential?: Credential): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.MATRIX_REQUISITION_EXECUTION, headers ,credential);\n  }\n\n  simulateActivateMatrix(headers:any, request: MatrixActivateSimExe): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.MATRIX_ACTIVE_SIMULATION, headers);\n  }\n\n  executeActivateMatrix(headers:any, request: MatrixActivateSimExe, credential?: Credential): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.MATRIX_ACTIVE_EXECUTION, headers, credential);\n  }\n\n}\n","import { Observable, throwError } from \"rxjs\";\nimport { catchError, map } from \"rxjs/operators\";\nimport { AgentifaiRequest } from \"src/app/agentifai/models/agentifai-request\";\nimport { WidgetResponse } from \"src/app/agentifai/models/agentifai-widget-response\";\nimport { Anonymization } from \"src/app/agentifai/utils/anonymization-utils\";\nimport { MatrixRequisitionSimExe } from \"src/app/models/cardMatrix/MatrixRequisitionSimExe\";\nimport { AgentifaiRequestFactoryService } from \"src/app/services/agentifai/agentifai-request-factory.service\";\nimport { AgentifaiResponseFactoryService } from \"src/app/services/agentifai/agentifai-response-factory.service\";\nimport { AgentifaiServicesProvider } from \"src/app/services/agentifai/agentifai-services.service\";\nimport { AgentifaiCommand } from \"../../commom/agentifai-command\";\nimport { Credential } from 'src/app/models/operation/Credential';\nimport { CredentialsManagementUtils } from \"../credentials-management-utils\";\n\nexport class ExecuteMatrixRequisition implements AgentifaiCommand<WidgetResponse> {\n    \n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        'headers.+',\n        'status',\n        `body\\.(operationId|operationStatus|customerMessage|${Anonymization.scheduling()})`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private requestFactory: AgentifaiRequestFactoryService\n    ) { }   \n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters = this.request.getParameters()\n        const request = this.createRequest(parameters)\n        const credential = this.createCredentials(parameters)\n        \n        return service.executeMatrixRequisition(headers,request,credential)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createRequest(parameters: any): MatrixRequisitionSimExe {\n        return CredentialsManagementUtils.createMatrixRequisitionSimExe(parameters, this.requestFactory)\n    }\n\n    private createCredentials(parameters: any): Credential {\n        return this.requestFactory.createCredentials(parameters)\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetUpdateClientInformationProfessional implements AgentifaiCommand<WidgetResponse> {\n\n  private nonAnonymizableRegexPathsSuccess: string[] = [\n      'headers.+',\n      'status',\n      String.raw `^body\\.(expirado|trabalharPorContaDoutrem|empregadoCgd|tipoDependencia)$`\n  ]\n\n  private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n  constructor(\n      private request: AgentifaiRequest,\n      private responseFactory: AgentifaiResponseFactoryService\n  ) {}\n  \n  execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n      const headers = this.request.getHeaders()\n\n      return service.getUpdateClientInfoOccupation(headers)\n          .pipe(\n              map(resp => this.createSuccessResponse(resp)),\n              catchError(error => this.createErrorResponse(error))\n          )\n  }\n\n  private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: string[]): WidgetResponse {\n      return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n  }\n\n  private createSuccessResponse(response: any): WidgetResponse {\n      return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n  }\n\n  private createErrorResponse(errorResponse: any) {\n      return throwError(\n          this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n      )\n  }\n\n}","import { Injectable } from '@angular/core';\nimport { ResponseEvent } from 'src/app/agentifai/models/agentifai-response-event';\nimport { AgentifaiUtils } from 'src/app/agentifai/utils/agentifai-utils';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AgentifaiResponseFactoryService {\n\n  createResponseFromRestApi(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n    const event = success ? this.createResponseEventFromRestApi(response) : this.createErrorResponseEventFromRestApi(response);\n    return new WidgetResponse(event, nonAnonymizableRegexesPaths);\n  }\n\n  //Create ResponseEvent Factory\n  private createResponseEventFromRestApi(response: any): ResponseEvent {\n    return this.createResponseEvent(response.headers, response.status, AgentifaiUtils.mapFromString(response.data));\n  }\n\n  private createErrorResponseEventFromRestApi(response: any): ResponseEvent {\n    return this.createResponseEvent(response.headers, response.status, AgentifaiUtils.mapFromString(response.error));\n  }\n\n  private createResponseEvent(headers: JSON, status: number, body: JSON): ResponseEvent {\n    return new ResponseEvent(headers, status, body)\n  }\n\n}\n\n","export class OperationProofByEmailRequest {\n    targetEmail: string;\n    targetCCEmail: string;\n    recipientName: string;\n    honorificTitle: string;\n    emailSubject: string;\n    emailComment: string;\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\n\nimport { map, catchError } from 'rxjs/operators';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiUtils } from 'src/app/agentifai/utils/agentifai-utils'\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { AgentifaiAccountsTransformerService } from 'src/app/services/agentifai/agentifai-accounts-transformer.service';\nimport { AccountsUtils } from 'src/app/agentifai/commands/accounts/accounts-utils';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetAccountsCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexesPathsuccess: String[] = [\n        \"headers.+\",\n        \"status\",\n        \"body\\.(\"\n        + `defaultAccount\\.(${AccountsUtils.nonAnonymizedAccountsProperties})`\n        + `|accounts\\.[^.]+\\.(${AccountsUtils.nonAnonymizedAccountsProperties})`\n        + \")(?:$|\\W)\"\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private transformer: AgentifaiAccountsTransformerService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n\n        return service.getBalancesAndTransactionsAccountList(headers, false)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        var transformedResponse = this.transformResponse(response);\n        return this.createResponse(transformedResponse, true, this.nonAnonymizableRegexesPathsuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n    private transformResponse(response: any): any {\n        const data = AgentifaiUtils.mapFromString(response.data);\n\n        if (data.defaultAccount != null && data.accounts != null) {\n            data.accounts = this.transformer.transformAccounts(data.accounts);\n            data.defaultAccount = this.transformer.transformAccount(data.defaultAccount);\n\n            response.data = data;\n        }\n\n        return response;\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { TransferInternalRequest } from 'src/app/models/operation/request/transfers/TransferInternalRequest';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiRequestFactoryService } from 'src/app/services/agentifai/agentifai-request-factory.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\n\nexport class SimulateInternalTransferCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexesPathsSuccess: String[] = [\n        \"headers.+\",\n        \"status\",\n        `body\\.(operationId|operationStatus|charges[.].*|${Anonymization.scheduling()})`\n    ]\n\n    private nonAnonymizableRegexesPathsError: String[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private requestFactory: AgentifaiRequestFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters: any = this.request.getParameters()\n        const request = this.createRequest(parameters);\n\n        return service.simulateInternalTransfer(headers, request)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(resp => this.createErrorResponse(resp))\n            );\n    }\n\n    private createRequest(parameters: any): TransferInternalRequest {\n        const request = new TransferInternalRequest();\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation;\n        request.sourceAccount = parameters.sourceAccount;\n        request.destinationAccount = parameters.destinationAccount;\n        request.amount = parameters.amount;\n        request.currency = parameters.currency;\n        request.descriptionForSourceAccount = parameters.descriptionForSourceAccount;\n        request.descriptionForDestinationAccount = parameters.descriptionForDestinationAccount;\n        request.scheduling = this.requestFactory.createScheduling(parameters);\n\n        return request;\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexesPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizableRegexesPathsError)\n        )\n    }\n\n}","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AgentifaiAccountsTransformerService {\n\n  transformAccount(account: any): any {\n    return this.transform(account);\n  }\n\n  transformAccounts(accounts: [any]): [any] {\n    var accounts = accounts;\n\n    accounts.forEach(account => {\n      account = this.transform(account);\n    });\n\n    return accounts;\n  }\n\n  private transform(account: any): any {\n    return this.addNewAccountProperties(\n      account\n    );\n  }\n\n  private addNewAccountProperties(account: any): any {\n    account.accountName = account.description != null ? account.description.split(\" - \").reverse()[0] : null;\n    return account;\n  }\n\n}","import { AgentifaiResponseFactoryService } from \"src/app/services/agentifai/agentifai-response-factory.service\";\nimport { AgentifaiServicesProvider } from \"src/app/services/agentifai/agentifai-services.service\";\nimport { AgentifaiRequest } from \"../../models/agentifai-request\";\nimport { WidgetResponse } from \"../../models/agentifai-widget-response\";\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { Anonymization } from \"../../utils/anonymization-utils\";\nimport { AgentifaiCommand } from \"../commom/agentifai-command\";\n\nexport class GetCredentialsManagement implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        'headers.+',\n        'status',\n        String.raw `body\\.credentials\\.[^.]+\\.status`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const credentialType = this.request.getParameters().credentialType\n        \n        return service.getCredentials(headers,credentialType)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n    \n}","import { Injectable } from '@angular/core';\nimport { AgentifaiManagerProvider } from 'src/app/services/agentifai/agentifai-manager.service';\nimport { AgentifaiResponse } from 'src/app/agentifai/models/agentifai-response';\nimport { EnvironmentService } from 'src/app/services/environment-service/environment-service.service';\nimport { OpenAliceIntent } from 'src/app/agentifai/open-alice-intent';\nimport { AgentifaiWidgetDimensions } from 'src/app/agentifai/models/widget-config/agentifai-widget-dimensions';\n\ndeclare let agentifai: any;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AgentifaiPluginControllerService {\n\n  constructor(\n    private agentifaiManager: AgentifaiManagerProvider,\n    private env: EnvironmentService\n  ) { }\n\n  initialize() {\n    if (agentifai) {\n      const config = this.env.getAgentifaiConfiguration();\n      this.initializeWithConfig(config.apiUrl, config.apiKey, config.settings);\n    }\n  }\n\n  initializeWithConfig(apiUrl: string, apiKey: string, settings: any) {\n    if (agentifai) {\n      this.addCallback();\n      agentifai.initialize(apiUrl, apiKey, settings);\n    }\n  }\n\n  stop() {\n    if (agentifai) {\n      agentifai.stop()\n    }\n  }\n\n  setConfigurations(configurations: any) {\n    if (agentifai) {\n      agentifai.setConfigurations(configurations)\n    }\n  }\n\n  showWidget() {\n    if (agentifai) {\n      agentifai.setWidgetVisibility(true);\n    }\n  }\n\n  hideWidget() {\n    if (agentifai) {\n      agentifai.setWidgetVisibility(false);\n    }\n  }\n\n  showApp(intent: OpenAliceIntent = null) {\n    if (agentifai) {\n      agentifai.openApplication(intent);\n    }\n  }\n\n  hideApp() {\n    if (agentifai) {\n      agentifai.closeApplication();\n    }\n  }\n\n  registerUser(id: string, name: string, token: string, authHeaders: any) {\n    if (agentifai) {\n      const user = { \"id\": id, \"name\": name, \"token\": token };\n      agentifai.registerUser(user, authHeaders);\n    }\n  }\n\n  unregisterUser() {\n    if (agentifai) {\n      agentifai.unregisterUser();\n    }\n  }\n\n  addCallback() {\n    if (agentifai) {\n      agentifai.addClientCallback(data => {\n        this.processAgentifaiEvent(data);\n      }, () => {} );\n    }\n  }\n\n  setWidgetDimensions(dimensions: AgentifaiWidgetDimensions) {\n    if (agentifai) {\n      agentifai.setWidgetDimensions(dimensions);\n    }\n  }\n\n  setTheme(theme: string) {\n    if (agentifai) {\n      agentifai.setTheme(theme)\n    }\n  }\n\n  private processAgentifaiEvent(data: JSON) {\n    const eventType = data[\"type\"];\n\n    if (eventType == \"applicationStatus\") {\n      this.processApplicationStatusEvent(data);\n    } else if (eventType == \"request\") {\n      this.executeAgentifaiRequest(data);\n    }\n  }\n\n  private processApplicationStatusEvent(data: JSON) {\n    const isOpened = data[\"isOpened\"];\n    if (isOpened) {\n      this.env.openAlice();\n    } else {\n      this.env.closeAlice();\n    }\n  }\n\n  private executeAgentifaiRequest(data: JSON) {\n    console.log(\"REQUEST:\" + JSON.stringify(data));\n    this.agentifaiManager.executeWidgetRequest(data)\n      .subscribe(resp => {\n        this.sendResponseOfRequest(resp);\n      }, error => {\n        this.sendResponseOfRequest(error);\n      });\n  }\n\n  private sendResponseOfRequest(response: AgentifaiResponse) {\n    console.log(\"RESPONSE: \" + JSON.stringify(response));\n    agentifai.requestResult(response.requestId, response.success, response.result);\n  }\n\n}\n","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiRequestFactoryService } from 'src/app/services/agentifai/agentifai-request-factory.service';\nimport { ConsumerLoanAdhesionRequest } from 'src/app/models/operation/request/loans/ConsumerLoanAdhesionRequest';\nimport { GenericPersonalCreditWorkElement } from 'src/app/models/operation/request/loans/GenericPersonalCreditWorkElement';\n\nexport class SimulatePersonalLoan implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        String.raw`^body\\.(operationId|success|errorMessage|simulationDate|amountMin|amountMax)$`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private requestFactory: AgentifaiRequestFactoryService,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters = this.request.getParameters()\n        const request = this.createRequest(parameters);\n\n        return service.getConsumerLoanCalculatorResult(headers, request)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createRequest(parameters: any): ConsumerLoanAdhesionRequest {\n        const request = new ConsumerLoanAdhesionRequest()\n\n        if (parameters.operationId != null) {\n            request.operationId = parseInt(parameters.operationId)\n        }\n\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation\n        request.scheduling = this.requestFactory.createScheduling(parameters)\n        request.currency = parameters.currency\n        request.targetAmount = parseInt(parameters.targetAmount)\n        request.periodMonths = parseInt(parameters.periodMonths)\n        request.includeDocuments = parameters.includeDocuments\n        request.fullKeyToAccount = parameters.fullKeyToAccount\n\n        if (parameters.profession != null) {\n            const profession = new GenericPersonalCreditWorkElement()\n            profession.cod = parameters.profession.cod\n            profession.description = parameters.profession.description\n            request.profissao = profession\n        }\n\n        if (parameters.jobSector != null) {\n            const jobSector = new GenericPersonalCreditWorkElement()\n            jobSector.cod = parameters.jobSector.cod\n            jobSector.description = parameters.jobSector.description\n            request.sector = jobSector\n        }\n\n        if (parameters.jobType != null) {\n            const jobType = new GenericPersonalCreditWorkElement()\n            jobType.cod = parameters.jobType.cod\n            jobType.description = parameters.jobType.description\n            request.trabalho = jobType\n        }\n\n        if (parameters.contractType != null) {\n            const contractType = new GenericPersonalCreditWorkElement()\n            contractType.cod = parameters.contractType.cod\n            contractType.description = parameters.contractType.description\n            request.contrato = contractType\n        }\n\n        if (parameters.jobServiceTime != null) {\n            request.antiguidade = parseInt(parameters.jobServiceTime)\n        }\n\n        request.codigoIRS = parameters.irsCode\n\n        if (parameters.grossIncome != null) {\n            request.rendimentoBruto = parseInt(parameters.grossIncome)\n        }\n\n        if (parameters.netIncome != null) {\n            request.rendimentoLiquido = parseInt(parameters.netIncome)\n        }\n\n        if (parameters.monthlyExpenses != null) {\n            request.encargosMensais = parseInt(parameters.monthlyExpenses)\n        }\n\n        if (parameters.householdExpenses != null) {\n            request.despesasFamiliares = parseInt(parameters.householdExpenses)\n        }\n\n        if (parameters.householdMembers != null) {\n            request.nrAgregado = parseInt(parameters.householdMembers)\n        }\n\n        request.prestacao = parameters.installment\n\n        request.defaultSimulation = parameters.defaultSimulation\n\n        return request;\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { CardRequestRequest } from 'src/app/models/operation/request/cards/CardRequestRequest';\nimport { AgentifaiRequestFactoryService } from 'src/app/services/agentifai/agentifai-request-factory.service';\n\nexport class SimulateCardAdhesion implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        String.raw`^body\\.(operationId|operationStatus|scheduling|invalidAccountIntervenLei83|safeMessageAdhesion|normalAdherenceErrorMsg)$`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private requestFactory: AgentifaiRequestFactoryService\n    ) {}\n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders();\n        const parameters = this.request.getParameters();\n        const request = this.createRequest(parameters);\n\n        return service.simulateCardAdhesion(headers, request)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createRequest(parameters: any): CardRequestRequest {\n        const request = new CardRequestRequest();\n\n        if (parameters.operationId != null) {\n            request.operationId = parseInt(parameters.operationId)\n        }\n\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation;\n        request.scheduling = this.requestFactory.createScheduling(parameters);\n\n        request.fullAccountKey = parameters.fullAccountKey;\n        request.productCode = parameters.productCode;\n        request.cardPaymentMode = parameters.cardPaymentMode;\n        \n        if (parameters.paymentPercentage != null) {\n            request.paymentPercentage = parseInt(parameters.paymentPercentage)\n        }\n\n        request.paymentFixedValue = parameters.paymentFixedValue;\n        request.nameToPrintOnCard = parameters.nameToPrintOnCard;\n\n        if (parameters.statementEmissionDay != null) {\n            request.statementEmissionDay = parseInt(parameters.statementEmissionDay)\n        }\n\n        request.postalAddress = parameters.postalAddress;\n        request.creditLimit = parameters.creditLimit;\n\n        if (parameters.checkForCredit != null) {\n            request.checkForCredit = this.requestFactory.parseBool(parameters.checkForCredit)\n        }\n\n        if (parameters.onlineAdherence != null) {\n            request.onlineAdherence = this.requestFactory.parseBool(parameters.onlineAdherence)\n        }\n\n        if (parameters.safeMessageAdhesion != null) {\n            request.safeMessageAdhesion = this.requestFactory.parseBool(parameters.safeMessageAdhesion)\n        }\n\n        return request;\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","export class GenericKeyValue{\r\n    key: string = \"\";\r\n    value: string = \"\";\r\n\r\n    constructor(key: string, value: string){\r\n        this.key = key;\r\n        this.value = value;\r\n    }\r\n}","\nexport enum AgentifaiCommandType {\n    GetAccounts = \"GET_ACCOUNTS\",\n    GetAccountBalances = \"GET_ACCOUNT_BALANCES\",\n    GetTransactions = \"GET_TRANSACTIONS\",\n    GetPaymentsEntity = \"GET_PAYMENTS_ENTITY\",\n    GetPaymentsGeneralData = \"GET_PAYMENTS_GENERAL_DATA\",\n    GetFrequentServicePayment = \"GET_FREQUENT_SERVICES_PAYMENT\",\n    SimulateServicePayment = \"SIMULATE_SERVICE_PAYMENT\",\n    ExecuteServicePayment = \"EXECUTE_SERVICE_PAYMENT\",\n    GetTelecommunicationConfigurations = \"GET_TELECOMMUNICATIONS_CONFIGURATIONS\",\n    SimulateTelecommunicationPayment = \"SIMULATE_TELECOMMUNICATIONS_PAYMENT\",\n    ExecuteTelecommunicationPayment = \"EXECUTE_TELECOMMUNICATIONS_PAYMENT\",\n    GetFrequentTelecommunicationPayment = \"GET_FREQUENT_TELECOMMUNICATIONS_PAYMENT\",\n    GetCurrentCustomerContacts = \"GET_CURRENT_CUSTOMER_CONTACTS\",\n    GetOperationProof = \"GET_OPERATION_PROOF\",\n    SendOperationProof = \"SEND_OPERATION_PROOF\",\n    SimulateInternalTransfer = \"SIMULATE_INTERNAL_TRANSFER\",\n    ExecuteInternalTransfer = \"EXECUTE_INTERNAL_TRANSFER\",\n    SimulateSEPATransfer = \"SIMULATE_SEPA_TRANSFER\",\n    ExecuteSEPATransfer = \"EXECUTE_SEPA_TRANSFER\",\n    SimulateImmediateTransfer = \"SIMULATE_IMMEDIATE_TRANSFER\",\n    ExecuteImmediateTransfer = \"EXECUTE_IMMEDIATE_TRANSFER\",\n    GetTransferTypeValidation = \"GET_TRANSFER_TYPE_VALIDATION\",\n    GetClientStatus = \"GET_CLIENT_STATUS\",\n    GetTransferCalendarRestrictions = \"GET_TRANSFER_CALENDAR_RESTRICTIONS\",\n    GetTransfersGeneralData = \"GET_TRANSFERS_GENERAL_DATA\",\n    GetFrequentInternalTransfer = \"GET_FREQUENT_INTERNAL_TRANSFER\",\n    GetFrequentSEPATransfer = \"GET_FREQUENT_SEPA_TRANSFER\",\n    GetCredentialUnlockQuestions = \"GET_CREDENTIAL_UNLOCK_QUESTIONS\",\n    UnlockCredentials = \"UNLOCK_CREDENTIALS\",\n    GetContractNumberUnlockQuestions = \"GET_CONTRACT_NUMBER_UNLOCK_QUESTIONS\",\n    UnlockContractNumber = \"UNLOCK_CONTRACT_NUMBER\",\n    GetTermsAndConditionsConsent = \"GET_TERMS_AND_CONDITIONS_CONSENT\",\n    ConsentTermsAndConditions = \"CONSENT_TERMS_AND_CONDITIONS\",\n    GetMBWayCards = \"GET_MBWAY_CARDS\",\n    GetImmediateTransferPhoneNumbers = \"GET_IMMEDIATE_TRANSFER_PHONE_NUMBERS\",\n    GetImmediateTransferAccounts = \"GET_IMMEDIATE_TRANSFER_ACCOUNTS\",\n    SimulateMBWayAdhesion = \"SIMULATE_MBWAY_ADHESION\",\n    ExecuteMBWayAdhesion = \"EXECUTE_MBWAY_ADHESION\",\n    UpdateTransferConsentForCgdAccount = \"UPDATE_TRANSFER_ACCOUNT_CONSENT\",\n    GetPaymentCards = \"GET_PAYMENT_CARDS\",\n    GetCardsGeneralData = \"GET_CARDS_GENERAL_DATA\",\n    GetCardAccountTransactions = \"GET_CARD_ACCOUNT_TRANSACTIONS\",\n    SimulateCardPayment = \"SIMULATE_CARD_PAYMENT\",\n    ExecuteCardPayment = \"EXECUTE_CARD_PAYMENT\",\n    ActivateCard = \"ACTIVATE_CARD\",\n    GetSmsTokenPhoneNumber = \"GET_SMS_TOKEN_PHONE_NUMBER\",\n    GetCustomerManager = \"GET_CUSTOMER_MANAGER\",\n    GetManagerCallbackConfig = \"GET_MANAGER_CALLBACK_CONFIG\",\n    GetManagerAvailableTime = \"GET_MANAGER_AVAILABLE_TIME\",\n    SetCallback = \"SET_CALLBACK\",\n    SimulatePersonalLoan = \"SIMULATE_PERSONAL_LOAN\",\n    GetPersonalLoanGeneralData = \"GET_PERSONAL_LOAN_GENERAL_DATA\",\n    SimulatePersonalLoanAdhesion = \"SIMULATE_PERSONAL_LOAN_ADHESION\",\n    ExecutePersonalLoanAdhesion = \"EXECUTE_PERSONAL_LOAN_ADHESION\",\n    GetPrivateContent = \"GET_PRIVATE_CONTENT\",\n    DisableBannerPage = \"DISABLE_BANNER_PAGE\",\n    GetShowcaseCards = \"GET_CARDS_SHOWCASE\",\n    GetShowcaseCharacteristics = \"GET_PRODUCT_CHARACTERISTICS\",\n    GetShowcaseProductDocument = \"GET_PRODUCT_DOCUMENT\",\n    GetCardAdhesionAccounts = \"GET_CARD_ADHESION_ACCOUNTS\",\n    GetCardAdhesionConfigurations = \"GET_CARD_ADHESION_CONFIGURATIONS\",\n    SimulateCardAdhesion = \"SIMULATE_CARD_ADHESION\",\n    InitNewCreditCard = \"INIT_NEW_CREDIT_CARD\",\n    ExecuteCardAdhesion = \"EXECUTE_CARD_ADHESION\",\n    GetUpdateClientInformationAddress = \"GET_UPDATE_CLIENT_INFORMATION_ADDRESS\",\n    GetUpdateClientInformationPersonal = \"GET_UPDATE_CLIENT_INFORMATION_PERSONAL\",\n    GetUpdateClientInformationProfessional = \"GET_UPDATE_CLIENT_INFORMATION_PROFESSIONAL\",\n    GetUpdateClientInformationValidity = \"GET_UPDATE_CLIENT_INFORMATION_VALIDITY\",\n    GetUpdateClientInformationList = \"GET_UPDATE_CLIENT_INFORMATION_LIST\",\n    SimulateUpdateClientInformation = \"SIMULATE_UPDATE_CLIENT_INFORMATION\",\n    ExecuteUpdateClientInformation = \"EXECUTE_UPDATE_CLIENT_INFORMATION\",\n    GetCredentialsManagement = \"GET_CREDENTIALS_MANAGEMENT\",\n    GetMatrixConfig = \"GET_MATRIX_CONFIG\",\n    SimulateMatrixRequisition = \"SIMULATE_MATRIX_REQUISITION\",\n    ExecuteMatrixRequisition = \"EXECUTE_MATRIX_REQUISITION\",\n    SimulateActivateMatrix = \"SIMULATE_ACTIVATE_MATRIX\",\n    ExecuteActivateMatrix = \"EXECUTE_ACTIVATE_MATRIX\"\n};","import { GenericOperationRequest } from '../GenericOperationRequest';\r\n\r\nexport class TelecommunicationsPaymentRequest extends GenericOperationRequest {\r\n    sourceAccount: string;\r\n    reference: string;\r\n    amount: string;\r\n    paymentConfigurationCode: number;\r\n    parentPaymentConfigurationCode: number;\r\n    taxPayerNumber: string;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetUpdateClientInformationValidity implements AgentifaiCommand<WidgetResponse> {\n\n  private nonAnonymizableRegexPathsSuccess: string[] = [\n      \"headers.+\",\n      \"status\",\n      \"body.*\"\n  ]\n\n  private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n  constructor(\n      private request: AgentifaiRequest,\n      private responseFactory: AgentifaiResponseFactoryService\n  ) {}\n  \n  execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n      const headers = this.request.getHeaders()\n\n      return service.getUpdateClientInfoValidity(headers)\n          .pipe(\n              map(resp => this.createSuccessResponse(resp)),\n              catchError(error => this.createErrorResponse(error))\n          )\n  }\n\n  private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n      return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n  }\n\n  private createSuccessResponse(response: any): WidgetResponse {\n      return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n  }\n\n  private createErrorResponse(errorResponse: any) {\n      return throwError(\n          this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n      )\n  }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\n\nexport class ActivateCardCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexesPathsSuccess: String[] = [\n        \"headers.+\",\n        \"status\",\n        String.raw `^body\\.(success|failureReason)$`\n    ]\n\n    private nonAnonymizableRegexesPathsError: String[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters: any = this.request.getParameters()\n        const cardNumber = parameters[\"cardNumber\"];\n        const cardValidityDate = parameters[\"cardValidatyDate\"];\n\n        return service.activateCard(headers, cardNumber, cardValidityDate)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(resp => this.createErrorResponse(resp))\n            );\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexesPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizableRegexesPathsError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\n\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetManagerCallbackConfig implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        String.raw`^body\\.(callbackDestinations\\.\\d\\.periods\\.\\d|minDate|maxDate)$`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n\n        return service.getManagerCallbackConfig(headers)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\n\nexport class GetFrequentTelecommunicationPaymentCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        \"body\\.(operationName|operationId|amount|paymentConfigurationCode|parentPaymentConfigurationCode)(?:$|\\W)\"\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const idFrequentOperation = this.request.getParameters()[\"idFrequentOperation\"];\n\n        return service.getFrequentTelecomPaymentDetail(headers, String(idFrequentOperation))\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { Observable, throwError } from \"rxjs\";\nimport { catchError, map } from \"rxjs/operators\";\nimport { AgentifaiRequest } from \"src/app/agentifai/models/agentifai-request\";\nimport { WidgetResponse } from \"src/app/agentifai/models/agentifai-widget-response\";\nimport { Anonymization } from \"src/app/agentifai/utils/anonymization-utils\";\nimport { MatrixActivateSimExe } from \"src/app/models/cardMatrix/MatrixActivateSimExe\";\nimport { AgentifaiRequestFactoryService } from \"src/app/services/agentifai/agentifai-request-factory.service\";\nimport { AgentifaiResponseFactoryService } from \"src/app/services/agentifai/agentifai-response-factory.service\";\nimport { AgentifaiServicesProvider } from \"src/app/services/agentifai/agentifai-services.service\";\nimport { AgentifaiCommand } from \"../../commom/agentifai-command\";\nimport { CredentialsManagementUtils } from \"../credentials-management-utils\";\n\nexport class ExecuteActivateMatrix implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        'headers.+',\n        'status',\n        `body\\.(operationId|operationStatus|customerMessage|${Anonymization.scheduling()})`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private requestFactory: AgentifaiRequestFactoryService\n    ) { }  \n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters = this.request.getParameters()\n        const request = this.createRequest(parameters)\n        const credential = this.createCredentials(parameters)\n\n        return service.executeActivateMatrix(headers, request, credential)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createRequest(parameters: any): MatrixActivateSimExe {\n        return CredentialsManagementUtils.createMatrixActivateSimExe(parameters, this.requestFactory)\n    }\n    \n    private createCredentials(parameters: any) {\n        return this.requestFactory.createCredentials(parameters)\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetShowcaseCharacteristics implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        String.raw`^body\\.productCharacteristicsList\\.[0-9]+\\.(title|description)$`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) {}\n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders();\n        const characteristicsId = this.request.getParameters().characteristicsId;\n\n        return service.getShowcaseCharacteristics(headers, characteristicsId)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { Component } from '@angular/core';\nimport { Platform } from '@ionic/angular';\nimport { AgentifaiPluginControllerService } from 'src/app/services/agentifai/agentifai-plugin-controller.service';\nimport { Api } from 'src/app/services/api/api.service';\nimport { StorageService } from 'src/app/services/storage/storage.service';\nimport { AssistantUtilsService } from 'src/app/services/assistant-utils/assistant-utils.service';\nimport { InternalUtils } from 'src/app/internal/internal-utils';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.scss'],\n})\nexport class AppComponent {\n  constructor(\n    platform: Platform,\n    private api: Api,\n    private agentifaiController: AgentifaiPluginControllerService,\n    private storage: StorageService,\n    private assistantUtils: AssistantUtilsService\n  ) {\n    platform.ready().then(() => {\n      this.initializeAssistant()\n      this.setConfigurations();\n    });\n  }\n\n  private setConfigurations() {\n    let headers = this.api.getHeadersAlice();\n    let headersKeysMapping = this.api.HEADERS_KEYS_MAPPING_ALICE;\n    let endpoints = InternalUtils.getEndpointsWhitelist();\n    var endpointUrl = InternalUtils.endpoints[0].baseUrl;\n\n    this.storage.getbaseUrl().then(result => {\n      if (result != null) endpointUrl = result.baseUrl\n      this.agentifaiController.setConfigurations({ url: endpointUrl, headers: headers, headersKeysMapping: headersKeysMapping, endpoints: endpoints });\n    }, error => {\n      this.agentifaiController.setConfigurations({ url: endpointUrl, headers: headers, headersKeysMapping: headersKeysMapping, endpoints: endpoints });\n    });\n  }\n\n  private initializeAssistant() {\n    this.assistantUtils.getConfig()\n      .then( config => {\n        this.agentifaiController.initializeWithConfig(config[0], config[1], config[2])\n      })\n  }\n\n}\n","import { GenericKeyValue } from \"../../GenericKeyValue\";\nimport { GenericOperationRequest } from \"../../operation/request/GenericOperationRequest\";\n\nexport class UpdateClientInfoRequest extends GenericOperationRequest {\n\n    attachments: UpdateClientAttachment[] = [];\n    personal: UpdateClientPersonal = null;\n    professional: UpdateClientProfessional = null;\n    address: UpdateClientAddress = null;\n    political: UpdateClientPolitical = null;\n    finalityQAList: GenericKeyValue[];\n\n    constructor() {\n        super();\n    }\n}\n\n\nexport class UpdateClientAttachment {\n    name: string;\n    document: any;\n    extension: string;\n\n    constructor() {\n    }\n}\n\nexport class UpdateClientAddress {\n    moradaResidencia: string;\n    localidade: string;\n    codigoPostal: string;\n    pais: string;\n    moradaFiscalResidencia: string;\n    localidadeFiscal: string;\n    codigoPostalFiscal: string;\n    paisFiscal: string;\n    contribuinteFiscalEstrangeiro: string;\n    fiscal: boolean;\n\n    constructor() {\n\n    }\n\n}\nexport class UpdateClientPersonal {\n    nomeCompleto: string;\n    nrDoc: string;\n    nrDocFiscal: string;\n    estadoCivil: string;\n    naturalidade: string;\n    paisEstrangeiro: string;\n    nifEstrangeiro: string;\n    validade: Date;\n    paisNaturalidade: string;\n    distrito: string;\n    concelho: string;\n\n    constructor() {\n    }\n}\nexport class UpdateClientProfessional {\n    profissao: string;\n    trabalharPorContaDoutrem: boolean;\n    entidadePatronal: string;\n    cirs: string;\n    tipoDependencia: string;\n    tipoCliente: string;\n    dataInicioAtividade: Date;\n    caeData: Date;\n    cae: string;\n    situacaoSocioProfissional: string;\n    codigoProfissao: string;\n    interveniente: string;\n\n    constructor() {\n\n    }\n}\n\nexport class UpdateClientPolitical {\n\n    pep: boolean;\n    pepCargo: string;\n    pepEntidade: string;\n    autodecRca: boolean;\n    autoDecTocpp: boolean;\n    tocppCargo: string;\n    tocppEntidade: string;\n\n    constructor() {\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { TransferInternalRequest } from 'src/app/models/operation/request/transfers/TransferInternalRequest';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiRequestFactoryService } from 'src/app/services/agentifai/agentifai-request-factory.service';\nimport { Credential } from 'src/app/models/operation/Credential';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\n\nexport class ExecuteInternalTransferCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexesPathsSuccess: String[] = [\n        \"headers.+\",\n        \"status\",\n        `body\\.(operationId|operationStatus|charges[.].*|${Anonymization.scheduling()})`\n    ]\n\n    private nonAnonymizableRegexesPathsError: String[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private requestFactory: AgentifaiRequestFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters = this.request.getParameters()\n        const request = this.createRequest(parameters);\n        const credential = this.createCredentials(parameters);\n\n        return service.executeInternalTransfer(headers, request, credential)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(resp => this.createErrorResponse(resp))\n            );\n    }\n\n    private createRequest(parameters: any): TransferInternalRequest {\n        const request = new TransferInternalRequest();\n        request.operationId = parameters.operationId;\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation;\n        request.sourceAccount = parameters.sourceAccount;\n        request.destinationAccount = parameters.destinationAccount;\n        request.amount = parameters.amount;\n        request.currency = parameters.currency;\n        request.descriptionForSourceAccount = parameters.descriptionForSourceAccount;\n        request.descriptionForDestinationAccount = parameters.descriptionForDestinationAccount;\n        request.scheduling = this.requestFactory.createScheduling(parameters);\n\n        return request;\n    }\n\n    private createCredentials(parameters: any): Credential {\n        return this.requestFactory.createCredentials(parameters);\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexesPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizableRegexesPathsError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { CardsUtils } from 'src/app/agentifai/commands/cards/cards-utils';\nimport { AgentifaiUtils } from 'src/app/agentifai/utils/agentifai-utils'\nimport { AgentifaiCardsTransformerService } from 'src/app/services/agentifai/agentifai-cards-transformer.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\n\n\nexport class GetCardAccountTransactions implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        `body\\.(`\n            + `cards\\.[^.]+\\.(${CardsUtils.nonAnonymizedCardProperties})`\n            + `|`\n            + `cardAccountTransactions.transactions.[^.]+.(${CardsUtils.nonAnonymizedCardTransactionProperties})`\n            + `)`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private transformer: AgentifaiCardsTransformerService\n    ) {}\n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters = this.request.getParameters()\n        const cardAccountId = parameters[\"cardAccountId\"];\n        const statementDate = parameters[\"statementDate\"];\n\n        return service.getCardStatementTransactions(headers, cardAccountId, statementDate)\n            .pipe(\n                map( resp => this.createSuccessResponse(resp) ),\n                catchError( error => this.createErrorResponse(error) )\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        var transformedResponse = this.transformResponse(response);\n        return this.createResponse(transformedResponse, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n    private transformResponse(response: any): any {\n        var data = AgentifaiUtils.mapFromString(response.data);\n        var cards = data.cards;\n\n        if (cards != null) {\n            cards = this.transformer.addNewCardProperties(cards);\n            data.cards = cards;\n        }\n\n        response.data = data;\n\n        return response;\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\n\nexport class GetTransactions implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexesPathsuccess: String[] = [\n        \"headers.+\",\n        \"status\"\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(private request: AgentifaiRequest, private responseFactory: AgentifaiResponseFactoryService) {\n    }\n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters = this.request.getParameters()\n        const transactionsRequest = this.createTransactionRequest(parameters);\n\n        return service.getTransactions(headers, transactionsRequest)\n            .pipe(\n                map( resp => this.createSuccessResponse(resp) ),\n                catchError( error => this.createErrorResponse(error) )\n            )\n    }\n\n    private createTransactionRequest(parameteres): any {\n        var transactionsRequest: any = {};\n        transactionsRequest.sourceAccount = parameteres.fullAccountKey;\n        transactionsRequest.minimumDate = parameteres.fromBookDate;\n        transactionsRequest.maximumDate = parameteres.toBookDate;\n        transactionsRequest.nextPageKeys = parameteres.pageKey;\n        return transactionsRequest;\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexesPathsuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { CardsUtils } from 'src/app/agentifai/commands/cards/cards-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetClientStatus implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        `body\\.(cards\\.[^.]+\\.(${CardsUtils.nonAnonymizedCardProperties})|clientMBWay)`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n\n        return service.getMbwayPartnerClientStatus(headers)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { GetContractNumberAnswersRequest } from 'src/app/models/operation/request/customers/GetContractNumberAnswersRequest';\n\nexport class UnlockContractNumber implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexesPathsSuccess: String[] = [\n        \"headers.+\",\n        \"status\",\n        \"body\\.result\"\n    ]\n\n    private nonAnonymizableRegexesPathsError: String[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters: any = this.request.getParameters()\n        const request = this.createRequest(parameters);\n\n        return service.getContractNumberAnswers(headers, request)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(resp => this.createErrorResponse(resp))\n            );\n    }\n\n    private createRequest(parameters: any): GetContractNumberAnswersRequest {\n        const request = new GetContractNumberAnswersRequest();\n        request.respostasUser = parameters.answers;\n        request.nif = parameters.nif;\n        return request;\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexesPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizableRegexesPathsError)\n        )\n    }\n\n}","export default \"<ion-app>\\n  <ion-router-outlet></ion-router-outlet>\\n</ion-app>\\n\";","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiRequestFactoryService } from 'src/app/services/agentifai/agentifai-request-factory.service';\nimport { TransferSEPARequest } from 'src/app/models/operation/request/transfers/TransferSEPARequest';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\n\nexport class SimulateSEPATransferCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexesPathsSuccess: String[] = [\n        \"headers.+\",\n        \"status\",\n        `body\\.(operationId|operationStatus|charges[.].*|${Anonymization.scheduling()})`\n    ]\n\n    private nonAnonymizableRegexesPathsError: String[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private requestFactory: AgentifaiRequestFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters: any = this.request.getParameters()\n        const request = this.createRequest(parameters);\n\n        return service.simulateSepaTransfer(headers, request)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(resp => this.createErrorResponse(resp))\n            );\n    }\n\n    private createRequest(parameters: any): TransferSEPARequest {\n        const request = new TransferSEPARequest();\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation;\n        request.sourceAccount = parameters.sourceAccount;\n        request.destinationAccount = parameters.destinationAccount;\n        request.amount = parameters.amount;\n        request.currency = parameters.currency;\n        request.description = parameters.description;\n        request.destinationName = parameters.destinationName;\n        request.urgent = parameters.urgent;\n        request.scheduling = this.requestFactory.createScheduling(parameters);\n\n        return request;\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexesPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizableRegexesPathsError)\n        )\n    }\n\n}","import { GenericOperationRequest } from 'src/app/models/operation/request/GenericOperationRequest'\n\nexport class MBWayPartnerRequest extends GenericOperationRequest {\n  amount: string;\n  serviceId: string;\n  referenceId: number;\n  phoneNumber: string;\n  cardNumberMasked: string;\n  acceptedTransferCGD:boolean = true;\n}","\nexport class Anonymization {\n\n    static NonAnonymizablePathRegexDefault: string[] = [\n        \"headers.+\",\n        \"status\",\n        \"body.*\"\n    ]\n\n    static scheduling() {\n        return \"scheduling\\.*\"\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiRequestFactoryService } from 'src/app/services/agentifai/agentifai-request-factory.service';\nimport { Credential } from 'src/app/models/operation/Credential';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { TelecommunicationsPaymentRequest } from 'src/app/models/operation/request/payments/TelecommunicationsPaymentRequest';\n\nexport class ExecuteTelecommunicationPaymentCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexesPathsSuccess: String[] = [\n        \"headers.+\",\n        \"status\",\n        `body\\.(operationId|operationStatus|${Anonymization.scheduling()})`\n    ]\n\n    private nonAnonymizableRegexesPathsError: String[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private requestFactory: AgentifaiRequestFactoryService,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters = this.request.getParameters()\n        const request = this.createRequest(parameters);\n        const credential = this.createCredentials(parameters);\n\n        return service.executeTelecomPayment(headers, request, credential)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(resp => this.createErrorResponse(resp))\n            );\n    }\n\n    private createRequest(parameters: any): TelecommunicationsPaymentRequest {\n        const request = new TelecommunicationsPaymentRequest();\n        request.operationId = parameters.operationId;\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation;\n        request.scheduling = this.requestFactory.createScheduling(parameters);\n        request.sourceAccount = parameters.sourceAccount;\n        request.reference = parameters.reference;\n        request.amount = parameters.amount;\n        request.paymentConfigurationCode = parseInt(parameters.paymentConfigurationCode);\n        request.parentPaymentConfigurationCode = parseInt(parameters.parentPaymentConfigurationCode);\n        request.taxPayerNumber = parameters.taxPayerNumber;\n\n        return request;\n    }\n\n    private createCredentials(parameters: any): Credential {\n        return this.requestFactory.createCredentials(parameters);\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexesPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizableRegexesPathsError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetCardAdhesionConfigurations implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        String.raw`^body\\.(paymentPercentages\\.[^.]+|statementEmissionDays\\.[^.]+|showCheckForCredit|onlineAdherence|creditLimitIncrementValue|minProductCreditLimit|maxProductCreditLimit)$`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) {}\n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders();\n        const parameters = this.request.getParameters();\n        const fullAccountKey = parameters.fullAccountKey;\n        const productCode = parameters.productCode;\n\n        return service.getCardAdhesionConfigurations(headers, fullAccountKey, productCode)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { RouteReuseStrategy } from '@angular/router';\n\nimport { IonicModule, IonicRouteStrategy } from '@ionic/angular';\n\nimport { AppComponent } from './app.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { HTTP } from '@ionic-native/http/ngx';\nimport { IonicStorageModule } from '@ionic/storage';\n\n@NgModule({\n  declarations: [AppComponent],\n  entryComponents: [],\n  imports: [BrowserModule, IonicModule.forRoot(), IonicStorageModule.forRoot(), AppRoutingModule],\n  providers: [\n    { provide: RouteReuseStrategy, useClass: IonicRouteStrategy },\n    HTTP\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule { }\n","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetTransferCalendarRestrictions implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizablePathRegex: String[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n\n        return service.getCalendarToAllTranfers(headers)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizablePathRegex)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegex)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\n\nexport class GetFrequentInternalTransfer implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        \"body\\.(operationName|operationId|amount)(?:$|\\W)\"\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const idFrequentOperation = Number(this.request.getParameters()[\"idFrequentOperation\"]);\n\n        return service.getFrequentINTERNALoperation(headers, idFrequentOperation)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiRequestFactoryService } from 'src/app/services/agentifai/agentifai-request-factory.service';\nimport { Credential } from 'src/app/models/operation/Credential';\nimport { CardRequestRequest } from 'src/app/models/operation/request/cards/CardRequestRequest';\n\nexport class ExecuteCardAdhesion implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        String.raw`^body\\.(operationId|operationStatus|scheduling|invalidAccountIntervenLei83|safeMessageAdhesion|normalAdherenceErrorMsg)$`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private requestFactory: AgentifaiRequestFactoryService\n    ) {}\n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders();\n        const parameters = this.request.getParameters();\n        const request = this.createRequest(parameters);\n        const credential = this.createCredentials(parameters);\n\n        return service.executeCardAdhesion(headers, request, credential)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createRequest(parameters: any): CardRequestRequest {\n        const request = new CardRequestRequest();\n\n        if (parameters.operationId != null) {\n            request.operationId = parseInt(parameters.operationId)\n        }\n\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation;\n        request.scheduling = this.requestFactory.createScheduling(parameters);\n\n        request.fullAccountKey = parameters.fullAccountKey;\n        request.productCode = parameters.productCode;\n        request.cardPaymentMode = parameters.cardPaymentMode;\n\n        if (parameters.paymentPercentage != null) {\n            request.paymentPercentage = parseInt(parameters.paymentPercentage)\n        }\n\n        request.paymentFixedValue = parameters.paymentFixedValue;\n        request.nameToPrintOnCard = parameters.nameToPrintOnCard;\n\n        if (parameters.statementEmissionDay != null) {\n            request.statementEmissionDay = parseInt(parameters.statementEmissionDay)\n        }\n\n        request.postalAddress = parameters.postalAddress;\n        request.creditLimit = parameters.creditLimit;\n\n        if (parameters.checkForCredit != null) {\n            request.checkForCredit = this.requestFactory.parseBool(parameters.checkForCredit)\n        }\n\n        if (parameters.onlineAdherence != null) {\n            request.onlineAdherence = this.requestFactory.parseBool(parameters.onlineAdherence)\n        }\n\n        if (parameters.safeMessageAdhesion != null) {\n            request.safeMessageAdhesion = this.requestFactory.parseBool(parameters.safeMessageAdhesion)\n        }\n\n        return request;\n    }\n\n    private createCredentials(parameters: any): Credential {\n        return this.requestFactory.createCredentials(parameters);\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\n\nexport class GetPaymentsEntityCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\"\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const entityNumber = this.request.getParameters()[\"entityNumber\"];\n\n        return service.getPaymentsEntity(headers, entityNumber)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}\n","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { AccountsUtils } from 'src/app/agentifai/commands/accounts/accounts-utils';\nimport { AgentifaiAccountsTransformerService } from 'src/app/services/agentifai/agentifai-accounts-transformer.service';\nimport { AgentifaiUtils } from 'src/app/agentifai/utils/agentifai-utils'\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetPaymentsGeneralData implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        \"body\\.(\"\n        + \"frequentOperations\\.[^.]+\\.\"\n        + \"(operationName|operationType|operationId|amount)\"\n        + \"|accounts\\.[^.]+\\.\"\n        + `(${AccountsUtils.nonAnonymizedAccountsProperties})`\n        + \")(?:$|\\W)\"\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private accountsTransformer: AgentifaiAccountsTransformerService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n\n        return service.getPaymentsPageData(headers, false)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        var transformedResponse = this.transformResponse(response);\n        return this.createResponse(transformedResponse, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n    private transformResponse(response: any): any {\n        const data = AgentifaiUtils.mapFromString(response.data);\n\n        if (data.accounts != null) {\n            data.accounts = this.accountsTransformer.transformAccounts(data.accounts);\n            response.data = data;\n        }\n\n        return response;\n    }\n}","import { GenericOperationRequest } from '../GenericOperationRequest';\n\nexport class VoiceTreatmentConsentRequest extends GenericOperationRequest {\n    constructor() {\n        super();\n    }\n}","import{ GenericOperationRequest } from \"../operation/request/GenericOperationRequest\";\r\nimport{ GenericKeyValue } from \"../GenericKeyValue\";\r\n\r\nexport class MatrixRequisitionSimExe extends GenericOperationRequest{\r\n    adressSequenceNumber: number;\r\n    motive: GenericKeyValue;\r\n    constructor(){\r\n        super();\r\n        this.adressSequenceNumber = null;\r\n        this.motive = null;\r\n    }\r\n}","import { GenericOperationRequest } from '../GenericOperationRequest';\n\nexport class CardRequestRequest extends GenericOperationRequest {\n    fullAccountKey: string;\n    productCode: string;\n    cardPaymentMode: string;\t//PERCENTAGE* ou FIXED_VALUE\n    paymentPercentage: number;\n    paymentFixedValue: string; //0\n    nameToPrintOnCard: string;\n    statementEmissionDay: number;\n    postalAddress: string;\n    checkForCredit: boolean;\n    creditLimit: string;\n    onlineAdherence: boolean;\n    safeMessageAdhesion: boolean;\n\n    constructor() {\n        super();\n    }\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Credential } from 'src/app/models/operation/Credential';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiRequestFactoryService } from'src/app/services/agentifai/agentifai-request-factory.service';\nimport { ConsumerLoanAdhesionRequest } from 'src/app/models/operation/request/loans/ConsumerLoanAdhesionRequest';\nimport { GenericPersonalCreditWorkElement } from 'src/app/models/operation/request/loans/GenericPersonalCreditWorkElement';\n\nexport class ExecutePersonalLoanAdhesion implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        String.raw `^body\\.(operationId|operationStatus)$`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private requestFactory: AgentifaiRequestFactoryService,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) {}\n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters = this.request.getParameters()\n        const request = this.createRequest(parameters)\n        const credential = this.createCredentials(parameters);\n\n        return service.executeLoanRequest(headers, request, credential)\n            .pipe(\n                map( resp => this.createSuccessResponse(resp) ),\n                catchError( error => this.createErrorResponse(error) )\n            )\n    }\n\n    private createRequest(parameters: any): ConsumerLoanAdhesionRequest {\n        const request = new ConsumerLoanAdhesionRequest()\n        \n        if (parameters.operationId != null) {\n            request.operationId = parseInt(parameters.operationId)\n        }\n        \n        request.forceDuplicateOperation = parameters.forceDuplicateOperation\n        request.scheduling = this.requestFactory.createScheduling(parameters)\n        request.currency = parameters.currency\n        request.targetAmount = parseInt(parameters.targetAmount)\n        request.periodMonths = parseInt(parameters.periodMonths)\n        request.includeDocuments = parameters.includeDocuments\n        request.fullKeyToAccount = parameters.fullKeyToAccount\n\n        if (parameters.profession != null) {\n            const profession = new GenericPersonalCreditWorkElement()\n            profession.cod = parameters.profession.cod\n            profession.description = parameters.profession.description\n            request.profissao = profession\n        }\n\n        if (parameters.jobSector != null) {\n            const jobSector = new GenericPersonalCreditWorkElement()\n            jobSector.cod = parameters.jobSector.cod\n            jobSector.description = parameters.jobSector.description\n            request.sector = jobSector\n        }\n\n        if (parameters.jobType != null) {\n            const jobType = new GenericPersonalCreditWorkElement()\n            jobType.cod = parameters.jobType.cod\n            jobType.description = parameters.jobType.description\n            request.trabalho = jobType\n        }\n\n        if (parameters.contractType != null) {\n            const contractType = new GenericPersonalCreditWorkElement()\n            contractType.cod = parameters.contractType.cod\n            contractType.description = parameters.contractType.description\n            request.contrato = contractType\n        }\n\n        if (parameters.jobServiceTime != null) {\n            request.antiguidade = parseInt(parameters.jobServiceTime)\n        }\n        \n        request.codigoIRS = parameters.irsCode\n\n        if (parameters.grossIncome != null) {\n            request.rendimentoBruto = parseInt(parameters.grossIncome)\n        }\n\n        if (parameters.netIncome != null) {\n            request.rendimentoLiquido = parseInt(parameters.netIncome)\n        }\n\n        if (parameters.monthlyExpenses != null) {\n            request.encargosMensais = parseInt(parameters.monthlyExpenses)\n        }\n        \n        if (parameters.householdExpenses != null) {\n            request.despesasFamiliares = parseInt(parameters.householdExpenses)\n        }\n        \n        if (parameters.householdMembers != null) {\n            request.nrAgregado = parseInt(parameters.householdMembers)\n        }\n        \n        request.prestacao = parameters.installment\n        request.receiptsVenc = parameters.salaryDocuments\n        request.irs = parameters.irsDocuments\n        request.laboralVinc = parameters.employmentDocuments\n        request.professionDoc = parameters.professionDocuments\n        request.addressDoc = parameters.addressDocuments\n        request.citzeanCardDoc = parameters.identificationDocuments\n\n        if (parameters.ral != null) {\n            request.ral = this.requestFactory.parseBool(parameters.ral)\n        }\n\n        request.questions = parameters.questions\n        \n        request.defaultSimulation = parameters.defaultSimulation\n\n        return request;\n    }\n\n    private createCredentials(parameters: any): Credential {\n        return this.requestFactory.createCredentials(parameters);\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { Injectable } from '@angular/core';\nimport { GenericKeyValue } from 'src/app/models/GenericKeyValue';\nimport { Credential } from 'src/app/models/operation/Credential';\nimport { Scheduling } from 'src/app/models/operation/Scheduling';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AgentifaiRequestFactoryService {\n\n  createCredentials(parameters: any): Credential {\n    const credentialJson = parameters.credential;\n    if (credentialJson) {\n      const credential = new Credential();\n      credential.type = credentialJson.type;\n      credential.value = credentialJson.value;\n      return credential\n    }\n  }\n\n  createScheduling(parameters: any): Scheduling {\n    const schedulingParams = parameters.scheduling;\n    const scheduling = new Scheduling();\n    scheduling.startDate = schedulingParams.startDate;\n    scheduling.endDate = schedulingParams.endDate || \"\";\n    return scheduling;\n  }\n\n  parseBool(val: any) {\n    return !!JSON.parse(String(val).toLowerCase());\n  }\n\n  createGenericKeyValue(parameters: any): GenericKeyValue {\n    return new GenericKeyValue(parameters.key, parameters.value);\n  }\n\n  createGenericKeyValueList(parameters: any[]): GenericKeyValue[] {\n    return parameters.map(item => {\n      return new GenericKeyValue(item.key, item.value);\n    })\n  }\n  \n}\n","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { AgentifaiUtils } from 'src/app/agentifai/utils/agentifai-utils'\nimport { AgentifaiCardsTransformerService } from 'src/app/services/agentifai/agentifai-cards-transformer.service';\nimport { CardsUtils } from 'src/app/agentifai/commands/cards/cards-utils';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetPaymentCards implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        `body\\.[^.]+\\.(${CardsUtils.nonAnonymizedCardProperties})`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private transformer: AgentifaiCardsTransformerService\n    ) {}\n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n\n        return service.getCardsPaymentData(headers)\n            .pipe(\n                map( resp => this.createSuccessResponse(resp) ),\n                catchError( error => this.createErrorResponse(error) )\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        var transformedResponse = this.transformResponse(response);\n        return this.createResponse(transformedResponse, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n    private transformResponse(response: any): any {\n        var data = AgentifaiUtils.mapFromString(response.data);\n        \n        if (data != null) {\n            data = this.transformer.addNewCardProperties(data);\n        }\n\n        response.data = data;\n\n        return response;\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetImmediateTransferPhoneNumbersCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\"\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n\n        return service.getPhoneNumbersForImmediateTransfers(headers)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiRequestFactoryService } from 'src/app/services/agentifai/agentifai-request-factory.service';\nimport { TransferImmediateRequest } from 'src/app/models/operation/request/transfers/TransferImmediateRequest';\nimport { Credential } from 'src/app/models/operation/Credential';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\n\nexport class ExecuteImmediateTransferCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexesPathsSuccess: String[] = [\n        \"headers.+\",\n        \"status\",\n        `body\\.(operationId|destinationType|operationCharge|operationStatus|transferState|${Anonymization.scheduling()})`\n    ]\n\n    private nonAnonymizableRegexesPathsError: String[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private requestFactory: AgentifaiRequestFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters = this.request.getParameters()\n        const request = this.createRequest(parameters);\n        const credential = this.createCredentials(parameters);\n\n        return service.executeImmediateTransfer(headers, request, credential)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(resp => this.createErrorResponse(resp))\n            );\n    }\n\n    private createRequest(parameters: any): TransferImmediateRequest {\n        const request = new TransferImmediateRequest();\n        request.operationId = parameters.operationId;\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation;\n        request.amount = parameters.amount;\n        request.message = parameters.message;\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation;\n        request.destinationPhone = parameters.destinationPhone;\n        request.cardNumberMasked = parameters.cardNumberMasked;\n        request.useMbwayPartner = parameters.useMbwayPartner;\n        request.scheduling = null;\n\n        return request;\n    }\n\n    private createCredentials(parameters: any): Credential {\n        return this.requestFactory.createCredentials(parameters);\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexesPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizableRegexesPathsError)\n        )\n    }\n\n}","\nexport class AccountsUtils {\n\n    static nonAnonymizedAccountsProperties: String = \"alias|accountType|accountName|activeCDForAllHolders|multipleHoldersInfoType|description\";\n    \n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetManagerAvailableTime implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        String.raw `^body\\.\\d$`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) {}\n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters: any = this.request.getParameters()\n        const destinationType = parameters[\"destinationType\"];\n        const date = parameters[\"date\"];\n\n        return service.getManagerAvailableTime(headers, destinationType, date)\n            .pipe(\n                map( resp => this.createSuccessResponse(resp) ),\n                catchError( error => this.createErrorResponse(error) )\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","var map = {\n\t\"./ion-action-sheet.entry.js\": [\n\t\t\"dUtr\",\n\t\t\"common\",\n\t\t0\n\t],\n\t\"./ion-alert.entry.js\": [\n\t\t\"Q8AI\",\n\t\t\"common\",\n\t\t1\n\t],\n\t\"./ion-app_8.entry.js\": [\n\t\t\"hgI1\",\n\t\t\"common\",\n\t\t2\n\t],\n\t\"./ion-avatar_3.entry.js\": [\n\t\t\"CfoV\",\n\t\t\"common\",\n\t\t3\n\t],\n\t\"./ion-back-button.entry.js\": [\n\t\t\"Nt02\",\n\t\t\"common\",\n\t\t4\n\t],\n\t\"./ion-backdrop.entry.js\": [\n\t\t\"Q2Bp\",\n\t\t5\n\t],\n\t\"./ion-button_2.entry.js\": [\n\t\t\"0Pbj\",\n\t\t\"common\",\n\t\t6\n\t],\n\t\"./ion-card_5.entry.js\": [\n\t\t\"ydQj\",\n\t\t\"common\",\n\t\t7\n\t],\n\t\"./ion-checkbox.entry.js\": [\n\t\t\"4fMi\",\n\t\t\"common\",\n\t\t8\n\t],\n\t\"./ion-chip.entry.js\": [\n\t\t\"czK9\",\n\t\t\"common\",\n\t\t9\n\t],\n\t\"./ion-col_3.entry.js\": [\n\t\t\"/CAe\",\n\t\t10\n\t],\n\t\"./ion-datetime_3.entry.js\": [\n\t\t\"WgF3\",\n\t\t\"common\",\n\t\t11\n\t],\n\t\"./ion-fab_3.entry.js\": [\n\t\t\"uQcF\",\n\t\t\"common\",\n\t\t12\n\t],\n\t\"./ion-img.entry.js\": [\n\t\t\"wHD8\",\n\t\t13\n\t],\n\t\"./ion-infinite-scroll_2.entry.js\": [\n\t\t\"2lz6\",\n\t\t14\n\t],\n\t\"./ion-input.entry.js\": [\n\t\t\"ercB\",\n\t\t\"common\",\n\t\t15\n\t],\n\t\"./ion-item-option_3.entry.js\": [\n\t\t\"MGMP\",\n\t\t\"common\",\n\t\t16\n\t],\n\t\"./ion-item_8.entry.js\": [\n\t\t\"9bur\",\n\t\t\"common\",\n\t\t17\n\t],\n\t\"./ion-loading.entry.js\": [\n\t\t\"cABk\",\n\t\t\"common\",\n\t\t18\n\t],\n\t\"./ion-menu_3.entry.js\": [\n\t\t\"kyFE\",\n\t\t\"common\",\n\t\t19\n\t],\n\t\"./ion-modal.entry.js\": [\n\t\t\"TvZU\",\n\t\t\"common\",\n\t\t20\n\t],\n\t\"./ion-nav_2.entry.js\": [\n\t\t\"vnES\",\n\t\t\"common\",\n\t\t21\n\t],\n\t\"./ion-popover.entry.js\": [\n\t\t\"qCuA\",\n\t\t\"common\",\n\t\t22\n\t],\n\t\"./ion-progress-bar.entry.js\": [\n\t\t\"0tOe\",\n\t\t\"common\",\n\t\t23\n\t],\n\t\"./ion-radio_2.entry.js\": [\n\t\t\"h11V\",\n\t\t\"common\",\n\t\t24\n\t],\n\t\"./ion-range.entry.js\": [\n\t\t\"XGij\",\n\t\t\"common\",\n\t\t25\n\t],\n\t\"./ion-refresher_2.entry.js\": [\n\t\t\"nYbb\",\n\t\t\"common\",\n\t\t26\n\t],\n\t\"./ion-reorder_2.entry.js\": [\n\t\t\"smMY\",\n\t\t\"common\",\n\t\t27\n\t],\n\t\"./ion-ripple-effect.entry.js\": [\n\t\t\"STjf\",\n\t\t28\n\t],\n\t\"./ion-route_4.entry.js\": [\n\t\t\"k5eQ\",\n\t\t\"common\",\n\t\t29\n\t],\n\t\"./ion-searchbar.entry.js\": [\n\t\t\"OR5t\",\n\t\t\"common\",\n\t\t30\n\t],\n\t\"./ion-segment_2.entry.js\": [\n\t\t\"fSgp\",\n\t\t\"common\",\n\t\t31\n\t],\n\t\"./ion-select_3.entry.js\": [\n\t\t\"lfGF\",\n\t\t\"common\",\n\t\t32\n\t],\n\t\"./ion-slide_2.entry.js\": [\n\t\t\"5xYT\",\n\t\t33\n\t],\n\t\"./ion-spinner.entry.js\": [\n\t\t\"nI0H\",\n\t\t\"common\",\n\t\t34\n\t],\n\t\"./ion-split-pane.entry.js\": [\n\t\t\"NAQR\",\n\t\t35\n\t],\n\t\"./ion-tab-bar_2.entry.js\": [\n\t\t\"knkW\",\n\t\t\"common\",\n\t\t36\n\t],\n\t\"./ion-tab_2.entry.js\": [\n\t\t\"TpdJ\",\n\t\t\"common\",\n\t\t37\n\t],\n\t\"./ion-text.entry.js\": [\n\t\t\"ISmu\",\n\t\t\"common\",\n\t\t38\n\t],\n\t\"./ion-textarea.entry.js\": [\n\t\t\"U7LX\",\n\t\t\"common\",\n\t\t39\n\t],\n\t\"./ion-toast.entry.js\": [\n\t\t\"L3sA\",\n\t\t\"common\",\n\t\t40\n\t],\n\t\"./ion-toggle.entry.js\": [\n\t\t\"IUOf\",\n\t\t\"common\",\n\t\t41\n\t],\n\t\"./ion-virtual-scroll.entry.js\": [\n\t\t\"8Mb5\",\n\t\t42\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"kLfG\";\nmodule.exports = webpackAsyncContext;","import { environment } from \"src/environments/environment\";\nimport { AccountsUtils } from \"src/app/agentifai/commands/accounts/accounts-utils\";\nimport { Anonymization } from \"src/app/agentifai/utils/anonymization-utils\";\nimport { CardsUtils } from \"../agentifai/commands/cards/cards-utils\";\n\nexport class InternalUtils {\n\n    static endpointKey = \"baseEndpointKey\";\n    static baseUrl = \"\";\n\n    static endpoints = environment.endpoints;\n\n    static getBaseUrl() {\n        if (this.baseUrl.length > 0) {\n            return this.baseUrl;\n        } else {\n            return this.endpoints[0];\n        }\n    }\n\n    static getEndpointsWhitelist() {\n        return [ \n            {\n                \"endpoint\": \"business\\/accounts($|[?].+?$)\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    \"body\\.(\"\n                    + `defaultAccount\\.(${AccountsUtils.nonAnonymizedAccountsProperties})`\n                    + `|accounts\\.[^.]+\\.(${AccountsUtils.nonAnonymizedAccountsProperties})`\n                    + \")(?:$|\\W)\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/accounts\\/[^\\/]+\\/transactions($|[?].+?$)\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/accounts\\/[^\\/]+\\/balances$\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    \"body\\.(accountCurrency|accountBalancesList\\.[^.]+\\.currency)(?:$|\\W)\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/payments\\/service\\/executions\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": Anonymization.NonAnonymizablePathRegexDefault,\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/payments\\/service\\/simulations\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": Anonymization.NonAnonymizablePathRegexDefault,\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/payments\\/generaldataforpayments\\?.+\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    \"body\\.(\"\n                    + \"frequentOperations\\.[^.]+\\.\"\n                    + \"(operationName|operationType|operationId|amount)\"\n                    + \"|accounts\\.[^.]+\\.\"\n                    + `(${AccountsUtils.nonAnonymizedAccountsProperties})`\n                    + \")(?:$|\\W)\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/payments\\/entities\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/payments\\/service\\/frequent\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    \"body\\.(operationName|operationId|amount)(?:$|\\W)\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/payments\\/telecommunications\\/configurations\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": Anonymization.NonAnonymizablePathRegexDefault,\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/payments\\/telecommunications\\/simulations\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    `body\\.(operationId|operationStatus|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/payments\\/telecommunications\\/executions\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    `body\\.(operationId|operationStatus|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/payments\\/telecommunications\\/frequent\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    \"body\\.(operationName|operationId|amount|paymentConfigurationCode|parentPaymentConfigurationCode)(?:$|\\W)\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            \n            {\n                \"endpoint\": \"business\\/operations\\/.+\\/proofs\\/emails\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/operations\\/.+\\/proof\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/transfers\\/internal\\/simulations\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    `body\\.(operationId|operationStatus|charges[.].*|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/transfers\\/internal\\/executions\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    `body\\.(operationId|operationStatus|charges[.].*|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/transfers\\/internal\\/frequent\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    \"body\\.(operationName|operationId|amount)(?:$|\\W)\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/transfers\\/generaldatafortransfers\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    \"body\\.(\"\n                    + \"frequentOperations\\.[^.]+\\.\"\n                    + \"(operationName|operationType|operationId|amount)\"\n                    + \"|accounts\\.[^.]+\\.\"\n                    + `(${AccountsUtils.nonAnonymizedAccountsProperties})`\n                    + \")(?:$|\\W)\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/transfers\\/types\\/validate\\?targetAccount=.+\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": Anonymization.NonAnonymizablePathRegexDefault,\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/transfers\\/calendarrestrictions\\?transferTypeFilter=.+\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": Anonymization.NonAnonymizablePathRegexDefault,\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/transfers\\/sepa\\/simulations\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    `body\\.(operationId|operationStatus|charges[.].*|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/transfers\\/sepa\\/executions\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    `body\\.(operationId|operationStatus|charges[.].*|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/transfers\\/sepa\\/frequent\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\":  [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    \"body\\.(operationName|operationId|amount)(?:$|\\W)\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/transfers\\/immediate\\/simulations\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    `body\\.(operationId|destinationType|operationCharge|operationStatus|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/transfers\\/immediate\\/executions\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    `body\\.(operationId|destinationType|operationCharge|operationStatus|transferState|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/transfers\\/immediate\\/registration\\/contacts\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/cards\\/mbwaypartner\\/clientStatus\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    `body\\.(cards\\.[^.]+\\.(${CardsUtils.nonAnonymizedCardProperties})|clientMBWay)`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/cards\\/mbwaypartner\\/cards\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    `body\\.[^.]+\\.(${CardsUtils.nonAnonymizedCardProperties})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/cards\\/mbwaypartner\\/adhesion\\/simulationsv2\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    `body\\.(operationId|operationStatus|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/cards\\/mbwaypartner\\/adhesion\\/executionsv2\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    `body\\.(operationId|operationStatus|${Anonymization.scheduling()})`\n                ],            \n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/cards\\/mbwaypartner\\/acceptTransferCGD\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    `body\\.(operationId|operationStatus|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/customers\\/current\\/contacts\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    \"body\\.contacts\\.[^.]+\\.(communicationMeans|contactType)(?:$|\\W)\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/customers\\/contracts\\/credencialUnlockQuestions\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    \"body\\.(operationId|questions\\.*|passwordRegeneration|forceDuplicateOperation)\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/customers\\/contracts\\/credencialUnlockAnswers\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    \"body\\.(operationId|success)\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/customers\\/contracts\\/contractUnlockQuestions\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    \"body\\.(questions\\.*)\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/customers\\/contracts\\/contractUnlockAnswers\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    \"body\\.result\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/consent\\/voiceTreatment\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": Anonymization.NonAnonymizablePathRegexDefault,\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/consent\\/voiceTreatment\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": Anonymization.NonAnonymizablePathRegexDefault,\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/cards\\/customercarddata\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    \"body\\.(\"\n                        + \"((cardAccounts\\.[^.]+)|defaultCardAccount)\\.(\"\n                            + \"currency|type|cardCodeType|statementIssueDateDescription|\"\n                            + \"statementPaymentLimitDescription|productImageUrl|\"\n                            + `cards\\.[^.]+\\.(${CardsUtils.nonAnonymizedCardProperties}))`\n                        + \"|defaultCardAccountBalances\\.availableCredit)\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/cards\\/accounts\\/.+\\/transactions\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    `body\\.(`\n                        + `cards\\.[^.]+\\.(${CardsUtils.nonAnonymizedCardProperties})`\n                        + `|`\n                        + `cardAccountTransactions.transactions.[^.]+.(${CardsUtils.nonAnonymizedCardTransactionProperties})`\n                        + `)`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/cards\\?targetCardOperationType=.+\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    `body\\.[^.]+\\.(${CardsUtils.nonAnonymizedCardProperties})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/cards\\/payments\\/simulations\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    `body\\.(operationId|operationStatus|charges.*|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/cards\\/payments\\/executions\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    `body\\.(operationId|operationStatus|charges.*|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/cards\\/activation\\/.+\\/.+\\/activateCard\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    String.raw `^body\\.(success|failureReason)$`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/cards\\/phoneNumber\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/customers\\/manager\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    String.raw `^body\\.serviceModel$`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/customers\\/manager\\/callback\\/configuration\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    String.raw`^body\\.(callbackDestinations\\.\\d\\.periods\\.\\d|minDate|maxDate)$`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/customers\\/manager\\/callback\\/availabletime\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    String.raw `^body\\.\\d$`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/customers\\/manager\\/callback\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/loans\\/consumer\\/calculatorV2\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    String.raw`^body\\.(operationId|success|errorMessage|simulationDate|amountMin|amountMax)$`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/loans\\/consumer\\/adhesionGeneralDataV2\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    String.raw`^body\\.(pedidoExistenteMes|validClient|client95_96|professionalInformation\\..+|accounts\\.[^.]+\\.(${AccountsUtils.nonAnonymizedAccountsProperties}))$`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/loans\\/consumer\\/adhesionSimulationV2\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\":  [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    String.raw`^body\\.(operationId|success|errorMessage|simulationDate|amountMin|amountMax)$`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/loans\\/consumer\\/adhesionExecutionV2\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    String.raw `^body\\.(operationId|operationStatus)$`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/content\\/privateContent\\/features\\/.+\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/content\\/privateContent\\/landingPage\\/banner\\/disable\",\n                \"httpMethod\": \"PUT\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/showcase\\/cards\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    String.raw`(name|descriptionHtml|otherInfo)$`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/showcase\\/characteristics\\?characteristicsId=.+\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    String.raw`^body\\.productCharacteristicsList\\.[0-9]+\\.(title|description)$`\n                ],            \n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/showcase\\/productdocument\\?productCode=.+\\&docType=.+\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/accounts\\?targetOperationType=NEW_CARD_REQUEST\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    'headers.(?!Set-Cookie).+',\n                    'status'\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/cards\\/requests\\/configurations\\?fullAccountKey=.+\\&productCode=.+\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    String.raw`^body\\.(paymentPercentages\\.[^.]+|statementEmissionDays\\.[^.]+|showCheckForCredit|onlineAdherence|creditLimitIncrementValue|minProductCreditLimit|maxProductCreditLimit)$`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/cards\\/requests\\/simulations\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    String.raw`^body\\.(operationId|operationStatus|scheduling|invalidAccountIntervenLei83|safeMessageAdhesion|normalAdherenceErrorMsg)$`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/cards\\/requests\\/initNewCreditCard\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    String.raw `^body\\.(operationId|showCardCreditDocuments)$`\n                ],            \n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/cards\\/requests\\/executions\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    String.raw`^body\\.(operationId|operationStatus|scheduling|invalidAccountIntervenLei83|safeMessageAdhesion|normalAdherenceErrorMsg)$`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/customers\\/updateClientInformation\\/validity\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    \"body.*\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/customers\\/updateClientInformation\\/address\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    \"body.expirado\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/customers\\/updateClientInformation\\/personal\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    \"body.expirado\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/customers\\/updateClientInformation\\/professional\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    'headers.(?!Set-Cookie).+',\n                    'status',\n                    String.raw `^body\\.(expirado|trabalharPorContaDoutrem|empregadoCgd)$`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/customers\\/updateClientInformation\\/list\\/\\d*\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    \"body.*\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/customers\\/updateClientInformation\\/simulation\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    `body\\.(operationId|operationStatus|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/customers\\/updateClientInformation\\/execution\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    `body\\.(operationId|operationStatus|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/credentialsmanagement\\/credentials\\/\\d*\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    'headers.(?!Set-Cookie).+',\n                    'status',\n                    String.raw `body\\.credentials\\.[^.]+\\.status`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/credentialsmanagement\\/matrixrequisition\\/config\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    'headers.(?!Set-Cookie).+',\n                    'status',\n                    String.raw `body\\.((adressList\\.[^.]+\\.adressSequenceNumber)|motiveList\\.[^.]+)`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/credentialsmanagement\\/matrixrequisition\\/simulations\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\":  [\n                    'headers.(?!Set-Cookie).+',\n                    'status',\n                    `body\\.(operationId|operationStatus|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/credentialsmanagement\\/matrixrequisition\\/executions\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    'headers.(?!Set-Cookie).+',\n                    'status',\n                    `body\\.(operationId|operationStatus|customerMessage|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/credentialsmanagement\\/matrixactivation\\/simulations\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\":  [\n                    'headers.(?!Set-Cookie).+',\n                    'status',\n                    `body\\.(operationId|operationStatus|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/credentialsmanagement\\/matrixactivation\\/executions\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    'headers.(?!Set-Cookie).+',\n                    'status',\n                    `body\\.(operationId|operationStatus|customerMessage|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/cards\\/cashadvance\\/simulations$\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    'headers.(?!Set-Cookie).+',\n                    \"status\",\n                    `body\\.(operationId|operationStatus|operationCost|commissions|tax|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/cards\\/cashadvance\\/executions$\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    'headers.(?!Set-Cookie).+',\n                    \"status\",\n                    `body\\.(operationId|operationStatus|operationCost|commissions|tax|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/directdebits\\/detail($|[?].+?$)\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    'headers.(?!Set-Cookie).+',\n                    \"status\",\n                    String.raw `^body\\.(validToChange|limitDate|maxAmount|lastUpdateDate|situation|creationDate)$`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/directdebits($|[?].+?$)\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    'headers.(?!Set-Cookie).+',\n                    \"status\",\n                    String.raw`^body\\.directDebits\\.[^.]+\\.(creationDate|situation)$`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/directdebits\\/config\\/simulations$\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    'headers.(?!Set-Cookie).+',\n                    \"status\",\n                    `body\\.(operationId|operationStatus|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/directdebits\\/config\\/executions$\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    'headers.(?!Set-Cookie).+',\n                    \"status\",\n                    `body\\.(operationId|operationStatus|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/directdebits\\/revoke$\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    'headers.(?!Set-Cookie).+',\n                    \"status\",\n                    `body\\.(`\n                        + `operationId|operationStatus|${Anonymization.scheduling()}`\n                        + `|`\n                        + `directDebit\\.[^.]+\\.(creationDate|creditorEntity|situation|directDebitTransaction\\.[^.]+\\.(date|amount|revog|type))`\n                        + `)`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/directdebits\\/revoke\\/simulations$\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    'headers.(?!Set-Cookie).+',\n                    \"status\",\n                    `body\\.(operationId|operationStatus|success|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/directdebits\\/revoke\\/executions$\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    'headers.(?!Set-Cookie).+',\n                    \"status\",\n                    `body\\.(operationId|operationStatus|success|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/customers\\/nif\\/tooltip\\/info.*\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    'headers.(?!Set-Cookie).+',\n                    \"status\",\n                    `body\\.tooltipInfoText`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/directdebits\\/changestate\\/*\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    'headers.(?!Set-Cookie).+',\n                    \"status\",\n                    `body\\.(operationId|operationStatus|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/directdebits\\/transactions($|[?].+?$)\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    'headers.(?!Set-Cookie).+',\n                    'status',\n                    String.raw`^body\\.directDebitTransaction\\.[^.]+\\.(date|type|revog|nsLote|nsRegLote)$`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/accounts\\/[^\\/]+\\/getIbanPdf$\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    'headers.(?!Set-Cookie).+',\n                    'status'\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            }\n        ]\n    }\n\n}\n","import { GenericOperationRequest } from 'src/app/models/operation/request/GenericOperationRequest'\n\nexport class TransferImmediateRequest extends GenericOperationRequest {\n    amount: string;\n    message: string;\n    destinationPhone: string;\n    useMbwayPartner: boolean;\n    cardNumberMasked:string;\n\n    constructor() {\n        super();\n        this.amount = '';\n        this.message = '';\n        this.destinationPhone = '';\n        this.cardNumberMasked='';\n        this.useMbwayPartner = false;      \n    }\n}","\nexport class CardsUtils {\n\n    static nonAnonymizedCardProperties: String = `cardAlias|cardName|cardAccountCurrency|prePaidCard|prePaidDualCreditCard|active|cancelled|virtualCard|(transactions.[^.]+.(creditAmount|debitAmount))`;\n    static nonAnonymizedCardTransactionProperties: String = \"creditAmount|debitAmount\"\n    \n}","import { TransferImmediateRequest } from 'src/app/models/operation/request/transfers/TransferImmediateRequest';\nimport { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\n\nexport class SimulateImmediateTransferCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexesPathsSuccess: String[] = [\n        \"headers.+\",\n        \"status\",\n        `body\\.(operationId|destinationType|operationCharge|operationStatus|${Anonymization.scheduling()})`\n    ]\n\n    private nonAnonymizableRegexesPathsError: String[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters: any = this.request.getParameters()\n        const request = this.createRequest(parameters);\n\n        return service.simulateImmediateTransfer(headers, request)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(resp => this.createErrorResponse(resp))\n            );\n    }\n\n    private createRequest(parameters: any): TransferImmediateRequest {\n        const request = new TransferImmediateRequest();\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation;\n        request.amount = parameters.amount;\n        request.message = parameters.message;\n        request.destinationPhone = parameters.destinationPhone;\n        request.cardNumberMasked = parameters.cardNumberMasked;\n        request.useMbwayPartner = parameters.useMbwayPartner;\n        request.scheduling = null;\n\n        return request;\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexesPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizableRegexesPathsError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { AgentifaiRequestFactoryService } from 'src/app/services/agentifai/agentifai-request-factory.service';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { TelecommunicationsPaymentRequest } from 'src/app/models/operation/request/payments/TelecommunicationsPaymentRequest';\n\nexport class SimulateTelecommunicationPaymentCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexesPathsSuccess: String[] = [\n        \"headers.+\",\n        \"status\",\n        `body\\.(operationId|operationStatus|${Anonymization.scheduling()})`\n    ]\n\n    private nonAnonymizableRegexesPathsError: String[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private requestFactory: AgentifaiRequestFactoryService,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters: any = this.request.getParameters()\n        const request = this.createRequest(parameters);\n\n        return service.simulateTelecomPayment(headers, request)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(resp => this.createErrorResponse(resp))\n            );\n    }\n\n    private createRequest(parameters: any): TelecommunicationsPaymentRequest {\n        const request = new TelecommunicationsPaymentRequest();\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation;\n        request.scheduling = this.requestFactory.createScheduling(parameters);\n        request.sourceAccount = parameters.sourceAccount;\n        request.reference = parameters.reference;\n        request.amount = parameters.amount;\n        request.paymentConfigurationCode = parseInt(parameters.paymentConfigurationCode);\n        request.parentPaymentConfigurationCode = parseInt(parameters.parentPaymentConfigurationCode);\n        request.taxPayerNumber = parameters.taxPayerNumber;\n\n        return request;\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexesPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizableRegexesPathsError)\n        )\n    }\n\n}","\nexport class AgentifaiRequest {\n    id: string;\n    data: JSON;\n\n    constructor(id: string, data: JSON) {\n        this.id = id;\n        this.data = data;\n    }\n\n    getParameters(): any {\n        return this.data[\"parameters\"];\n    }\n\n    getHeaders(): any {\n        return this.data[\"headers\"];\n    }\n}","import { Injectable } from '@angular/core';\nimport { Platform } from '@ionic/angular';\nimport { environment } from 'src/environments/environment';\n\nexport enum ENVS {\n  BROWSER,\n  DEV,\n  DEV2,\n  TI,\n  CQ,\n  PROD\n}\n\n/**\n* https://ti-pce-bo.grupocgd.com/bkoWeb/ // https://cq-pce-bo.grupocgd.com/bkoWeb/home.seam\n*/\n\ndeclare var IRoot: any;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EnvironmentService {\n\n  public DEVELOPMENT_MODE: boolean = true;\n\n  private ENV_URLS: Array<string> = [\n    'http://localhost:8100/pceApi/rest/v1/',\n    'http://10.52.33.69:8080/pceApi/rest/v1/',\n    'http://10.52.3.80:28080/pceApi/rest/v1/',\n    'http://ti-app.cgd.pt/pceApi/rest/v1/',\n    'https://app.cqcgd.pt/pceApi/rest/v1/',\n    'https://qoba.cgd.pt/pceApi/rest/v1/',\n    'https://app.cgd.pt/pceApi/rest/v1/'\n  ];\n\n  private ENVS_CODES = {\n    \"ANDROID\": {\n      \"platform\": \"android\",\n      \"codeSmartPhone\": \"as2\",\n      \"codeTablet\": \"at2\"\n    },\n    \"IOS_SMARTPHONE\": {\n      \"platform\": \"iphone\",\n      \"code\": \"is2\"\n    },\n    \"IOS_TABLET\": {\n      \"platform\": \"ipad\",\n      \"code\": \"it2\"\n    }\n  };\n\n  public LANG_PT = 'pt-PT';\n  public LANG_EN = 'en-US'; //locale on services PCE\n\n  private DEFAULT_ENV: ENVS = ENVS.DEV;\n  private DEFAULT_LANG = this.LANG_PT;\n  private DEFAULT_DEVICE_TYPE = 'NA';\n  private DEFAULT_APPVERSION = 'NA';\n  public APPNAME = 'APP_CAIXADIRECTA';\n  public SELECTED_ENV: ENVS;\n\n  public baseUrl: string;\n  public pceVersion: string;\n  public appVersion: string;\n  public deviceType: string;\n  public languageCode: string;\n  public isDeviceRooted: boolean;\n\n  public isBrowser: boolean = false;\n  public aliceActive;\n  public reloadBanners = false;\n\n  private iPhoneModelsWithNotch: string[] = ['iPhone10,3', 'iPhone10,6', 'iPhone11,2', 'iPhone11,4', 'iPhone11,6', 'iPhone11,8', 'iPhone12,1', 'iPhone12,3', 'iPhone12,5'];\n\n  public aliceStateChangeCallback: Function = () => { };\n  public isAgentifaiLoggerEnabled: boolean = true;\n\n  ENVS_AUX = ENVS;\n\n  constructor(public platform: Platform) {\n    if (!this.DEVELOPMENT_MODE) {\n      this.DEFAULT_ENV = ENVS.PROD;\n    }\n\n    this.SELECTED_ENV = this.DEFAULT_ENV;\n    this.pceVersion = \"NA\";\n    this.languageCode = this.DEFAULT_LANG;\n    this.deviceType = this.DEFAULT_DEVICE_TYPE;\n    this.appVersion = this.DEFAULT_APPVERSION;\n    this.isDeviceRooted = false;\n    this.aliceActive = false;\n\n    if (platform && platform.is(\"cordova\")) {\n      console.log(platform);\n      this.appVersion = \"3.10.0\";\n      if (platform) {\n        if (platform.is('android')) {\n          if (platform.is(\"tablet\")) {\n            this.deviceType = this.ENVS_CODES.ANDROID.codeTablet;\n          } else {\n            this.deviceType = this.ENVS_CODES.ANDROID.codeSmartPhone;\n          }\n        } else if (platform.is('iphone')) {\n          this.deviceType = this.ENVS_CODES.IOS_SMARTPHONE.code;\n        } else if (platform.is('ipad')) {\n          this.deviceType = this.ENVS_CODES.IOS_TABLET.code;\n        }\n      }\n      this.baseUrl = this.ENV_URLS[this.DEFAULT_ENV];\n    } else {\n      console.log(\"BROWSER\");\n      this.baseUrl = this.ENV_URLS[ENVS.BROWSER];\n      this.SELECTED_ENV = ENVS.BROWSER;\n      this.isBrowser = true;\n      this.appVersion = \"1.0.0\";\n      this.deviceType = this.ENVS_CODES.ANDROID.codeSmartPhone;\n    }\n\n    this.platform.ready().then(() => {\n      if (this.platform && this.platform.is(\"cordova\")) {\n        IRoot.isRooted((result: boolean) => {\n          this.isDeviceRooted = result;\n        }, (error: string) => {\n          console.log(\"error checking if device rooted: \" + error);\n        });\n      }\n    });\n\n    console.log(\"url :\" + this.baseUrl);\n  }\n\n  isIPhone = function (): Boolean {\n    if (this.deviceType == this.ENVS_CODES.IOS_SMARTPHONE.code || this.deviceType == this.ENVS_CODES.IOS_TABLET.code) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  isAndroid = function (): Boolean {\n    if (this.deviceType == this.ENVS_CODES.ANDROID.codeSmartPhone || this.deviceType == this.ENVS_CODES.ANDROID.codeTablet) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  isTablet = function (): Boolean {\n    if (this.deviceType == this.ENVS_CODES.IOS_TABLET.code || this.deviceType == this.ENVS_CODES.ANDROID.codeTablet) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  changeEnvironment = function () {\n    //if (this.ENVS_AUX.BROWSER === this.SELECTED_ENV) {\n    //    this.SELECTED_ENV = this.ENVS_AUX.DEV;\n    //    this.baseUrl = this.ENV[this.SELECTED_ENV];\n    //} else\n    if (this.ENVS_AUX.DEV === this.SELECTED_ENV) {\n      this.SELECTED_ENV = this.ENVS_AUX.DEV2;\n      this.baseUrl = this.ENV[this.SELECTED_ENV];\n    } else if (this.ENVS_AUX.DEV2 === this.SELECTED_ENV) {\n      this.SELECTED_ENV = this.ENVS_AUX.TI;\n      this.baseUrl = this.ENV[this.SELECTED_ENV];\n    } else if (this.ENVS_AUX.TI === this.SELECTED_ENV) {\n      this.SELECTED_ENV = this.ENVS_AUX.CQ;\n      this.baseUrl = this.ENV[this.SELECTED_ENV];\n    } else if (this.ENVS_AUX.CQ === this.SELECTED_ENV) {\n      this.SELECTED_ENV = this.ENVS_AUX.PROD;\n      this.baseUrl = this.ENV[this.SELECTED_ENV];\n    } else if (this.ENVS_AUX.PROD === this.SELECTED_ENV) {\n      this.SELECTED_ENV = this.ENVS_AUX.DEV;\n      this.baseUrl = this.ENV[this.SELECTED_ENV];\n    } else {\n      this.SELECTED_ENV = this.ENVS_AUX.BROWSER;\n      this.baseUrl = this.ENV[this.SELECTED_ENV];\n    }\n    if (this.DEVELOPMENT_MODE) {\n      console.log(\"new url :\" + this.baseUrl);\n    }\n  }\n\n  /***** Alice methods *****/\n\n  isAliceActive(): boolean {\n    return this.aliceActive;\n  }\n\n  openAlice(): void {\n    this.aliceActive = true;\n  }\n\n  closeAlice(): void {\n    this.aliceActive = false;\n  }\n\n  getAgentifaiConfiguration(): any {\n    return {\n      apiUrl: environment.assistantConfiguration.apiUrl,\n      apiKey: environment.assistantConfiguration.apiKey\n    }\n  }\n  \n}\n\n","import { Injectable } from '@angular/core';\nimport { EnvironmentService } from 'src/app/services/environment-service/environment-service.service';\nimport { UtilsService } from 'src/app/services/utils/utils.service';\nimport { Credential } from 'src/app/models/operation/Credential';\nimport { InternalUtils } from 'src/app/internal/internal-utils';\nimport { HTTP } from '@ionic-native/http/ngx';\nimport { Observable, from } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class Api {\n\n  public developmentMode: boolean = true;\n  public HEADERS_KEYS_MAPPING_ALICE = { \n    \"language\": \"X-CGD-APP-LANGUAGE\", \n    \"requestId\": \"X-CGD-APP-Bot-Request-Id\" \n  };\n\n  constructor(\n    public http: HTTP,\n    public env: EnvironmentService,\n    public utils: UtilsService\n  ) { }\n\n  private getHeaders = function (fromAgentifai: boolean, agentifaiHeaders?: any): any {\n    let headers = {\n      \"X-CGD-APP-Device\": this.env.deviceType,\n      \"X-CGD-APP-Version\": this.env.appVersion,\n      \"X-CGD-APP-LANGUAGE\": this.env.languageCode,\n      \"X-CGD-APP-Name\": this.env.APPNAME\n    };\n\n    if (this.env.isDeviceRooted) {\n      headers[\"X-CGD-APP-Possibly-Rooted\"] = this.env.isDeviceRooted.toString();\n    }\n\n    if (fromAgentifai) {\n      headers[\"X-CGD-APP-Bot\"] = fromAgentifai.toString();\n\n      if (agentifaiHeaders != null) {\n        if (agentifaiHeaders['requestId']) {\n          headers[\"X-CGD-APP-Bot-Request-Id\"] = agentifaiHeaders['requestId'];\n        }\n\n        if (agentifaiHeaders[\"language\"]) {\n          headers[\"X-CGD-APP-LANGUAGE\"] = agentifaiHeaders['language'];\n        }\n      }\n    }\n\n    return headers;\n  }\n\n  private getHeadersAuthorization = function (value: string, fromAgentifai: boolean, agentifaiHeaders: any): any {\n    let headers = this.getHeaders(fromAgentifai, agentifaiHeaders);\n\n    headers[\"Authorization\"] = value;\n\n    return headers;\n  }\n\n  public getHeadersAlice = function() {\n    return this.getHeaders(true);\n  }\n\n  //////////////////////////\n  ///// PUBLIC METHODS /////\n  //////////////////////////\n\n  ///// LOGIN /////\n\n  postLogin(auth: any, serviceUrl: string, isFingerPrint?: boolean, loyaltyCode?: string): Observable<any> {\n    let headers = this.getHeadersAuthorization(\"Basic \" + auth, false, null);\n\n    if (loyaltyCode) {\n      headers[\"X-CGD-APP-LOYALTY-CODE\"] = loyaltyCode;\n    }\n\n    let endpoint = this.createUrl(serviceUrl);\n\n    if (this.developmentMode) {\n      console.log(\"POST \" + endpoint);\n      console.log(\"HEADERS: \" + JSON.stringify(headers));\n    }\n\n    this.http.clearCookies();\n    this.http.setDataSerializer(\"json\");\n\n    return from(this.http.post(endpoint, {}, headers).then((resp) => {\n      if (resp && resp.data) {\n        let data = JSON.parse(resp.data);\n\n        return { headers: resp.headers, data: data };\n      } else {\n        return resp;\n      }\n    }, (err) => {\n      if (isFingerPrint) {\n        this.utils.handleError({ error: { error: err, isLogin: true, isFingerPrint: true } });\n        throw err;\n      } else {\n        this.utils.handleError({ error: { error: err, isLogin: true } });\n        throw err;\n      }\n\n    }));\n  }\n\n  ///// PUBLIC GET /////\n\n  genericGetMethod(serviceUrl: string, notEncodeUrl?: boolean): Observable<any> {\n    return this.genericGetMethodInternal(serviceUrl, false, null, notEncodeUrl);\n  }\n\n  genericGetMethodAgentifai(serviceUrl: string, agentifaiHeaders: any, notEncodeUrl?: boolean): Observable<any> {\n    return this.genericGetMethodInternal(serviceUrl, true, agentifaiHeaders, notEncodeUrl);\n  }\n\n  private genericGetMethodInternal(serviceUrl: string, fromAgentifai: boolean, agentifaiHeaders: any, notEncodeUrl?: boolean): Observable<any> {\n    let url = encodeURI(serviceUrl);\n\n    if (notEncodeUrl) {\n      url = serviceUrl;\n    }\n\n    let headers = this.getHeaders(fromAgentifai, agentifaiHeaders);\n\n    let endpoint = this.createUrl(url);\n    if (this.developmentMode) {\n      console.log(\"GET \" + endpoint);\n      console.log(\"HEADERS: \" + JSON.stringify(headers));\n    }\n\n    this.http.setDataSerializer(\"json\");\n\n    return from(this.http.get(endpoint, null, headers).then(resp => {\n      if (resp && resp.data && !fromAgentifai) {\n        return JSON.parse(resp.data);\n      } else {\n        return resp;\n      }\n    }, (err) => {\n      this.utils.handleError({ error: { error: err } });\n      throw err;\n    }));\n  }\n\n  ///// PUBLIC GET WITH SPECIFIC LANGUAGE /////\n\n  genericGetMethodWithLanguage(serviceUrl: string, languageCode: string, notEncodeUrl?: boolean): Observable<any> {\n    let url = encodeURI(serviceUrl);\n\n    if (notEncodeUrl) {\n      url = serviceUrl;\n    }\n\n    let headers = this.getHeaders(false, null);\n\n    // force language header with value received\n    headers[\"X-CGD-APP-LANGUAGE\"] = languageCode;\n\n    let endpoint = this.createUrl(url);\n\n    if (this.developmentMode) {\n      console.log(\"GET \" + endpoint);\n      console.log(\"HEADERS: \" + JSON.stringify(headers));\n    }\n\n    this.http.setDataSerializer(\"json\");\n\n    return from(this.http.get(endpoint, null, headers).then(resp => {\n      if (resp && resp.data) {\n        return JSON.parse(resp.data);\n      } else {\n        return resp;\n      }\n    }, (err) => {\n      this.utils.handleError({ error: { error: err } });\n      throw err;\n    }));\n  }\n\n  ///// PUBLIC POST WITH INPUT /////\n\n  genericPostMethodWithInput(input: any, serviceUrl: string): Observable<any> {\n    return this.genericPostMethodWithInputInternal(input, serviceUrl, false, null);\n  }\n\n  genericPostMethodWithInputAgentifai(input: any, serviceUrl: string, agentifaiHeaders: any): Observable<any> {\n    return this.genericPostMethodWithInputInternal(input, serviceUrl, true, agentifaiHeaders);\n  }\n\n  private genericPostMethodWithInputInternal(input: any, serviceUrl: string, fromAgentifai: boolean, agentifaiHeaders: any): Observable<any> {\n    let headers = this.getHeaders(fromAgentifai, agentifaiHeaders);\n    var payload = input != null ? input : {};\n\n    let endpoint = this.createUrl(serviceUrl);\n\n    if (this.developmentMode) {\n      console.log(\"POST \" + endpoint);\n      console.log(\"HEADERS: \" + JSON.stringify(headers));\n      console.log(\"BODY: \" + JSON.stringify(payload));\n    }\n\n    this.http.setDataSerializer(\"json\");\n\n    return from(this.http.post(endpoint, payload, headers).then(resp => {\n      this.utils.APPSetTimeout();\n      if (resp && resp.data && !fromAgentifai) {\n        return JSON.parse(resp.data);\n      } else {\n        return resp;\n      }\n    }, (err) => {\n      this.utils.handleError({ error: { error: err } });\n      throw err;\n    }));\n  }\n\n\n  /////////////////////////////////\n  ///// AUTHENTICATED METHODS /////\n  /////////////////////////////////\n\n  ///// AUTHENTICATED GET /////\n\n  genericGetAuthenticatedMethod(serviceUrl: string, notEncodeUrl?: boolean, credential?: Credential): Observable<any> {\n    return this.genericGetAuthenticatedMethodInternal(serviceUrl, false, null, notEncodeUrl, credential);\n  }\n\n  genericGetAuthenticatedMethodAgentifai(serviceUrl: string, agentifaiHeaders: any, notEncodeUrl?: boolean, credential?: Credential): Observable<any> {\n    return this.genericGetAuthenticatedMethodInternal(serviceUrl, true, agentifaiHeaders, notEncodeUrl, credential);\n  }\n\n  private genericGetAuthenticatedMethodInternal(serviceUrl: string, fromAgentifai: boolean, agentifaiHeaders: any, notEncodeUrl?: boolean, credential?: Credential): Observable<any> {\n    if (credential == null) {\n      this.utils.resetCredentials();\n    }\n    let url = encodeURI(serviceUrl);\n\n    if (notEncodeUrl) {\n      url = serviceUrl;\n    }\n\n    let headers = null;\n\n    if (credential && credential.type) {\n      headers = this.getHeadersAuthorization(credential.type + \" \" + credential.value, fromAgentifai, agentifaiHeaders);\n    } else {\n      headers = this.getHeaders(fromAgentifai, agentifaiHeaders);\n    }\n\n    let endpoint = this.createUrl(url);\n\n    if (this.developmentMode) {\n      console.log(\"GET \" + endpoint);\n      console.log(\"HEADERS: \" + JSON.stringify(headers));\n    }\n\n    this.http.setDataSerializer(\"json\");\n    this.http.setRequestTimeout(300000);\n\n    return from(this.http.get(endpoint, {}, headers).then(resp => {\n      this.utils.APPSetTimeout();\n      if (resp && resp.data && !fromAgentifai) {\n        return JSON.parse(resp.data);\n      } else {\n        return resp;\n      }\n    }, (err) => {\n      this.utils.handleError({ error: { error: err } });\n      throw err;\n    }));\n  }\n\n  ///// AUTHENTICATED POST /////\n\n  genericPostAuthenticatedMethod(serviceUrl: string): Observable<any> {\n    return this.genericPostAuthenticatedMethodInternal(serviceUrl, false, null);\n  }\n\n  genericPostAuthenticatedMethodAgentifai(serviceUrl: string, agentifaiHeaders: any): Observable<any> {\n    return this.genericPostAuthenticatedMethodInternal(serviceUrl, true, agentifaiHeaders);\n  }\n\n  private genericPostAuthenticatedMethodInternal(serviceUrl: string, fromAgentifai: boolean, agentifaiHeaders: any): Observable<any> {\n    let headers = this.getHeaders(fromAgentifai, agentifaiHeaders);\n    let endpoint = this.createUrl(serviceUrl);\n\n    if (this.developmentMode) {\n      console.log(\"POST \" + endpoint);\n      console.log(\"HEADERS: \" + JSON.stringify(headers));\n    }\n\n    this.http.setDataSerializer(\"json\");\n\n    return from(this.http.post(endpoint, {}, headers).then(resp => {\n      this.utils.APPSetTimeout();\n\n      if (resp && resp.data && !fromAgentifai) {\n        return JSON.parse(resp.data);\n      } else {\n        return resp;\n      }\n    }, (err) => {\n      this.utils.handleError({ error: { error: err } });\n      throw err;\n    }));\n  }\n\n  ///// AUTHENTICATED POST WITH INPUT /////\n\n  genericPostAuthenticatedMethodWithInput(input: any, serviceUrl: string, credential?: Credential): Observable<any> {\n    return this.genericPostAuthenticatedMethodWithInputInternal(input, serviceUrl, false, null, credential);\n  }\n\n  genericPostAuthenticatedMethodWithInputAgentifai(input: any, serviceUrl: string, agentifaiHeaders: any, credential?: Credential): Observable<any> {\n    return this.genericPostAuthenticatedMethodWithInputInternal(input, serviceUrl, true, agentifaiHeaders, credential);\n  }\n\n  private genericPostAuthenticatedMethodWithInputInternal(input: any, serviceUrl: string, fromAgentifai: boolean, agentifaiHeaders: any, credential?: Credential): Observable<any> {\n    if (credential == null) {\n      this.utils.resetCredentials();\n    }\n\n    let headers = null;\n\n    if (credential && credential.type) {\n      headers = this.getHeadersAuthorization(credential.type + \" \" + credential.value, fromAgentifai, agentifaiHeaders);\n    } else {\n      headers = this.getHeaders(fromAgentifai, agentifaiHeaders);\n    }\n\n    var payload = input != null ? input : {};\n    let endpoint = this.createUrl(serviceUrl);\n\n    if (this.developmentMode) {\n      console.log(\"POST \" + endpoint);\n      console.log(\"HEADERS: \" + JSON.stringify(headers));\n      console.log(\"BODY: \" + JSON.stringify(payload));\n    }\n\n    this.http.setDataSerializer(\"json\");\n    this.http.setRequestTimeout(300000);\n\n    return from(this.http.post(endpoint, payload, headers)\n      .then(resp => {\n        this.utils.APPSetTimeout();\n        if (resp && resp.data && !fromAgentifai) {\n          return JSON.parse(resp.data);\n        } else {\n          return resp;\n        }\n      }, (err) => {\n        this.utils.handleError({ error: { error: err } });\n        throw err;\n      }));\n  }\n\n  ///// AUTHENTICATED PUT /////\n\n  genericPutAuthenticatedMethod(serviceUrl: string): Observable<any> {\n    return this.genericPutAuthenticatedMethodInternal(serviceUrl, false, null);\n  }\n\n  genericPutAuthenticatedMethodAgentifai(serviceUrl: string, agentifaiHeaders: any): Observable<any> {\n    return this.genericPutAuthenticatedMethodInternal(serviceUrl, true, agentifaiHeaders);\n  }\n\n  private genericPutAuthenticatedMethodInternal(serviceUrl: string, fromAgentifai: boolean, agentifaiHeaders: any): Observable<any> {\n    let headers = this.getHeaders(fromAgentifai, agentifaiHeaders);\n    let endpoint = this.createUrl(serviceUrl);\n\n    if (this.developmentMode) {\n      console.log(\"PUT \" + endpoint);\n      console.log(\"HEADERS: \" + JSON.stringify(headers));\n    }\n\n    this.http.setDataSerializer(\"json\");\n\n    return from(this.http.put(endpoint, {}, headers).then(resp => {\n      this.utils.APPSetTimeout();\n      if (resp && resp.data && !fromAgentifai) {\n        return JSON.parse(resp.data);\n      } else {\n        return resp;\n      }\n    }, (err) => {\n      this.utils.handleError({ error: { error: err } });\n      throw err;\n    }));\n  }\n\n  ///// AUTHENTICATED PUT WITH INPUT /////\n\n  genericPutAuthenticatedMethodWithInput(input: any, serviceUrl: string): Observable<any> {\n    return this.genericPutAuthenticatedMethodWithInputInternal(input, serviceUrl, false, null);\n  }\n\n  genericPutAuthenticatedMethodWithInputAgentifai(input: any, serviceUrl: string, agentifaiHeaders: any): Observable<any> {\n    return this.genericPutAuthenticatedMethodWithInputInternal(input, serviceUrl, true, agentifaiHeaders);\n  }\n\n  private genericPutAuthenticatedMethodWithInputInternal(input: any, serviceUrl: string, fromAgentifai: boolean, agentifaiHeaders: any): Observable<any> {\n    let headers = this.getHeaders(fromAgentifai, agentifaiHeaders);\n    var payload = input != null ? input : {};\n\n    let endpoint = this.createUrl(serviceUrl);\n\n    if (this.developmentMode) {\n      console.log(\"PUT \" + endpoint);\n      console.log(\"HEADERS: \" + JSON.stringify(headers));\n      console.log(\"BODY: \" + JSON.stringify(payload));\n    }\n\n    this.http.setDataSerializer(\"json\");\n\n    return from(this.http.put(endpoint, payload, headers).then(resp => {\n      this.utils.APPSetTimeout();\n      if (resp && resp.data && !fromAgentifai) {\n        return JSON.parse(resp.data);\n      } else {\n        return resp;\n      }\n    }, (err) => {\n      this.utils.handleError({ error: { error: err } });\n      throw err;\n    }));\n  }\n\n  ///// AUTHENTICATED DELETE /////\n\n  genericDeleteAuthenticatedMethod(serviceUrl: string): Observable<any> {\n    return this.genericDeleteAuthenticatedMethodInternal(serviceUrl, false, null);\n  }\n\n  genericDeleteAuthenticatedMethodAgentifai(serviceUrl: string, agentifaiHeaders: any): Observable<any> {\n    return this.genericDeleteAuthenticatedMethodInternal(serviceUrl, true, agentifaiHeaders);\n  }\n\n  private genericDeleteAuthenticatedMethodInternal(serviceUrl: string, fromAgentifai: boolean, agentifaiHeaders: any): Observable<any> {\n    let headers = this.getHeaders(fromAgentifai, agentifaiHeaders);\n    let endpoint = this.createUrl(serviceUrl);\n\n    if (this.developmentMode) {\n      console.log(\"DELETE \" + endpoint);\n      console.log(\"HEADERS: \" + JSON.stringify(headers));\n    }\n\n    this.http.setDataSerializer(\"json\");\n\n    return from(this.http.delete(endpoint, null, headers).then(resp => {\n      this.utils.APPSetTimeout();\n      if (resp && resp.data && !fromAgentifai) {\n        return JSON.parse(resp.data);\n      } else {\n        return resp;\n      }\n    }, (err) => {\n      this.utils.handleError({ error: { error: err } });\n      throw err;\n    }));\n  }\n\n  ///// LOGOUT /////\n\n  deleteLogout(serviceUrl: string): Observable<any> {\n    return this.deleteLogoutInternal(serviceUrl, false, null);\n  }\n\n  deleteLogoutAgentifai(serviceUrl: string, agentifaiHeaders: any): Observable<any> {\n    return this.deleteLogoutInternal(serviceUrl, true, agentifaiHeaders);\n  }\n\n  private deleteLogoutInternal(serviceUrl: string, fromAgentifai: boolean, agentifaiHeaders: any): Observable<any> {\n    let headers = this.getHeaders(fromAgentifai, agentifaiHeaders);\n    let endpoint = this.createUrl(serviceUrl);\n\n    if (this.developmentMode) {\n      console.log(\"DELETE \" + endpoint);\n      console.log(\"HEADERS: \" + JSON.stringify(headers));\n    }\n\n    this.http.setDataSerializer(\"json\");\n\n    return from(this.http.delete(endpoint, null, headers).then(resp => {\n      if (resp && resp.data && !fromAgentifai) {\n        return JSON.parse(resp.data);\n      } else {\n        return resp;\n      }\n    }, (err) => {\n      this.utils.handleError({ error: { error: err } });\n      throw err;\n    }));\n  }\n\n  genericClearCookies() {\n    this.utils.APPClearTimeout();\n    if (!this.env.isBrowser) {\n      this.http.clearCookies();\n    }\n  }\n\n  private createUrl(endpoint: string) {\n    return InternalUtils.getBaseUrl() + endpoint;\n  }\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetCurrentCustomerContactsCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        \"body\\.contacts\\.[^.]+\\.(communicationMeans|contactType)(?:$|\\W)\"\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n\n        return service.getCustomerContacts(headers)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\n\nexport class AgentifaiResponse{\n    requestId: string;\n    success: Boolean;\n    result: WidgetResponse;\n\n    constructor(requestId: string, success: Boolean, result: WidgetResponse) {\n        this.requestId = requestId;\n        this.success = success;\n        this.result = result;\n    }\n}","import { Injectable } from '@angular/core';\nimport { EnvironmentService } from 'src/app/services/environment-service/environment-service.service';\nimport { StorageService } from 'src/app/services/storage/storage.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AssistantUtilsService {\n\n  constructor(\n    private environment: EnvironmentService,\n    private storage: StorageService\n  ) { }\n\n  resetDefaultConfig() {\n    const config = this.getDefaultAssistantConfig()\n    return this.setConfig(config.apiUrl, config.apiKey, config.settings)\n  }\n\n  getConfig() {\n    const apiUrl = this.getApiUrl()\n    const apiKey = this.getApiKey()\n    const settings = this.getSettings()\n\n    return Promise.all([apiUrl, apiKey, settings])\n  }\n\n  setConfig(apiUrl: string, apiKey: string, settings: any) {\n    return Promise.all([\n      this.storage.setApiUrl(apiUrl), \n      this.storage.setApiKey(apiKey),\n      this.storage.setSettings(settings)\n    ])\n  }\n\n  private getApiUrl(): Promise<string> {\n    const defaultApiUrl = this.getDefaultAssistantConfig().apiUrl\n\n    return new Promise((resolve, _) => {\n      this.storage.getApiUrl()\n        .then(result => {\n          if (result != null) {\n            resolve(result)\n          } else {\n            resolve(defaultApiUrl)\n          }\n        })\n        .catch(() => {\n          resolve(defaultApiUrl)\n        })\n    })\n  }\n\n  private getApiKey(): Promise<string> {\n    const defaultApiKey = this.getDefaultAssistantConfig().apiKey\n\n    return new Promise((resolve, _) => {\n      this.storage.getApiKey()\n        .then(result => {\n          if (result != null) {\n            resolve(result)\n          } else {\n            resolve(defaultApiKey)\n          }\n        })\n        .catch(() => {\n          resolve(defaultApiKey)\n        })\n    })\n  }\n\n  private getSettings(): Promise<any> {\n      const defaultSettings = this.getDefaultSettings()\n\n      return new Promise((resolve, _) => {\n        this.storage.getSettings()\n        .then(result => {\n          if(result != null) {\n            resolve(result)\n          } else {\n            resolve(defaultSettings)\n          }\n        })\n        .catch(() => {\n          resolve(defaultSettings)\n        })\n      })\n  }\n\n  private getDefaultAssistantConfig() {\n    return this.environment.getAgentifaiConfiguration();\n  }\n\n  private getDefaultSettings(): any {\n    return {\n      defaultTheme: \"light\",\n      themes: {\n        light: \"AssistantConfiguration.json\",\n        dark: \"AssistantConfigurationDark.json\"\n      }\n    }\n  }\n\n}\n","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\n\nexport class GetFrequentSEPATransfer implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        \"body\\.(operationName|operationId|amount)(?:$|\\W)\"\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const idFrequentOperation = this.request.getParameters()[\"idFrequentOperation\"];\n\n        return service.getFrequentSEPAoperation(headers, idFrequentOperation)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { CallbackSolicitationRequest } from 'src/app/models/operation/request/customers/CallbackSolicitationRequest';\n\nexport class SetCallback implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\"\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) {}\n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters = this.request.getParameters()\n        const request = this.createRequest(parameters);\n\n        return service.setCallback(headers, request)\n            .pipe(\n                map( resp => this.createSuccessResponse(resp) ),\n                catchError( error => this.createErrorResponse(error) )\n            )\n    }\n\n    private createRequest(parameters: any): CallbackSolicitationRequest {\n        const request = new CallbackSolicitationRequest();\n        request.availableDate = parameters.availableDate;\n        request.availableTime = parameters.availableTime;\n        request.coments = parameters.comments;\n        request.destinationTelephone = parameters.destinationTelephone;\n        request.destinationType = parameters.destinationType;\n        request.period = parameters.period;\n        request.subject = parameters.subject;\n        request.subjectKey = parameters.subjectKey;\n\n        if (parameters.subjectId) {\n            request.subjectId = parameters.subjectId;\n        }\n        \n        return request;\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","export class Scheduling {\n    startDate: string;\n    endDate: string;\n    frequencyType: string;\n    numberOfOperations: number;\n\n    constructor() {\n        this.startDate = '';\n        this.endDate = '';\n        this.frequencyType = null;\n        this.numberOfOperations = null;\n    }\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { AgentifaiRequestFactoryService } from 'src/app/services/agentifai/agentifai-request-factory.service';\nimport { MBWayPartnerAcceptTransferCGDAccountRequest } from 'src/app/models/operation/request/cards/MBWayPartnerAcceptTransferCGDAccountRequest';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\n\nexport class UpdateTransferConsentForCgdAccountCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        `body\\.(operationId|operationStatus|${Anonymization.scheduling()})`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private requestFactory: AgentifaiRequestFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters = this.request.getParameters()\n        const request = this.createRequest(parameters);\n\n        return service.acceptTransferCGD(headers, request)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createRequest(parameters: any): MBWayPartnerAcceptTransferCGDAccountRequest {\n        const request = new MBWayPartnerAcceptTransferCGDAccountRequest();\n        request.operationId = parseInt(parameters.operationId);\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation;\n        request.acceptedTransferCGD = parameters.acceptedTransferCGD;\n        request.scheduling = this.requestFactory.createScheduling(parameters);\n\n        return request;\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetTermsAndConditionsConsentCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizablePathRegex: String[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n\n        return service.getVoiceTreatmentConsent(headers)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizablePathRegex)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegex)\n        )\n    }\n\n}","import { GenericOperationRequest } from '../GenericOperationRequest'\n\nexport class CredentialUnlockAnswersRequest extends GenericOperationRequest {\n\n    answers: string[];\n    contractNumber: string;\n\n    constructor() {\n        super();\n        this.answers = [];\n        this.contractNumber = \"\";\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { AgentifaiUtils } from 'src/app/agentifai/utils/agentifai-utils'\nimport { AgentifaiCardsTransformerService } from 'src/app/services/agentifai/agentifai-cards-transformer.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { CardsUtils } from 'src/app/agentifai/commands/cards/cards-utils';\n\nexport class GetCardsGeneralData implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        \"body\\.(\"\n            + \"((cardAccounts\\.[^.]+)|defaultCardAccount)\\.(\"\n                + \"currency|type|cardCodeType|statementIssueDateDescription|\"\n                + \"statementPaymentLimitDescription|productImageUrl|\"\n                + `cards\\.[^.]+\\.(${CardsUtils.nonAnonymizedCardProperties}))`\n            + \"|defaultCardAccountBalances\\.availableCredit)\"\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private transformer: AgentifaiCardsTransformerService\n    ) {}\n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters = this.request.getParameters()\n        const cardAccountId = parameters[\"cardAccountId\"];\n        const targetCardOperationType = parameters[\"targetCardOperationType\"];\n        const omitTransactionsInResponse = parameters[\"omitTransactionsInResponse\"];\n\n        return service.getCardsGeneralData(headers, cardAccountId, targetCardOperationType, omitTransactionsInResponse)\n            .pipe(\n                map( resp => this.createSuccessResponse(resp) ),\n                catchError( error => this.createErrorResponse(error) )\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        var transformedResponse = this.transformResponse(response);\n        return this.createResponse(transformedResponse, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n    private transformResponse(response: any): any {\n        var data = AgentifaiUtils.mapFromString(response.data);\n        \n        if (data != null) {\n            data = this.transformer.addCardsGeneralDataProperties(data);\n        }\n\n        response.data = data;\n\n        return response;\n    }\n\n}","import { GenericOperationRequest } from 'src/app/models/operation/request/GenericOperationRequest'\nimport { Charges } from 'src/app/models/operation/Charges';\n\nexport class TransferSEPARequest extends GenericOperationRequest {\n\n\n    charges: Charges[];\n    sourceAccount: any;\n    destinationAccount: any;\n    amount: any;\n    currency: string;\n    description: string;\n    additionalInfo: string;\n    destinationName: string;\n    finality: string;\n    comment: string;\n    urgent: boolean;\n    commissionFee: number;\n    stampDuty: number;\n    warningCharge: number;\n    warningVAT: number;\n    chargesSum: number;\n    chargesSumCurrency: string;\n\n    constructor() {\n        super();\n       \n        this.charges = [new Charges()];\n        this.sourceAccount = '';\n        this.destinationAccount = '';\n        this.amount = '';\n        this.currency = '';\n        this.description = '';\n        this.additionalInfo = '';\n        this.destinationName = '';\n        this.finality = '';\n        this.comment = '';\n        this.urgent = false;\n        this.commissionFee = null;\n        this.stampDuty = null;\n        this.warningCharge = null;\n        this.warningVAT = null;\n        this.chargesSum = null;\n        this.chargesSumCurrency = '';\n\n    }\n\n    get getSourceAccount(): any {\n        return this.sourceAccount;\n    }\n\n    set setSourceAccount(sourceAccount: any) {\n        this.sourceAccount = sourceAccount;\n    }\n\n    get getDestinationAccount(): any {\n        return this.destinationAccount;\n    }\n\n    set setDestinationAccount(destinationAccount: any) {\n        this.destinationAccount = destinationAccount;\n    }\n\n    get getAmount(): any {\n        return this.amount;\n    }\n\n    set setAmount(amount: any) {\n        this.amount = amount;\n    }\n\n    get getCurrency(): any {\n        return this.currency;\n    }\n\n    set setCurrency(currency: any) {\n        this.currency = currency;\n    }\n\n    get getDescription(): string {\n        return this.description;\n    }\n\n    set setDescription(description: string) {\n        this.description = description;\n    }\n\n    get getAdditionalInfo(): string {\n        return this.additionalInfo;\n    }\n\n    set setAdditionalInfo(additionalInfo: string) {\n        this.additionalInfo = additionalInfo;\n    }\n\n    get getDestinationName(): string {\n        return this.destinationName;\n    }\n\n    set setDestinationName(destinationName: string) {\n        this.destinationName = destinationName;\n    }\n\n    get getFinality(): string {\n        return this.finality;\n    }\n\n    set setFinality(finality: string) {\n        this.finality = finality;\n    }\n\n    get getComment(): string {\n        return this.comment;\n    }\n\n    set setComment(comment: string) {\n        this.comment = comment;\n    }\n\n    get getUrgent(): boolean {\n        return this.urgent;\n    }\n\n    set setUrgent(urgent: boolean) {\n        this.urgent = urgent;\n    }\n\n    get getCommissionFee(): number {\n        return this.commissionFee;\n    }\n\n    set setCommissionFee(commissionFee: number) {\n        this.commissionFee = commissionFee;\n    }\n\n    get getStampDuty(): number {\n        return this.stampDuty;\n    }\n\n    set setStampDuty(stampDuty: number) {\n        this.stampDuty = stampDuty;\n    }\n\n    get getWarningCharge(): number {\n        return this.warningCharge;\n    }\n\n    set setWarningCharge(warningCharge: number) {\n        this.warningCharge = warningCharge;\n    }\n\n    get getWarningVAT(): number {\n        return this.warningVAT;\n    }\n\n    set setWarningVAT(warningVAT: number) {\n        this.warningVAT = warningVAT;\n    }\n\n    get getChargesSum(): number {\n        return this.chargesSum;\n    }\n\n    set setChargesSum(chargesSum: number) {\n        this.chargesSum = chargesSum;\n    }\n\n    get getChargesSumCurrency(): string {\n        return this.chargesSumCurrency;\n    }\n\n    set setChargesSumCurrency(chargesSumCurrency: string) {\n        this.chargesSumCurrency = chargesSumCurrency;\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { map, catchError } from 'rxjs/operators';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetSmsTokenPhoneNumber implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\"\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) {}\n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n\n        return service.getContactSmsToken(headers)\n            .pipe(\n                map( resp => this.createSuccessResponse(resp) ),\n                catchError( error => this.createErrorResponse(error) )\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n    \n}","import { NgModule } from '@angular/core';\nimport { PreloadAllModules, RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: 'home',\n    loadChildren: () => import('./home/home.module').then( m => m.HomePageModule)\n  },\n  {\n    path: '',\n    redirectTo: 'home',\n    pathMatch: 'full'\n  },\n  {\n    path: 'second-page',\n    loadChildren: () => import('./second-page/second-page.module').then( m => m.SecondPagePageModule)\n  },\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(routes, { preloadingStrategy: PreloadAllModules })\n  ],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { GenericOperationRequest } from '../GenericOperationRequest';\r\n\r\nexport class CardPaymentRequest extends GenericOperationRequest {\r\n    sourceAccount: string;\r\n    amount: string;\r\n    currency: string;\r\n    destinationCardNumber: string;\r\n    cardPaymentType: string;\r\n    referenceNumber: number;\r\n    manuallyEnteredCardNumber: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { AgentifaiRequestFactoryService } from 'src/app/services/agentifai/agentifai-request-factory.service';\nimport { MBWayPartnerRequest } from 'src/app/models/operation/request/cards/MBWayPartnerRequest';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\n\nexport class SimulateMBWayAdhesionCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        `body\\.(operationId|operationStatus|${Anonymization.scheduling()})`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private requestFactory: AgentifaiRequestFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters = this.request.getParameters()\n        const request = this.createRequest(parameters);\n\n        return service.simulateAdhesionMbway(headers, request)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createRequest(parameters: any): MBWayPartnerRequest {\n        const request = new MBWayPartnerRequest();\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation;\n        request.phoneNumber = parameters.phoneNumber;\n        request.cardNumberMasked = parameters.cardNumberMasked;\n        request.amount = parameters.amount;\n        request.acceptedTransferCGD = parameters.acceptedTransferCGD;\n        request.scheduling = this.requestFactory.createScheduling(parameters);\n\n        return request;\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { AccountsUtils } from 'src/app/agentifai/commands/accounts/accounts-utils';\nimport { AgentifaiAccountsTransformerService } from 'src/app/services/agentifai/agentifai-accounts-transformer.service';\nimport { AgentifaiUtils } from 'src/app/agentifai/utils/agentifai-utils'\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetTransfersGeneralData implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        \"body\\.(\"\n        + \"frequentOperations\\.[^.]+\\.\"\n        + \"(operationName|operationType|operationId|amount)\"\n        + \"|accounts\\.[^.]+\\.\"\n        + `(${AccountsUtils.nonAnonymizedAccountsProperties})`\n        + \")(?:$|\\W)\"\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private accountsTransformer: AgentifaiAccountsTransformerService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n\n        return service.getTransferPageData(headers, false)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        var transformedResponse = this.transformResponse(response);\n        return this.createResponse(transformedResponse, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n    private transformResponse(response: any): any {\n        const data = AgentifaiUtils.mapFromString(response.data);\n\n        if (data.accounts != null) {\n            data.accounts = this.accountsTransformer.transformAccounts(data.accounts);\n            response.data = data;\n        }\n\n        return response;\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { AgentifaiRequestFactoryService } from 'src/app/services/agentifai/agentifai-request-factory.service';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { UpdateClientInfoRequest } from 'src/app/models/customers/updateClientInfo/UpdateClientInfoRequest';\nimport { UpdateClientInformationUtils } from './update-client-information-utils';\n\nexport class SimulateUpdateClientInformation implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexesPathsSuccess: String[] = [\n        \"headers.+\",\n        \"status\",\n        `body\\.(operationId|operationStatus|${Anonymization.scheduling()})`\n    ]\n\n    private nonAnonymizableRegexesPathsError: String[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private requestFactory: AgentifaiRequestFactoryService,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters: any = this.request.getParameters()\n        const request = this.createRequest(parameters);\n\n        return service.simulateUpdateClientInfo(headers, request)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(resp => this.createErrorResponse(resp))\n            );\n    }\n\n    private createRequest(parameters: any): UpdateClientInfoRequest {\n        const request = new UpdateClientInfoRequest()\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation\n        request.finalityQAList = this.requestFactory.createGenericKeyValueList(parameters.finalityQAList)\n\n        if (parameters.address) {\n            request.address = UpdateClientInformationUtils.createAddress(parameters.address)\n        }\n\n        if (parameters.personal) {\n            request.personal = UpdateClientInformationUtils.createPersonal(parameters.personal)\n        }\n        \n        if (parameters.attachments) {\n            request.attachments = UpdateClientInformationUtils.createAttachments(parameters.attachments)\n        }\n        \n        if (parameters.professional) {\n            request.professional = UpdateClientInformationUtils.createProfessional(parameters.professional)\n        }\n\n        if (parameters.scheduling) {\n            request.scheduling = this.requestFactory.createScheduling(parameters)\n        }\n\n        return request;\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexesPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizableRegexesPathsError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiRequestFactoryService } from 'src/app/services/agentifai/agentifai-request-factory.service';\nimport { Credential } from 'src/app/models/operation/Credential';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { UpdateClientInfoRequest } from 'src/app/models/customers/updateClientInfo/UpdateClientInfoRequest';\nimport { UpdateClientInformationUtils } from './update-client-information-utils';\n\nexport class ExecuteUpdateClientInformation implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexesPathsSuccess: String[] = [\n        \"headers.+\",\n        \"status\",\n        `body\\.(operationId|operationStatus|${Anonymization.scheduling()})`\n    ]\n\n    private nonAnonymizableRegexesPathsError: String[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private requestFactory: AgentifaiRequestFactoryService,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters = this.request.getParameters()\n        const request = this.createRequest(parameters)\n        const credential = this.createCredentials(parameters)\n\n        return service.executeUpdateClientInfo(headers, request, credential)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(resp => this.createErrorResponse(resp))\n            );\n    }\n\n    private createRequest(parameters: any): UpdateClientInfoRequest {\n        const request = new UpdateClientInfoRequest()\n        request.operationId = parameters.operationId\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation\n        request.finalityQAList = this.requestFactory.createGenericKeyValueList(parameters.finalityQAList)\n\n        if (parameters.address) {\n            request.address = UpdateClientInformationUtils.createAddress(parameters.address)\n        }\n\n        if (parameters.personal) {\n            request.personal = UpdateClientInformationUtils.createPersonal(parameters.personal)\n        }\n        \n        if (parameters.attachments) {\n            request.attachments = UpdateClientInformationUtils.createAttachments(parameters.attachments)\n        }\n        \n        if (parameters.professional) {\n            request.professional = UpdateClientInformationUtils.createProfessional(parameters.professional)\n        }\n\n        if (parameters.scheduling) {\n            request.scheduling = this.requestFactory.createScheduling(parameters)\n        }\n\n        if (parameters.scheduling) {\n            request.scheduling = this.requestFactory.createScheduling(parameters)\n        }\n\n        return request;\n    }\n\n    private createCredentials(parameters: any): Credential {\n        return this.requestFactory.createCredentials(parameters);\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexesPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizableRegexesPathsError)\n        )\n    }\n\n}","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJhcHAuY29tcG9uZW50LnNjc3MifQ== */\";","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { AgentifaiRequestFactoryService } from 'src/app/services/agentifai/agentifai-request-factory.service';\nimport { MBWayPartnerRequest } from 'src/app/models/operation/request/cards/MBWayPartnerRequest';\nimport { Credential } from 'src/app/models/operation/Credential';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\n\nexport class ExecuteMBWayAdhesionCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        `body\\.(operationId|operationStatus|${Anonymization.scheduling()})`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private requestFactory: AgentifaiRequestFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters = this.request.getParameters()\n        const request = this.createRequest(parameters);\n        const credential = this.createCredentials(parameters);\n\n        return service.executeAdhesionMbway(headers, request, credential)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createRequest(parameters: any): MBWayPartnerRequest {\n        const request = new MBWayPartnerRequest();\n        request.operationId = parseInt(parameters.operationId);\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation;\n        request.phoneNumber = parameters.phoneNumber;\n        request.cardNumberMasked = parameters.cardNumberMasked;\n        request.amount = parameters.amount;\n        request.acceptedTransferCGD = parameters.acceptedTransferCGD;\n        request.scheduling = this.requestFactory.createScheduling(parameters);\n\n        return request;\n    }\n\n    private createCredentials(parameters: any): Credential {\n        return this.requestFactory.createCredentials(parameters);\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { ResponseEvent } from 'src/app/agentifai/models/agentifai-response-event';\n\nexport class WidgetResponse {\n    data: ResponseEvent;\n    nonAnonymizableRegexPaths: Array<String>;\n\n    constructor(data: ResponseEvent, nonAnonymizableRegexPaths: String[]) {\n        this.data = data;\n        this.nonAnonymizableRegexPaths = nonAnonymizableRegexPaths;\n    }\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiRequestFactoryService } from 'src/app/services/agentifai/agentifai-request-factory.service';\nimport { ConsumerLoanAdhesionRequest } from 'src/app/models/operation/request/loans/ConsumerLoanAdhesionRequest';\nimport { GenericPersonalCreditWorkElement } from 'src/app/models/operation/request/loans/GenericPersonalCreditWorkElement';\n\nexport class SimulatePersonalLoanAdhesion implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        String.raw`^body\\.(operationId|success|errorMessage|simulationDate|amountMin|amountMax)$`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private requestFactory: AgentifaiRequestFactoryService,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters = this.request.getParameters()\n        const request = this.createRequest(parameters)\n\n        return service.simulateLoanRequest(headers, request)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createRequest(parameters: any): ConsumerLoanAdhesionRequest {\n        const request = new ConsumerLoanAdhesionRequest()\n\n        if (parameters.operationId != null) {\n            request.operationId = parseInt(parameters.operationId)\n        }\n\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation\n        request.scheduling = this.requestFactory.createScheduling(parameters)\n        request.currency = parameters.currency\n        request.targetAmount = parseInt(parameters.targetAmount)\n        request.periodMonths = parseInt(parameters.periodMonths)\n        request.includeDocuments = parameters.includeDocuments\n        request.fullKeyToAccount = parameters.fullKeyToAccount\n\n        if (parameters.profession != null) {\n            const profession = new GenericPersonalCreditWorkElement()\n            profession.cod = parameters.profession.cod\n            profession.description = parameters.profession.description\n            request.profissao = profession\n        }\n\n        if (parameters.jobSector != null) {\n            const jobSector = new GenericPersonalCreditWorkElement()\n            jobSector.cod = parameters.jobSector.cod\n            jobSector.description = parameters.jobSector.description\n            request.sector = jobSector\n        }\n\n        if (parameters.jobType != null) {\n            const jobType = new GenericPersonalCreditWorkElement()\n            jobType.cod = parameters.jobType.cod\n            jobType.description = parameters.jobType.description\n            request.trabalho = jobType\n        }\n\n        if (parameters.contractType != null) {\n            const contractType = new GenericPersonalCreditWorkElement()\n            contractType.cod = parameters.contractType.cod\n            contractType.description = parameters.contractType.description\n            request.contrato = contractType\n        }\n\n        if (parameters.jobServiceTime != null) {\n            request.antiguidade = parseInt(parameters.jobServiceTime)\n        }\n\n        request.codigoIRS = parameters.irsCode\n\n        if (parameters.grossIncome != null) {\n            request.rendimentoBruto = parseInt(parameters.grossIncome)\n        }\n\n        if (parameters.netIncome != null) {\n            request.rendimentoLiquido = parseInt(parameters.netIncome)\n        }\n\n        if (parameters.monthlyExpenses != null) {\n            request.encargosMensais = parseInt(parameters.monthlyExpenses)\n        }\n\n        if (parameters.householdExpenses != null) {\n            request.despesasFamiliares = parseInt(parameters.householdExpenses)\n        }\n\n        if (parameters.householdMembers != null) {\n            request.nrAgregado = parseInt(parameters.householdMembers)\n        }\n\n        request.prestacao = parameters.installment\n\n        request.defaultSimulation = parameters.defaultSimulation\n\n        return request;\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiRequestFactoryService } from 'src/app/services/agentifai/agentifai-request-factory.service';\nimport { TransferSEPARequest } from 'src/app/models/operation/request/transfers/TransferSEPARequest';\nimport { Credential } from 'src/app/models/operation/Credential';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\n\nexport class ExecuteSEPATransferCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexesPathsSuccess: String[] = [\n        \"headers.+\",\n        \"status\",\n        `body\\.(operationId|operationStatus|charges[.].*|${Anonymization.scheduling()})`\n    ]\n\n    private nonAnonymizableRegexesPathsError: String[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private requestFactory: AgentifaiRequestFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters: any = this.request.getParameters()\n        const request = this.createRequest(parameters);\n        const credential = this.createCredentials(parameters);\n\n        return service.executeSepaTransfer(headers, request, credential)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(resp => this.createErrorResponse(resp))\n            );\n    }\n\n    private createRequest(parameters: any): TransferSEPARequest {\n        const request = new TransferSEPARequest();\n        request.operationId = parameters.operationId;\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation;\n        request.sourceAccount = parameters.sourceAccount;\n        request.destinationAccount = parameters.destinationAccount;\n        request.amount = parameters.amount;\n        request.currency = parameters.currency;\n        request.description = parameters.description;\n        request.destinationName = parameters.destinationName;\n        request.urgent = parameters.urgent;\n        request.charges = parameters.charges;\n        request.commissionFee = parseInt(parameters.commissionFee);\n        request.stampDuty = parseInt(parameters.stampDuty);\n        request.warningCharge = parseInt(parameters.warningCharge);\n        request.warningVAT = parseInt(parameters.warningVAT);\n        request.chargesSum = parseInt(parameters.chargesSum);\n        request.scheduling = this.requestFactory.createScheduling(parameters);\n\n        return request;\n    }\n\n    private createCredentials(parameters: any): Credential {\n        return this.requestFactory.createCredentials(parameters);\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexesPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizableRegexesPathsError)\n        )\n    }\n\n}","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { OperationProofByEmailRequest } from 'src/app/models/operation/OperationProofByEmailRequest';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\n\nexport class SendOperationProofCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\"\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters = this.request.getParameters()\n        const operationId = Number(parameters[\"operationId\"]);\n        const proofRequest = this.createOperationProofRequest(parameters);\n\n        return service.sendOperationProofByEmail(headers, operationId, proofRequest)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n    private createOperationProofRequest(parameters: any): OperationProofByEmailRequest {\n        const proofRequest = new OperationProofByEmailRequest();\n        proofRequest.targetEmail = parameters.targetEmail;\n        proofRequest.targetCCEmail = parameters.targetCCEmail;\n        proofRequest.emailSubject = parameters.emailSubject;\n        return proofRequest;\n    }\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetShowcaseCards implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        String.raw`(name|descriptionHtml|otherInfo)$`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) {}\n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders();\n\n        return service.getShowcaseCards(headers)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { AccountsUtils } from 'src/app/agentifai/commands/accounts/accounts-utils';\nimport { AgentifaiUtils } from 'src/app/agentifai/utils/agentifai-utils';\nimport { AgentifaiAccountsTransformerService } from 'src/app/services/agentifai/agentifai-accounts-transformer.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetImmediateTransferAccountsCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexesPathsuccess: String[] = [\n        \"headers.+\",\n        \"status\",\n        \"body\\.(\"\n        + `defaultAccount\\.(${AccountsUtils.nonAnonymizedAccountsProperties})`\n        + `|accounts\\.[^.]+\\.(${AccountsUtils.nonAnonymizedAccountsProperties})`\n        + \")(?:$|\\W)\"\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private transformer: AgentifaiAccountsTransformerService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n\n        return service.getAccountsForImmediateTransfers(headers)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        var transformedResponse = this.transformResponse(response);\n        return this.createResponse(transformedResponse, true, this.nonAnonymizableRegexesPathsuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n    private transformResponse(response: any): any {\n        const data = AgentifaiUtils.mapFromString(response.data);\n\n        if (data.defaultAccount != null && data.accounts != null) {\n            data.accounts = this.transformer.transformAccounts(data.accounts);\n            data.defaultAccount = this.transformer.transformAccount(data.defaultAccount);\n\n            response.data = data;\n        }\n\n        return response;\n    }\n\n}"],"sourceRoot":"webpack:///"}