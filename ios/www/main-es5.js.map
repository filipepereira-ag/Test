{"version":3,"sources":["webpack:///src/app/models/operation/Credential.ts","webpack:///src/app/agentifai/commands/cards/payment/execute-card-payment.ts","webpack:///src/app/agentifai/commands/cards/acquisition/init-new-credit-card.ts","webpack:///src/app/services/agentifai/agentifai-manager.service.ts","webpack:///src/app/agentifai/commands/terms-and-conditions/consent-terms-and-conditions.ts","webpack:///src/app/agentifai/commands/loans/get-personal-loan-general-data.ts","webpack:///src/app/agentifai/commands/credentialsmanagement/matrixactivation/simulate-activate-matrix.ts","webpack:///src/app/models/operation/request/payments/ServicePaymentRequest.ts","webpack:///src/app/agentifai/commands/accounts/get-account-balances.ts","webpack:///src/app/models/operation/Charges.ts","webpack:///src/app/models/operation/request/loans/GenericPersonalCreditWorkElement.ts","webpack:///src/app/agentifai/commands/callback/get-customer-manager.ts","webpack:///src/app/agentifai/commands/cards/acquisition/get-card-adhesion-accounts.ts","webpack:///src/app/agentifai/commands/customers/update-client-information/get-update-client-information-list.ts","webpack:///src/app/agentifai/commands/payments/services/execute-service-payment.ts","webpack:///src/app/models/operation/request/loans/ConsumerLoanAdhesionRequest.ts","webpack:///src/app/agentifai/commands/cards/acquisition/get-showcase-product-document.ts","webpack:///src/app/agentifai/commands/customers/update-client-information/get-update-client-information-address.ts","webpack:///src/app/models/cardMatrix/MatrixActivateSimExe.ts","webpack:///src/app/models/operation/request/customers/GetContractNumberQuestionsRequest.ts","webpack:///src/app/agentifai/commands/cards/payment/simulate-card-payment.ts","webpack:///src/app/agentifai/commands/unlock-credentials/unlock-credentials.ts","webpack:///src/app/models/operation/request/customers/CallbackSolicitationRequest.ts","webpack:///src/app/agentifai/models/agentifai-response-event.ts","webpack:///src/app/agentifai/commands/payments/services/get-frequent-service-payment.ts","webpack:///src/app/agentifai/commands/transfers/get-transfer-type-validation.ts","webpack:///src/app/agentifai/commands/customers/update-client-information/update-client-information-utils.ts","webpack:///src/app/models/operation/request/GenericOperationRequest.ts","webpack:///src/environments/environment.ts","webpack:///src/app/agentifai/commands/unlock-contract-number/get-contract-number-unlock-questions.ts","webpack:///src/app/agentifai/commands/payments/services/simulate-service-payment.ts","webpack:///src/app/models/operation/request/customers/GetContractNumberAnswersRequest.ts","webpack:///src/app/agentifai/commands/customers/update-client-information/get-update-client-information-personal.ts","webpack:///src/app/services/storage/storage.service.ts","webpack:///src/app/agentifai/commands/unlock-credentials/get-credential-unlock-questions.ts","webpack:///src/app/agentifai/utils/agentifai-utils.ts","webpack:///src/app/agentifai/commands/payments/telecommunications/get-telecommunicaition-configurations.ts","webpack:///src/app/services/agentifai/agentifai-cards-transformer.service.ts","webpack:///src/app/models/operation/request/customers/CredentialUnlockQuestionsRequest.ts","webpack:///src/app/agentifai/commands/credentialsmanagement/credentials-management-utils.ts","webpack:///src/app/agentifai/commands/credentialsmanagement/matrixrequisition/get-matrix-config.ts","webpack:///src/app/models/operation/request/cards/MBWayPartnerAcceptTransferCGDAccountRequest.ts","webpack:///src/app/models/operation/request/transfers/TransferInternalRequest.ts","webpack:///src/app/agentifai/commands/content/disable-banner-page.ts","webpack:///src/app/services/utils/utils.service.ts","webpack:///src/app/services/agentifai/agentifai-command-factory.service.ts","webpack:///src/app/agentifai/commands/credentialsmanagement/matrixrequisition/simulate-matrix-requisition.ts","webpack:///src/app/agentifai/commands/mbway/get-mbway-cards.ts","webpack:///src/app/agentifai/commands/content/get-private-content.ts","webpack:///src/app/agentifai/commands/operation-proof/get-operation-proof.ts","webpack:///src/app/services/agentifai/agentifai-services.service.ts","webpack:///src/app/agentifai/commands/credentialsmanagement/matrixrequisition/execute-matrix-requisition.ts","webpack:///src/app/agentifai/commands/customers/update-client-information/get-update-client-information-professional.ts","webpack:///src/app/services/agentifai/agentifai-response-factory.service.ts","webpack:///src/app/models/operation/OperationProofByEmailRequest.ts","webpack:///src/app/agentifai/commands/accounts/get-accounts.ts","webpack:///src/app/agentifai/commands/transfers/internal/simulate-internal-transfer.ts","webpack:///src/app/services/agentifai/agentifai-accounts-transformer.service.ts","webpack:///src/app/agentifai/commands/credentialsmanagement/get-credentials-management.ts","webpack:///src/app/services/agentifai/agentifai-plugin-controller.service.ts","webpack:///src/app/agentifai/commands/loans/simulate-personal-loan.ts","webpack:///src/app/agentifai/commands/cards/acquisition/simulate-card-adhesion.ts","webpack:///src/app/models/GenericKeyValue.ts","webpack:///src/app/agentifai/commands/commom/agentifai-command-type.ts","webpack:///src/app/models/operation/request/payments/TelecommunicationsPaymentRequest.ts","webpack:///src/app/agentifai/commands/customers/update-client-information/get-update-client-information-validity.ts","webpack:///src/app/agentifai/commands/cards/activation/activate-card.ts","webpack:///src/app/agentifai/commands/callback/get-manager-callback-config.ts","webpack:///src/app/agentifai/commands/payments/telecommunications/get-frequent-telecommunication-payment.ts","webpack:///src/app/agentifai/commands/credentialsmanagement/matrixactivation/execute-activate-matrix.ts","webpack:///src/app/agentifai/commands/cards/acquisition/get-showcase-characteristics.ts","webpack:///src/app/app.component.ts","webpack:///src/app/models/customers/updateClientInfo/UpdateClientInfoRequest.ts","webpack:///src/app/agentifai/commands/transfers/internal/execute-internal-transfer.ts","webpack:///src/app/agentifai/commands/cards/get-card-account-transactions.ts","webpack:///src/app/agentifai/commands/accounts/get-transactions.ts","webpack:///src/app/agentifai/commands/transfers/get-client-status.ts","webpack:///src/app/agentifai/commands/unlock-contract-number/unlock-contract-number.ts","webpack:///src/app/app.component.html","webpack:///src/app/agentifai/commands/transfers/sepa/simulate-sepa-transfer.ts","webpack:///src/app/models/operation/request/cards/MBWayPartnerRequest.ts","webpack:///src/app/agentifai/utils/anonymization-utils.ts","webpack:///src/app/agentifai/commands/payments/telecommunications/execute-telecommunication-payment.ts","webpack:///src/app/agentifai/commands/cards/acquisition/get-card-adhesion-configurations.ts","webpack:///src/app/app.module.ts","webpack:///src/app/agentifai/commands/transfers/get-transfer-calendar-restrictions.ts","webpack:///src/app/agentifai/commands/transfers/internal/get-frequent-internal-transfer.ts","webpack:///src/app/agentifai/commands/cards/acquisition/execute-card-adhesion.ts","webpack:///src/app/agentifai/commands/payments/get-payments-entity.ts","webpack:///src/app/agentifai/commands/payments/get-payments-general-data.ts","webpack:///src/app/models/operation/request/devices/VoiceTreatmentConsentRequest.ts","webpack:///src/app/models/cardMatrix/MatrixRequisitionSimExe.ts","webpack:///src/app/models/operation/request/cards/CardRequestRequest.ts","webpack:///src/app/agentifai/commands/loans/execute-personal-loan-adhesion.ts","webpack:///src/app/services/agentifai/agentifai-request-factory.service.ts","webpack:///src/app/agentifai/commands/cards/get-payment-cards.ts","webpack:///src/app/agentifai/commands/transfers/immediate/get-immediate-transfer-phone-numbers.ts","webpack:///src/app/agentifai/commands/transfers/immediate/execute-immediate-transfer.ts","webpack:///src/app/agentifai/commands/accounts/accounts-utils.ts","webpack:///src/app/agentifai/commands/callback/get-manager-available-time.ts","webpack:///node_modules/@ionic/core/dist/esm lazy ^\\.\\/.*\\.entry\\.js$ include: \\.entry\\.js$ exclude: \\.system\\.entry\\.js$ namespace object","webpack:///src/app/internal/internal-utils.ts","webpack:///src/app/models/operation/request/transfers/TransferImmediateRequest.ts","webpack:///src/app/agentifai/commands/cards/cards-utils.ts","webpack:///src/app/agentifai/commands/transfers/immediate/simulate-immediate-transfer.ts","webpack:///src/app/agentifai/commands/payments/telecommunications/simulate-telecommunication-payment.ts","webpack:///src/app/agentifai/models/agentifai-request.ts","webpack:///src/app/services/environment-service/environment-service.service.ts","webpack:///src/app/services/api/api.service.ts","webpack:///src/app/agentifai/commands/get-current-customer-contacts.ts","webpack:///src/app/agentifai/models/agentifai-response.ts","webpack:///src/app/services/assistant-utils/assistant-utils.service.ts","webpack:///src/app/agentifai/commands/transfers/sepa/get-frequent-sepa-transfer.ts","webpack:///src/app/agentifai/commands/callback/set-callback.ts","webpack:///src/app/models/operation/Scheduling.ts","webpack:///src/app/agentifai/commands/mbway/update-transfer-consent-for-cgd-account.ts","webpack:///src/app/agentifai/commands/terms-and-conditions/get-terms-and-conditions-consent.ts","webpack:///src/app/models/operation/request/customers/CredentialUnlockAnswersRequest.ts","webpack:///src/app/agentifai/commands/cards/get-cards-general-data.ts","webpack:///src/app/models/operation/request/transfers/TransferSEPARequest.ts","webpack:///src/app/agentifai/commands/cards/get-sms-token-phone-number.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/models/operation/request/cards/CardPaymentRequest.ts","webpack:///src/app/agentifai/commands/mbway/simulate-mbway-adhesion.ts","webpack:///src/app/agentifai/commands/transfers/get-transfers-general-data.ts","webpack:///src/app/agentifai/commands/customers/update-client-information/simulate-update-client-information.ts","webpack:///src/app/agentifai/commands/customers/update-client-information/execute-update-client-information.ts","webpack:///src/app/app.component.scss","webpack:///src/app/agentifai/commands/mbway/execute-mbway-adhesion.ts","webpack:///src/app/agentifai/models/agentifai-widget-response.ts","webpack:///src/app/agentifai/commands/loans/simulate-personal-loan-adhesion.ts","webpack:///src/app/agentifai/commands/transfers/sepa/execute-sepa-transfer.ts","webpack:///src/main.ts","webpack:///src/app/agentifai/commands/operation-proof/send-operation-proof.ts","webpack:///src/app/agentifai/commands/cards/acquisition/get-showcase-cards.ts","webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/agentifai/commands/transfers/immediate/get-immediate-transfer-accounts.ts"],"names":["Credential","ExecuteCardPaymentCommand","request","requestFactory","responseFactory","nonAnonymizableRegexesPathsSuccess","scheduling","nonAnonymizableRegexesPathsError","NonAnonymizablePathRegexDefault","service","headers","getHeaders","parameters","getParameters","createRequest","credential","createCredentials","executeCardPayment","pipe","resp","createSuccessResponse","createErrorResponse","operationId","forceDuplicateOperation","createScheduling","sourceAccount","destinationCardNumber","amount","currency","cardPaymentType","manuallyEnteredCardNumber","response","success","nonAnonymizableRegexesPaths","createResponseFromRestApi","createResponse","errorResponse","InitNewCreditCard","nonAnonymizableRegexPathsSuccess","String","raw","nonAnonymizablePathRegexError","initNewCreditCard","error","parseInt","fullAccountKey","productCode","cardPaymentMode","paymentPercentage","paymentFixedValue","nameToPrintOnCard","statementEmissionDay","postalAddress","creditLimit","checkForCredit","parseBool","onlineAdherence","safeMessageAdhesion","AgentifaiManagerProvider","commandsFactory","data","commandValue","commandKey","commandType","command","createCommand","executeCommand","id","handleError","toString","requestId","execute","result","json","mapFromAny","createFailedResponse","providedIn","ConsentTermsAndConditionsCommand","nonAnonymizablePathRegex","addVoiceTreatmentConsent","GetPersonalLoanGeneralData","transformer","nonAnonymizedAccountsProperties","getConsumerLoanAdhesionGeneralData","transformedResponse","transformResponse","mapFromString","accounts","transformAccounts","SimulateActivateMatrix","simulateActivateMatrix","createMatrixActivateSimExe","ServicePaymentRequest","GetAccountBalance","getAccountBalance","Charges","type","code","description","taxCode","taxDescription","taxAmount","taxCurrency","taxRate","taxExemption","chargeCollectionCancellationOperationCode","chargeCollectionOperationCode","taxCollectionOperationCode","taxCollectionCancellationOperationCode","taxExemptionOperationCode","taxExemptionCancellationOperationCode","operationCost","commissions","stampDuty","expense","vat","GenericPersonalCreditWorkElement","cod","GetCustomerManager","getCustomerManager","GetCardAdhesionAccounts","getCardAdhesionAccounts","defaultAccount","transformAccount","GetUpdateClientInformationList","getUpdateClientListField","ExecuteServicePaymentCommand","executeServicePayment","entity","reference","operationName","ConsumerLoanAdhesionRequest","GetShowcaseProductDocument","docType","getShowcaseProductDocument","GetUpdateClientInformationAddress","getUpdateClientInfoAddress","MatrixActivateSimExe","matrixReferenceNumber","hasNifCreds","GetContractNumberQuestionsRequest","nif","phoneNumber","SimulateCardPaymentCommand","simulateCardPayment","UnlockCredentials","credentialUnlockAnswers","answers","contractNumber","CallbackSolicitationRequest","ResponseEvent","status","body","GetFrequentServicePaymentCommand","idFrequentOperation","getFrequentPaymentDetail","GetTransferTypeValidation","nonAnonymizableRegexPaths","targetAccount","getTransferType","UpdateClientInformationUtils","address","codigoPostal","postalCode","codigoPostalFiscal","fiscalPostalCode","localidade","locality","localidadeFiscal","fiscalLocality","moradaFiscalResidencia","fiscalHomeAddress","moradaResidencia","homeAddress","pais","country","paisFiscal","fiscalCountry","contribuinteFiscalEstrangeiro","foreignTaxpayerNumber","fiscal","map","object","attachment","name","document","extension","personal","estadoCivil","maritalStatus","naturalidade","naturalness","nifEstrangeiro","foreignFiscalIdNumber","nomeCompleto","fullName","nrDoc","idNumber","nrDocFiscal","fiscalIdNumber","paisEstrangeiro","foreignCountry","validade","validity","paisNaturalidade","birthCountry","distrito","birthDistrict","concelho","birthCounty","professional","cirs","entidadePatronal","employer","profissao","profession","trabalharPorContaDoutrem","workForSomeoneElse","tipoDependencia","dependencyType","tipoCliente","clientType","dataInicioAtividade","activityBeginDate","caeData","dateCae","cae","situacaoSocioProfissional","socioProfessionalStatus","codigoProfissao","professionCode","interveniente","intervening","GenericOperationRequest","environment","production","assistantConfiguration","apiUrl","apiKey","assistantConfigurationEnabled","endpoints","label","baseUrl","GetContractNumberUnlockQuestions","getContractNumberQuestions","SimulateServicePaymentCommand","createServicePaymentRequest","simulateServicePayment","GetContractNumberAnswersRequest","respostasUser","GetUpdateClientInformationPersonal","getUpdateClientInfoIdentification","StorageService","storage","apiUrlKey","apiKeyKey","baseUrlKey","settingsKey","get","set","settings","key","ready","then","value","GetCredentialsUnlockQuestions","getCredentialUnlockQuestions","AgentifaiUtils","JSON","parse","dataStr","stringify","detectedValue","detectedValueWithDots","replace","parseFloat","resultInCents","toFixed","resultInApiFormat","GetTelecommunicationConfigurationsCommand","getTelecomConfigurations","AgentifaiCardsTransformerService","cards","forEach","card","cardName","split","reverse","cardAccounts","addCardAccountsCardProperties","defaultCardAccount","addNewCardProperties","account","CredentialUnlockQuestionsRequest","CredentialsManagementUtils","adressSequenceNumber","addressSequenceNumber","motive","createGenericKeyValue","GetMatrixConfig","matrixConfig","MBWayPartnerAcceptTransferCGDAccountRequest","TransferInternalRequest","charges","destinationAccount","destinationAccountCurrency","descriptionForSourceAccount","descriptionForDestinationAccount","finality","comment","DisableBannerPage","pageName","disableLandingPageBanner","UtilsService","isLogin","isFingerPrint","AgentifaiCommandFactoryService","accountsTranformer","cardsTransformer","GetAccounts","createGetAccounts","GetAccountBalances","createGetAccountBalances","GetTransactions","createGetTransactions","GetPaymentsEntity","createGetPaymentsEntity","GetFrequentServicePayment","createGetFrequentServicePayment","GetPaymentsGeneralData","createGetPaymentsGeneralData","SimulateServicePayment","createSimulateServicePayment","ExecuteServicePayment","createExecuteService","GetTelecommunicationConfigurations","createGetTelecommunicationConfigurations","SimulateTelecommunicationPayment","createSimulateTelecommunicationPayment","ExecuteTelecommunicationPayment","createExecuteTelecommunicationPayment","GetFrequentTelecommunicationPayment","createGetFrequentTelecommunicationPayment","GetCurrentCustomerContacts","createGetCurrentCustomerContacts","GetOperationProof","createGetOperationProof","SendOperationProof","createSendOperationProof","SimulateInternalTransfer","createSimulateInternalTransfer","ExecuteInternalTransfer","createExecuteInternalTransfer","SimulateSEPATransfer","createSimulateSEPATransfer","ExecuteSEPATransfer","createExecuteSEPATransfer","SimulateImmediateTransfer","createSimulateImmediateTransferCommand","ExecuteImmediateTransfer","createExecuteImmediateTransferCommand","createGetTransferTypeValidation","GetTransferCalendarRestrictions","createGeTransferCalendarRestrictions","GetClientStatus","createGetClientStatus","GetTransfersGeneralData","createGetTransfersGeneralData","GetFrequentInternalTransfer","createGetFrequentInternalTransfer","GetFrequentSEPATransfer","createGetFrequentSEPATransfer","GetImmediateTransferPhoneNumbers","createGetImmediateTransferPhoneNumbers","GetImmediateTransferAccounts","createGetImmediateTransferAccounts","GetCredentialUnlockQuestions","createGetCredentialUnlockQuestions","createUnlockQuestions","createGetContractNumberUnlockQuestions","UnlockContractNumber","createUnlockContractNumber","GetTermsAndConditionsConsent","createGetTermsAndConditionsConsent","ConsentTermsAndConditions","createConsentTermsAndConditions","GetMBWayCards","createGetMBWayCards","SimulateMBWayAdhesion","createSimulateMBWayAdhesion","ExecuteMBWayAdhesion","createExecuteMBWayAdhesion","UpdateTransferConsentForCgdAccount","createUpdateTransferConsentForCgdAccounts","GetPaymentCards","createGetPaymentCards","GetCardsGeneralData","createGetCardsGeneralData","GetCardAccountTransactions","createGetCardAccountTransactions","SimulateCardPayment","createSimulateCardPayment","ExecuteCardPayment","createExecuteCardPayment","ActivateCard","createActivateCard","GetSmsTokenPhoneNumber","createGetSmsTokenPhoneNumber","createGetCustomerManager","GetManagerCallbackConfig","createGetManagerCallbackConfig","GetManagerAvailableTime","createGetManagerAvailableTime","SetCallback","createSetCallback","SimulatePersonalLoan","createSimulatePersonalLoan","createGetPersonalLoanGeneralData","SimulatePersonalLoanAdhesion","createSimulatePersonalLoanAdhesion","ExecutePersonalLoanAdhesion","createExecutePersonalLoanAdhesion","GetPrivateContent","createGetPrivateContent","createDisableBannerPage","GetShowcaseCards","createGetShowcaseCards","GetShowcaseCharacteristics","createGetShowcaseCharacteristics","createGetShowcaseProductDocument","createGetCardAdhesionAccounts","GetCardAdhesionConfigurations","createGetCardAdhesionConfigurations","SimulateCardAdhesion","createSimulateCardAdhesion","createInitNewCreditCard","ExecuteCardAdhesion","createExecuteCardAdhesion","createGetUpdateClientInformationAddress","createGetUpdateClientInformationPersonal","GetUpdateClientInformationProfessional","createGetUpdateClientInformationProfessional","GetUpdateClientInformationValidity","createGetUpdateClientInformationValidity","createGetUpdateClientInformationList","SimulateUpdateClientInformation","createSimulateUpdateClientInformation","ExecuteUpdateClientInformation","createExecuteUpdateClientInformation","GetCredentialsManagement","createGetCredentialsManagement","createGetMatrixConfig","SimulateMatrixRequisition","createSimulateMatrixRequistion","ExecuteMatrixRequisition","createExecuteMatrixRequisition","createSimulateActivateMatrix","ExecuteActivateMatrix","createExecuteActivateMatrix","simulateMatrixRequisition","createMatrixRequisitionSimExe","GetMBWayCardsCommand","nonAnonymizedCardProperties","getCardsForMbwayAssociation","featureId","getPrivateContent","GetOperationProofCommand","Number","getOperationProof","AgentifaiServicesProvider","api","ACCOUNTS_FOR_BALANCES_AND_TRANSACTIONS","ACCOUNTS_FOR_BALANCES_AND_TRANSACTIONS_DEPOSITSONLY","ACCOUNT_BALANCES_AND_TRANSACTIONS","ACCOUNT_TRANSACTIONS","ACCOUNT_BALANCES","EXECUTE_SERVICE_PAYMENT","SIMULATE_SERVICE_PAYMENT","PAYMENTS_PAGE_DATA_SERVICE","PAYMENT_CALENDAR_SERVICE","GET_ENTITY","GET_FREQUENT_SERVICE_PAYMENT_DETAIL","TELECOM_CONFIGURATIONS","SIMULATE_TELECOM_PAYMENT","EXECUTE_TELECOM_PAYMENT","GET_FREQUENT_TELECOM_PAYMENT_DETAIL","BUSINESS_OPERATIONS","PROOFS_EMAILS","INTERNAL_TRANSFER_SIMULATION_SERVICE","INTERNAL_TRANSFER_EXECUTION_SERVICE","INTERNAL_TRANSFER_CERTIFICATE_SERVICE","INTERNAL_TRANSFER_SIMULATE_CERTIFICATE_SERVICE","INTERNAL_TRANSFER_FREQUENT_SERVICE","TRANSFER_PAGE_DATA_SERVICE","TRANSFER_TYPE_SERVICE","INTERNAL_TRANSFER_CALENDAR_SERVICE","SEPA_TRANSFER_CALENDAR_SERVICE","ALL_TRANSFERS_CALENDAR_SERVICE","SEPA_TRANSFER_SIMULATION_SERVICE","SEPA_TRANSFER_EXECUTION_SERVICE","SEPA_TRANSFER_CERTIFICATE_SERVICE","SEPA_TRANSFER_SIMULATE_CERTIFICATE_SERVICE","SEPA_TRANSFER_FREQUENT_SERVICE","SEPA_TRANSFER_VALIDATE_BENEFICIARY","SEPA_TRANSFER_GET_FREQUENT_OPERATION","IMMEDIATE_TRANSFER_SIMULATION_SERVICE","IMMEDIATE_TRANSFER_EXECUTION_SERVICE","ACCOUNTS_FOR_IMMEDIATE_TRANSFER_REGISTRATION","PHONE_NUMBERS_FOR_IMMEDIATE_TRANSFER_REGISTRATION","MBWAY_PARTNER_CLIENT_STATUS","MBWAY_PARTNER_CARDS_LIST","WITHDRAWAL_SIMULATE_ADHESION_MBWAY","WITHDRAWAL_EXECUTE_ADHESION_MBWAY","MBWAY_ACCEPT_TRANSFERS_CGD","CUSTOMER_CONTACTS","CREDENTIAL_UNLOCK_QUESTIONS","CREDENTIAL_UNLOCK_ANSWERS","GET_CONTRACT_NUMBER_QUESTIONS","GET_CONTRACT_NUMBER_ANSWERS","VOICE_TREATMENT_CONSENT","LOGOUT_SERVICE","GENERAL_CARD_DATA","CARD_ACCOUNT_TRANSACTIONS","CARD_PAYMENT_DATA","SIMULATE_CARD_PAYMENT","EXECUTE_CARD_PAYMENT","CARD_ACTIVATION","GET_SMS_TOKEN","CUSTOMER_MANAGER","MANAGER_CALLBACK_CONFIG","MANAGER_CALLBACK_AVAILABLETIME","CUSTOMER_CALLBACK","LOANS_CONSUMER_CALCULATOR","CONSULT_LOAN_ADHESION_GENERAL_DATA","LOAN_ADHESION_SIMULATION","LOAN_ADHESION_EXECUTION","CONTENT_PRIVATE_CONTENT","CONTENT_PRIVATE_CONTENT_LANDING_BANNER_DISABLE","SHOWCASE_CARDS","SHOWCASE_CHARACTERISTICS","SHOWCASE_PRODUCT_DOCUMENT","CARD_ADHESION_ACCOUNTS","CARD_ADHESION_CONFIGURATIONS","CARD_ADHESION_SIMULATE","CARD_ADHESION_INIT","CARD_ADHESION_EXECUTE","UPDATE_CLIENT_INFO_VALIDITY","UPDATE_CLIENT_INFO_ADDRESS","UPDATE_CLIENT_INFO_PERSONAL","UPDATE_CLIENT_INFO_PROFESSIONAL","UPDATE_CLIENT_MARTIAL_STATUS","UPDATE_CLIENT_SIMULATION","UPDATE_CLIENT_EXECUTION","GET_CREDENTIALS","MATRIX_CONFIG","MATRIX_REQUISITION_SIMULATION","MATRIX_REQUISITION_EXECUTION","MATRIX_ACTIVE_SIMULATION","MATRIX_ACTIVE_EXECUTION","ACCOUNT_PARAM","FROM_DATE_PARAM","TO_DATE_PARAM","CARD_ACCOUNT_PARAM","CARD_NUMBER","CARD_VALIDITY_DATE","CHARACTERISTICSID_PARAM","PRODUCTCODE_PARAM","DOCTYPE_PARAM","FEATUREID","ID","CREDENTIAL_PARAM","obs","deleteLogoutAgentifai","genericClearCookies","onlyDeposit","genericGetAuthenticatedMethodAgentifai","minimumDate","maximumDate","url","nextPageKeys","includeFrequentOperationImages","entityNumber","genericPostAuthenticatedMethodWithInputAgentifai","beneficiaryName","genericPutAuthenticatedMethodWithInputAgentifai","genericDeleteAuthenticatedMethodAgentifai","genericGetMethodAgentifai","genericPostMethodWithInputAgentifai","cardAccountId","targetCardOperationType","omitTransactionsInResponse","statementDate","cardNumber","cardValidityDate","genericPostAuthenticatedMethodAgentifai","destinationType","date","genericPutAuthenticatedMethodAgentifai","characteristicsId","credentialType","executeMatrixRequisition","getUpdateClientInfoOccupation","AgentifaiResponseFactoryService","event","createResponseEventFromRestApi","createErrorResponseEventFromRestApi","createResponseEvent","OperationProofByEmailRequest","GetAccountsCommand","nonAnonymizableRegexesPathsuccess","getBalancesAndTransactionsAccountList","SimulateInternalTransferCommand","simulateInternalTransfer","AgentifaiAccountsTransformerService","transform","addNewAccountProperties","accountName","getCredentials","AgentifaiPluginControllerService","agentifaiManager","env","agentifai","config","getAgentifaiConfiguration","initializeWithConfig","addCallback","initialize","stop","configurations","setConfigurations","setWidgetVisibility","intent","openApplication","closeApplication","token","authHeaders","user","registerUser","unregisterUser","addClientCallback","processAgentifaiEvent","dimensions","setWidgetDimensions","theme","setTheme","eventType","processApplicationStatusEvent","executeAgentifaiRequest","isOpened","openAlice","closeAlice","console","log","executeWidgetRequest","subscribe","sendResponseOfRequest","requestResult","getConsumerLoanCalculatorResult","targetAmount","periodMonths","includeDocuments","fullKeyToAccount","jobSector","sector","jobType","trabalho","contractType","contrato","jobServiceTime","antiguidade","codigoIRS","irsCode","grossIncome","rendimentoBruto","netIncome","rendimentoLiquido","monthlyExpenses","encargosMensais","householdExpenses","despesasFamiliares","householdMembers","nrAgregado","prestacao","installment","defaultSimulation","simulateCardAdhesion","GenericKeyValue","AgentifaiCommandType","TelecommunicationsPaymentRequest","getUpdateClientInfoValidity","ActivateCardCommand","activateCard","getManagerCallbackConfig","GetFrequentTelecommunicationPaymentCommand","getFrequentTelecomPaymentDetail","executeActivateMatrix","getShowcaseCharacteristics","AppComponent","platform","agentifaiController","assistantUtils","initializeAssistant","getHeadersAlice","headersKeysMapping","HEADERS_KEYS_MAPPING_ALICE","getEndpointsWhitelist","endpointUrl","getbaseUrl","getConfig","selector","template","UpdateClientInfoRequest","attachments","political","UpdateClientAttachment","UpdateClientAddress","UpdateClientPersonal","UpdateClientProfessional","UpdateClientPolitical","ExecuteInternalTransferCommand","executeInternalTransfer","nonAnonymizedCardTransactionProperties","getCardStatementTransactions","transactionsRequest","createTransactionRequest","getTransactions","parameteres","fromBookDate","toBookDate","pageKey","getMbwayPartnerClientStatus","getContractNumberAnswers","SimulateSEPATransferCommand","simulateSepaTransfer","destinationName","urgent","MBWayPartnerRequest","acceptedTransferCGD","Anonymization","ExecuteTelecommunicationPaymentCommand","executeTelecomPayment","paymentConfigurationCode","parentPaymentConfigurationCode","taxPayerNumber","getCardAdhesionConfigurations","AppModule","declarations","entryComponents","imports","forRoot","providers","provide","useClass","bootstrap","getCalendarToAllTranfers","getFrequentINTERNALoperation","executeCardAdhesion","GetPaymentsEntityCommand","getPaymentsEntity","accountsTransformer","getPaymentsPageData","VoiceTreatmentConsentRequest","MatrixRequisitionSimExe","CardRequestRequest","executeLoanRequest","receiptsVenc","salaryDocuments","irs","irsDocuments","laboralVinc","employmentDocuments","professionDoc","professionDocuments","addressDoc","addressDocuments","citzeanCardDoc","identificationDocuments","ral","questions","AgentifaiRequestFactoryService","credentialJson","schedulingParams","startDate","endDate","val","toLowerCase","item","getCardsPaymentData","GetImmediateTransferPhoneNumbersCommand","getPhoneNumbersForImmediateTransfers","ExecuteImmediateTransferCommand","executeImmediateTransfer","message","destinationPhone","cardNumberMasked","useMbwayPartner","AccountsUtils","getManagerAvailableTime","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","e","Error","ids","all","slice","keys","webpackAsyncContextKeys","Object","module","exports","InternalUtils","length","endpointKey","TransferImmediateRequest","CardsUtils","SimulateImmediateTransferCommand","simulateImmediateTransfer","SimulateTelecommunicationPaymentCommand","simulateTelecomPayment","AgentifaiRequest","ENVS","EnvironmentService","DEVELOPMENT_MODE","ENV_URLS","ENVS_CODES","LANG_PT","LANG_EN","DEFAULT_ENV","DEV","DEFAULT_LANG","DEFAULT_DEVICE_TYPE","DEFAULT_APPVERSION","APPNAME","isBrowser","reloadBanners","iPhoneModelsWithNotch","aliceStateChangeCallback","isAgentifaiLoggerEnabled","ENVS_AUX","isIPhone","deviceType","IOS_SMARTPHONE","IOS_TABLET","isAndroid","ANDROID","codeSmartPhone","codeTablet","isTablet","changeEnvironment","SELECTED_ENV","DEV2","ENV","TI","CQ","PROD","BROWSER","pceVersion","languageCode","appVersion","isDeviceRooted","aliceActive","is","IRoot","isRooted","Api","http","utils","developmentMode","fromAgentifai","agentifaiHeaders","getHeadersAuthorization","auth","serviceUrl","loyaltyCode","endpoint","createUrl","clearCookies","setDataSerializer","post","err","notEncodeUrl","genericGetMethodInternal","encodeURI","input","genericPostMethodWithInputInternal","payload","APPSetTimeout","genericGetAuthenticatedMethodInternal","resetCredentials","setRequestTimeout","genericPostAuthenticatedMethodInternal","genericPostAuthenticatedMethodWithInputInternal","genericPutAuthenticatedMethodInternal","put","genericPutAuthenticatedMethodWithInputInternal","genericDeleteAuthenticatedMethodInternal","deleteLogoutInternal","APPClearTimeout","getBaseUrl","GetCurrentCustomerContactsCommand","getCustomerContacts","AgentifaiResponse","AssistantUtilsService","getDefaultAssistantConfig","setConfig","getApiUrl","getApiKey","getSettings","setApiUrl","setApiKey","setSettings","defaultApiUrl","_","defaultApiKey","defaultSettings","getDefaultSettings","defaultTheme","themes","light","dark","getFrequentSEPAoperation","setCallback","availableDate","availableTime","coments","comments","destinationTelephone","period","subject","subjectKey","subjectId","Scheduling","frequencyType","numberOfOperations","UpdateTransferConsentForCgdAccountCommand","acceptTransferCGD","GetTermsAndConditionsConsentCommand","getVoiceTreatmentConsent","CredentialUnlockAnswersRequest","getCardsGeneralData","addCardsGeneralDataProperties","TransferSEPARequest","additionalInfo","commissionFee","warningCharge","warningVAT","chargesSum","chargesSumCurrency","getContactSmsToken","routes","path","loadChildren","m","HomePageModule","redirectTo","pathMatch","SecondPagePageModule","AppRoutingModule","preloadingStrategy","CardPaymentRequest","SimulateMBWayAdhesionCommand","simulateAdhesionMbway","getTransferPageData","simulateUpdateClientInfo","finalityQAList","createGenericKeyValueList","createAddress","createPersonal","createAttachments","createProfessional","executeUpdateClientInfo","ExecuteMBWayAdhesionCommand","executeAdhesionMbway","WidgetResponse","simulateLoanRequest","ExecuteSEPATransferCommand","executeSepaTransfer","bootstrapModule","SendOperationProofCommand","proofRequest","createOperationProofRequest","sendOperationProofByEmail","targetEmail","targetCCEmail","emailSubject","getShowcaseCards","webpackEmptyAsyncContext","GetImmediateTransferAccountsCommand","getAccountsForImmediateTransfers"],"mappings":"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","file":"main-es5.js","sourcesContent":["export class Credential {\n    type: string;\n    value: string;\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiRequestFactoryService } from 'src/app/services/agentifai/agentifai-request-factory.service';\nimport { Credential } from 'src/app/models/operation/Credential';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { CardPaymentRequest } from 'src/app/models/operation/request/cards/CardPaymentRequest';\n\nexport class ExecuteCardPaymentCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexesPathsSuccess: String[] = [\n        \"headers.+\",\n        \"status\",\n        `body\\.(operationId|operationStatus|charges.*|${Anonymization.scheduling()})`\n    ]\n\n    private nonAnonymizableRegexesPathsError: String[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private requestFactory: AgentifaiRequestFactoryService,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters = this.request.getParameters()\n        const request = this.createRequest(parameters);\n        const credential = this.createCredentials(parameters);\n\n        return service.executeCardPayment(headers, request, credential)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(resp => this.createErrorResponse(resp))\n            );\n    }\n\n    private createRequest(parameters: any): CardPaymentRequest {\n        const request = new CardPaymentRequest();\n        request.operationId = parameters.operationId;\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation;\n        request.scheduling = this.requestFactory.createScheduling(parameters);\n        request.sourceAccount = parameters.sourceAccount;\n        request.destinationCardNumber = parameters.destinationCardNumber;\n        request.amount = parameters.amount;\n        request.currency = parameters.currency;\n        request.cardPaymentType = parameters.cardPaymentType;\n        request.manuallyEnteredCardNumber = parameters.manuallyEnteredCardNumber;\n        \n        return request;\n    }\n\n    private createCredentials(parameters: any): Credential {\n        return this.requestFactory.createCredentials(parameters);\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexesPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizableRegexesPathsError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { CardRequestRequest } from 'src/app/models/operation/request/cards/CardRequestRequest';\nimport { AgentifaiRequestFactoryService } from 'src/app/services/agentifai/agentifai-request-factory.service';\n\nexport class InitNewCreditCard implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        String.raw `^body\\.(operationId|showCardCreditDocuments)$`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private requestFactory: AgentifaiRequestFactoryService\n    ) {}\n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders();\n        const parameters = this.request.getParameters();\n        const request = this.createRequest(parameters);\n\n        return service.initNewCreditCard(headers, request)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createRequest(parameters: any): CardRequestRequest {\n        const request = new CardRequestRequest();\n\n        if (parameters.operationId != null) {\n            request.operationId = parseInt(parameters.operationId)\n        }\n\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation;\n        request.scheduling = this.requestFactory.createScheduling(parameters);\n\n        request.fullAccountKey = parameters.fullAccountKey;\n        request.productCode = parameters.productCode;\n        request.cardPaymentMode = parameters.cardPaymentMode;\n\n        if (parameters.paymentPercentage != null) {\n            request.paymentPercentage = parseInt(parameters.paymentPercentage)\n        }\n\n        request.paymentFixedValue = parameters.paymentFixedValue;\n        request.nameToPrintOnCard = parameters.nameToPrintOnCard;\n\n        if (parameters.statementEmissionDay != null) {\n            request.statementEmissionDay = parseInt(parameters.statementEmissionDay)\n        }\n        \n        request.postalAddress = parameters.postalAddress;\n        request.creditLimit = parameters.creditLimit;\n\n        if (parameters.checkForCredit != null) {\n            request.checkForCredit = this.requestFactory.parseBool(parameters.checkForCredit)\n        }\n\n        if (parameters.onlineAdherence != null) {\n            request.onlineAdherence = this.requestFactory.parseBool(parameters.onlineAdherence)\n        }\n\n        if (parameters.safeMessageAdhesion != null) {\n            request.safeMessageAdhesion = this.requestFactory.parseBool(parameters.safeMessageAdhesion)\n        }\n\n        return request;\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { Injectable } from '@angular/core';\nimport { AgentifaiResponse } from 'src/app/agentifai/models/agentifai-response';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { Observable, throwError } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { AgentifaiCommandType } from 'src/app/agentifai/commands/commom/agentifai-command-type';\nimport { AgentifaiUtils } from 'src/app/agentifai/utils/agentifai-utils';\nimport { AgentifaiCommandFactoryService } from 'src/app/services/agentifai/agentifai-command-factory.service';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AgentifaiManagerProvider {\n\n  private static commandKey: string = \"requestType\";\n\n  constructor(\n    private service: AgentifaiServicesProvider,\n    private commandsFactory: AgentifaiCommandFactoryService\n  ) { }\n\n  executeWidgetRequest(data: JSON): Observable<AgentifaiResponse> {\n    const request = this.createRequest(data);\n    const commandValue: string = request.data[AgentifaiManagerProvider.commandKey];\n    const commandType: AgentifaiCommandType = commandValue as AgentifaiCommandType;\n    const command: AgentifaiCommand<any> = this.commandsFactory.createCommand(commandType, request);\n\n    try {\n      return this.executeCommand(command, request.id);\n    } catch (error) {\n      return this.handleError(request.id, error.toString())\n    }\n  }\n\n  private executeCommand(command: AgentifaiCommand<any>, requestId: string): Observable<AgentifaiResponse> {\n    return command.execute(this.service)\n      .pipe(\n        map(result => this.createSuccessResponse(requestId, result)),\n        catchError(error => this.handleError(requestId, error))\n      );\n  }\n\n  private createSuccessResponse(requestId: string, response: Object): AgentifaiResponse {\n    const json = AgentifaiUtils.mapFromAny(response);\n    return new AgentifaiResponse(requestId, true, json);\n  }\n\n  private createFailedResponse(requestId: string, errorResponse: any | Error) {\n    const json = AgentifaiUtils.mapFromAny(errorResponse);\n    return new AgentifaiResponse(requestId, false, json);\n  }\n\n  private handleError(requestId: string, error: any | Error) {\n    const errorResponse = this.createFailedResponse(requestId, error);\n    return throwError(errorResponse);\n  }\n\n  private createRequest(data: JSON): AgentifaiRequest {\n    const id = data[\"requestId\"];\n    delete data[\"requestId\"];\n    return new AgentifaiRequest(id, data);\n  }\n\n}\n","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { VoiceTreatmentConsentRequest } from 'src/app/models/operation/request/devices/VoiceTreatmentConsentRequest';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class ConsentTermsAndConditionsCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizablePathRegex: String[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const request = new VoiceTreatmentConsentRequest();\n\n        return service.addVoiceTreatmentConsent(headers, request)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizablePathRegex)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegex)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiAccountsTransformerService } from 'src/app/services/agentifai/agentifai-accounts-transformer.service';\nimport { AgentifaiUtils } from 'src/app/agentifai/utils/agentifai-utils';\nimport { AccountsUtils } from 'src/app/agentifai/commands/accounts/accounts-utils'\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetPersonalLoanGeneralData implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        String.raw`^body\\.(pedidoExistenteMes|validClient|client95_96|professionalInformation\\..+|accounts\\.[^.]+\\.(${AccountsUtils.nonAnonymizedAccountsProperties}))$`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private transformer: AgentifaiAccountsTransformerService\n    ) {}\n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n\n        return service.getConsumerLoanAdhesionGeneralData(headers)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        var transformedResponse = this.transformResponse(response);\n        return this.createResponse(transformedResponse, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n    private transformResponse(response: any): any {\n        const data = AgentifaiUtils.mapFromString(response.data);\n\n        if (data.accounts != null) {\n            data.accounts = this.transformer.transformAccounts(data.accounts);\n\n            response.data = data;\n        }\n\n        return response;\n    }\n\n}","import { Observable, throwError } from \"rxjs\";\nimport { catchError, map } from \"rxjs/operators\";\nimport { AgentifaiRequest } from \"src/app/agentifai/models/agentifai-request\";\nimport { WidgetResponse } from \"src/app/agentifai/models/agentifai-widget-response\";\nimport { Anonymization } from \"src/app/agentifai/utils/anonymization-utils\";\nimport { MatrixActivateSimExe } from \"src/app/models/cardMatrix/MatrixActivateSimExe\";\nimport { AgentifaiRequestFactoryService } from \"src/app/services/agentifai/agentifai-request-factory.service\";\nimport { AgentifaiResponseFactoryService } from \"src/app/services/agentifai/agentifai-response-factory.service\";\nimport { AgentifaiServicesProvider } from \"src/app/services/agentifai/agentifai-services.service\";\nimport { AgentifaiCommand } from \"../../commom/agentifai-command\";\nimport { CredentialsManagementUtils } from \"../credentials-management-utils\";\n\nexport class SimulateActivateMatrix implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        'headers.+',\n        'status',\n        `body\\.(operationId|operationStatus|${Anonymization.scheduling()})`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private requestFactory: AgentifaiRequestFactoryService\n    ) { }  \n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters = this.request.getParameters()\n        const request = this.createRequest(parameters)\n\n        return service.simulateActivateMatrix(headers, request)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createRequest(parameters: any): MatrixActivateSimExe {\n        return CredentialsManagementUtils.createMatrixActivateSimExe(parameters, this.requestFactory);\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { GenericOperationRequest } from 'src/app/models/operation/request/GenericOperationRequest'\n\nexport class ServicePaymentRequest extends GenericOperationRequest {\n    sourceAccount: string;\n    entity: string;\n    reference: string;\n    amount: string;\n\n    constructor() {\n        super();\n    }\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { map, catchError } from 'rxjs/operators';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\n\nexport class GetAccountBalance implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        \"body\\.(accountCurrency|accountBalancesList\\.[^.]+\\.currency)(?:$|\\W)\"\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(private request: AgentifaiRequest, private responseFactory: AgentifaiResponseFactoryService) {\n    }\n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const fullAccountKey = this.request.getParameters()[\"fullAccountKey\"];\n        \n        return service.getAccountBalance(headers, fullAccountKey)\n            .pipe(\n                map( resp => this.createSuccessResponse(resp) ),\n                catchError( error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n    \n}","export class Charges {\n    cost: number;\n    type: string;\n    code: string;\n    description: string;\n    amount: number;\n    currency: string;\n    taxCode: string;\n    taxDescription: string;\n    taxAmount: number;\n    taxCurrency: string;\n    taxRate: number;\n    taxExemption: number;\n    chargeCollectionCancellationOperationCode: string;\n    chargeCollectionOperationCode: string;\n    taxCollectionOperationCode: string;\n    taxCollectionCancellationOperationCode: string;\n    taxExemptionOperationCode: string;\n    taxExemptionCancellationOperationCode: string;\n    operationCost: number;\n    commissions: number;\n    stampDuty: number;\n    expense: number;\n    vat: number;\n\n    constructor() {\n        this.type = '';\n        this.code = '';\n        this.description = '';\n        this.amount = null;\n        this.currency = '';\n        this.taxCode = '';\n        this.taxDescription = '';\n        this.taxAmount = null;\n        this.taxCurrency = '';\n        this.taxRate = null;\n        this.taxExemption = null;\n        this.chargeCollectionCancellationOperationCode = '';\n        this.chargeCollectionOperationCode = '';\n        this.taxCollectionOperationCode = '';\n        this.taxCollectionCancellationOperationCode = '';\n        this.taxExemptionOperationCode = '';\n        this.taxExemptionCancellationOperationCode = '';\n        this.operationCost = null;\n        this.commissions = null;\n        this.stampDuty = null;\n        this.expense = null;\n        this.vat = null;\n    }\n}","export class GenericPersonalCreditWorkElement {\n    cod: string;\n    description: string;\n    constructor(){\n        this.cod = \"\",\n        this.description = \"\";\n    }\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetCustomerManager implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        String.raw `^body\\.serviceModel$`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) {}\n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n\n        return service.getCustomerManager(headers)\n            .pipe(\n                map( resp => this.createSuccessResponse(resp) ),\n                catchError( error => this.createErrorResponse(error) )\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiUtils } from 'src/app/agentifai/utils/agentifai-utils'\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { AgentifaiAccountsTransformerService } from 'src/app/services/agentifai/agentifai-accounts-transformer.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetCardAdhesionAccounts implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        'headers.+',\n        'status'\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private transformer: AgentifaiAccountsTransformerService\n    ) {}\n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders();\n\n        return service.getCardAdhesionAccounts(headers)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: string[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        const transformedResponse = this.transformResponse(response);\n        return this.createResponse(transformedResponse, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n    private transformResponse(response: any): any {\n        const data = AgentifaiUtils.mapFromString(response.data);\n\n        if (data.defaultAccount != null && data.accounts != null) {\n            data.accounts = this.transformer.transformAccounts(data.accounts);\n            data.defaultAccount = this.transformer.transformAccount(data.defaultAccount);\n\n            response.data = data;\n        }\n\n        return response;\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetUpdateClientInformationList implements AgentifaiCommand<WidgetResponse> {\n\n  private nonAnonymizableRegexPathsSuccess: string[] = [\n      \"headers.+\",\n      \"status\",\n      \"body.*\"\n  ]\n\n  private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n  constructor(\n      private request: AgentifaiRequest,\n      private responseFactory: AgentifaiResponseFactoryService\n  ) {}\n  \n  execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n      const headers = this.request.getHeaders()\n      const id = this.request.getParameters().id\n\n      return service.getUpdateClientListField(headers, id)\n          .pipe(\n              map(resp => this.createSuccessResponse(resp)),\n              catchError(error => this.createErrorResponse(error))\n          )\n  }\n\n  private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n      return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n  }\n\n  private createSuccessResponse(response: any): WidgetResponse {\n      return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n  }\n\n  private createErrorResponse(errorResponse: any) {\n      return throwError(\n          this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n      )\n  }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { map, catchError } from 'rxjs/operators';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { Observable, throwError } from 'rxjs';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiRequestFactoryService } from 'src/app/services/agentifai/agentifai-request-factory.service';\nimport { ServicePaymentRequest } from 'src/app/models/operation/request/payments/ServicePaymentRequest';\nimport { Credential } from 'src/app/models/operation/Credential';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\n\nexport class ExecuteServicePaymentCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizablePathRegex: String[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private requestFactory: AgentifaiRequestFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters = this.request.getParameters()\n        const request = this.createRequest(parameters);\n        const credential = this.createCredentials(parameters);\n\n        return service.executeServicePayment(headers, request, credential)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(resp => this.createErrorResponse(resp))\n            );\n    }\n\n    private createRequest(parameters: any): ServicePaymentRequest {\n        const request = new ServicePaymentRequest();\n        request.sourceAccount = parameters.sourceAccount;\n        request.entity = parameters.entity;\n        request.reference = parameters.reference;\n        request.amount = parameters.amount;\n        request.operationId = parseInt(parameters.operationId);\n        request.operationName = \"\";\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation;\n        request.scheduling = this.requestFactory.createScheduling(parameters);\n\n        return request;\n    }\n\n    private createCredentials(parameters: any): Credential {\n        return this.requestFactory.createCredentials(parameters);\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizablePathRegex)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegex)\n        )\n    }\n\n}","import { GenericOperationRequest } from '../GenericOperationRequest';\r\nimport { GenericPersonalCreditWorkElement } from './GenericPersonalCreditWorkElement';\r\n\r\nexport class ConsumerLoanAdhesionRequest extends GenericOperationRequest {\r\n    targetAmount: number;\r\n    periodMonths: number;\r\n    includeDocuments: boolean;\r\n    periodYears: number;\r\n    fullKeyToAccount: string;\r\n    currency: string;\r\n    receiptsVenc : any;\r\n    irs : any;\r\n    laboralVinc : any;\r\n    questions: any[];\r\n    professionProof: any;\r\n    addressProof: any;\r\n\r\n    // campos profissionais\r\n    profissao: GenericPersonalCreditWorkElement;\r\n    sector: GenericPersonalCreditWorkElement;\r\n    contrato: GenericPersonalCreditWorkElement;\r\n    trabalho: GenericPersonalCreditWorkElement;\r\n    antiguidade: number;\r\n    codigoIRS: string;\r\n\r\n    // campos financeiros\r\n    nrAgregado: number;\r\n    rendimentoBruto: number;  // exemplo: 11111\r\n    rendimentoLiquido: number;  // exemplo: 11111\r\n    despesasFamiliares: number;  // exemplo: 11111\r\n    encargosMensais: number;  // exemplo: 11111\r\n\r\n    // outros\r\n    prestacao: string; // exemplo: 75,89\r\n    addressDoc: any;\r\n    professionDoc: any;\r\n    citzeanCardDoc: any;\r\n    ral: boolean;\r\n    \r\n    // Otimização de produto\r\n    defaultSimulation: boolean; // para distinguir simulações base de simulações com dados do cliente\r\n    financedLifeInsurance: boolean; // para indicar se o cliente quer seguro de vida\r\n\tuseProd57: boolean; // para distinguir que produto está a ser usado\r\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetShowcaseProductDocument implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\"\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) {}\n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders();\n        const parameters = this.request.getParameters();\n        const productCode = parameters.productCode;\n        const docType = parameters.docType;\n\n        return service.getShowcaseProductDocument(headers, productCode, docType)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetUpdateClientInformationAddress implements AgentifaiCommand<WidgetResponse> {\n\n  private nonAnonymizableRegexPathsSuccess: string[] = [\n      \"headers.+\",\n      \"status\",\n      \"body.expirado\"\n  ]\n\n  private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n  constructor(\n      private request: AgentifaiRequest,\n      private responseFactory: AgentifaiResponseFactoryService\n  ) {}\n  \n  execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n      const headers = this.request.getHeaders()\n\n      return service.getUpdateClientInfoAddress(headers)\n          .pipe(\n              map(resp => this.createSuccessResponse(resp)),\n              catchError(error => this.createErrorResponse(error))\n          )\n  }\n\n  private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n      return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n  }\n\n  private createSuccessResponse(response: any): WidgetResponse {\n      return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n  }\n\n  private createErrorResponse(errorResponse: any) {\n      return throwError(\n          this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n      )\n  }\n\n}","import{ GenericOperationRequest } from \"../operation/request/GenericOperationRequest\";\r\n\r\nexport class MatrixActivateSimExe extends GenericOperationRequest{\r\n    matrixReferenceNumber: string\r\n    hasNifCreds: boolean;\r\n    constructor(){\r\n        super();\r\n        this.matrixReferenceNumber = '';\r\n        this.hasNifCreds = false;\r\n    }\r\n}","export class GetContractNumberQuestionsRequest {\r\n\r\n    nif: string;\r\n    phoneNumber: String;\r\n\r\n    constructor(){\r\n        this.nif = \"\";\r\n        this.phoneNumber = \"\";\r\n    }\r\n\r\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { AgentifaiRequestFactoryService } from 'src/app/services/agentifai/agentifai-request-factory.service';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { CardPaymentRequest } from 'src/app/models/operation/request/cards/CardPaymentRequest';\n\nexport class SimulateCardPaymentCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexesPathsSuccess: String[] = [\n        \"headers.+\",\n        \"status\",\n        `body\\.(operationId|operationStatus|charges.*|${Anonymization.scheduling()})`\n    ]\n\n    private nonAnonymizableRegexesPathsError: String[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private requestFactory: AgentifaiRequestFactoryService,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters: any = this.request.getParameters()\n        const request = this.createRequest(parameters);\n\n        return service.simulateCardPayment(headers, request)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(resp => this.createErrorResponse(resp))\n            );\n    }\n\n    private createRequest(parameters: any): CardPaymentRequest {\n        const request = new CardPaymentRequest();\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation;\n        request.scheduling = this.requestFactory.createScheduling(parameters);\n        request.sourceAccount = parameters.sourceAccount;\n        request.destinationCardNumber = parameters.destinationCardNumber;\n        request.amount = parameters.amount;\n        request.currency = parameters.currency;\n        request.cardPaymentType = parameters.cardPaymentType;\n        request.manuallyEnteredCardNumber = parameters.manuallyEnteredCardNumber;\n\n        return request;\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexesPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizableRegexesPathsError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { CredentialUnlockAnswersRequest } from 'src/app/models/operation/request/customers/CredentialUnlockAnswersRequest';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\n\nexport class UnlockCredentials implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexesPathsSuccess: String[] = [\n        \"headers.+\",\n        \"status\",\n        \"body\\.(operationId|success)\"\n    ]\n\n    private nonAnonymizableRegexesPathsError: String[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters: any = this.request.getParameters()\n        const request = this.createRequest(parameters);\n\n        return service.credentialUnlockAnswers(headers, request)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(resp => this.createErrorResponse(resp))\n            );\n    }\n\n    private createRequest(parameters: any): CredentialUnlockAnswersRequest {\n        const request = new CredentialUnlockAnswersRequest();\n        request.answers = parameters.answers;\n        request.contractNumber = parameters.contractNumber;\n        request.operationId = parameters.operationId;\n        return request;\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexesPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizableRegexesPathsError)\n        )\n    }\n\n}","export class CallbackSolicitationRequest {\n    destinationTelephone: string;\n    period: string;\n    availableDate: string;\n    availableTime: string;\n    subjectKey: string;\n    coments: string;\n    subject: string;\n    destinationType: string;\n    subjectId: string;\n}","\nexport class ResponseEvent{\n    headers: JSON;\n    status: number;\n    body: JSON;\n\n    constructor(headers: JSON, status: number, body: JSON) {\n        this.headers = headers;\n        this.status = status;\n        this.body = body;\n    }\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\n\nexport class GetFrequentServicePaymentCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        \"body\\.(operationName|operationId|amount)(?:$|\\W)\"\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const idFrequentOperation = this.request.getParameters()[\"idFrequentOperation\"];\n\n        return service.getFrequentPaymentDetail(headers, String(idFrequentOperation))\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\n\nexport class GetTransferTypeValidation implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPaths: String[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const targetAccount = this.request.getParameters()[\"targetAccount\"];\n\n        return service.getTransferType(headers, targetAccount)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPaths)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizableRegexPaths)\n        )\n    }\n\n}","import { UpdateClientAddress, UpdateClientAttachment, UpdateClientInfoRequest, UpdateClientPersonal, UpdateClientProfessional } from 'src/app/models/customers/updateClientInfo/UpdateClientInfoRequest';\n\nexport class UpdateClientInformationUtils {\n\n  static createAddress(parameters: any): UpdateClientAddress {\n    const address = new UpdateClientAddress()\n    address.codigoPostal = parameters.postalCode\n    address.codigoPostalFiscal = parameters.fiscalPostalCode\n    address.localidade = parameters.locality\n    address.localidadeFiscal = parameters.fiscalLocality\n    address.moradaFiscalResidencia = parameters.fiscalHomeAddress\n    address.moradaResidencia = parameters.homeAddress\n    address.pais = parameters.country\n    address.paisFiscal = parameters.fiscalCountry\n    address.contribuinteFiscalEstrangeiro = parameters.foreignTaxpayerNumber\n    address.fiscal = parameters.fiscal\n\n    return address;\n  }\n\n  static createAttachments(parameters: [any]): UpdateClientAttachment[] {\n    return parameters.map(object => {\n      const attachment = new UpdateClientAttachment()\n      attachment.name = object.name\n      attachment.document = object.document\n      attachment.extension = object.extension\n\n      return attachment\n    })\n  }\n\n  static createPersonal(parameters: any): UpdateClientPersonal {\n    const personal = new UpdateClientPersonal()\n    personal.estadoCivil = parameters.maritalStatus\n    personal.naturalidade = parameters.naturalness\n    personal.nifEstrangeiro = parameters.foreignFiscalIdNumber\n    personal.nomeCompleto = parameters.fullName\n    personal.nrDoc = parameters.idNumber\n    personal.nrDocFiscal = parameters.fiscalIdNumber\n    personal.paisEstrangeiro = parameters.foreignCountry\n    personal.validade = parameters.validity\n    personal.paisNaturalidade = parameters.birthCountry\n    personal.distrito = parameters.birthDistrict\n    personal.concelho = parameters.birthCounty\n\n    return personal\n  }\n\n  static createProfessional(parameters: any): UpdateClientProfessional {\n    const professional = new UpdateClientProfessional()\n    professional.cirs = parameters.cirs\n    professional.entidadePatronal = parameters.employer\n    professional.profissao = parameters.profession\n    professional.trabalharPorContaDoutrem = parameters.workForSomeoneElse\n    professional.tipoDependencia = parameters.dependencyType\n    professional.tipoCliente = parameters.clientType\n    professional.dataInicioAtividade = parameters.activityBeginDate\n    professional.caeData = parameters.dateCae\n    professional.cae = parameters.cae\n    professional.situacaoSocioProfissional = parameters.socioProfessionalStatus\n    professional.codigoProfissao = parameters.professionCode\n    professional.interveniente = parameters.intervening\n\n    return professional\n  }\n}","import { Scheduling } from 'src/app/models/operation/Scheduling';\n\nexport class GenericOperationRequest {\n    operationId: number;\n    operationName: string;\n    operationEmail: string;\n    forceDuplicateOperation: boolean;\n    scheduling: Scheduling\n\n    constructor() {\n        this.operationId = null;\n        this.operationName = '';\n        this.forceDuplicateOperation = false;\n        this.scheduling = new Scheduling();\n    }\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  assistantConfiguration: {\n    apiUrl: \"https://development.agentifai.com/widget-setup-data\",\n    apiKey: \"eyJ0ZW5hbnRJZCI6ICJjZ2QiLCAiY2hhbm5lbElkIjogIkNnZFdpZGdldCJ9\"\n  },\n  assistantConfigurationEnabled: true,\n  endpoints: [\n    { label: \"development\", baseUrl: \"https://dev.agentifai.com:23007/\" },\n    { label: \"staging-agentifai\", baseUrl: \"https://cgd-staging-client.agentifai.com:23007/\" },\n    { label: \"cq-cgd\", baseUrl: \"https://qoba.cgd.pt/pceApi/rest/v1/\" },\n    { label: \"production\", baseUrl: \"https://app.cgd.pt/pceApi/rest/v1/\" }\n  ]\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { GetContractNumberQuestionsRequest } from 'src/app/models/operation/request/customers/GetContractNumberQuestionsRequest';\n\nexport class GetContractNumberUnlockQuestions implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        \"body\\.(questions\\.*)\"\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters: any = this.request.getParameters()\n        const request = this.createRequest(parameters);\n\n        return service.getContractNumberQuestions(headers, request)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createRequest(parameters: any): GetContractNumberQuestionsRequest {\n        const request = new GetContractNumberQuestionsRequest();\n        request.nif = parameters.nif;\n        request.phoneNumber = parameters.phoneNumber;\n        return request;\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { map, catchError } from 'rxjs/operators';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { Observable, throwError } from 'rxjs';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiRequestFactoryService } from 'src/app/services/agentifai/agentifai-request-factory.service';\nimport { ServicePaymentRequest } from 'src/app/models/operation/request/payments/ServicePaymentRequest';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\n\nexport class SimulateServicePaymentCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexesPaths: String[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService, \n        private requestFactory: AgentifaiRequestFactoryService\n    ) {}\n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const request = this.createServicePaymentRequest();\n\n        return service.simulateServicePayment(headers, request)\n            .pipe(\n                map( resp => this.createSuccessResponse(resp) ),\n                catchError( resp => this.createErrorResponse(resp) )\n            );\n    }\n\n    private createServicePaymentRequest(): ServicePaymentRequest {\n        const parameters: any = this.request.getParameters()\n\n        let request = new ServicePaymentRequest()\n        request.sourceAccount = parameters.sourceAccount;\n        request.entity = parameters.entity;\n        request.reference = parameters.reference;\n        request.amount = parameters.amount;\n        request.operationName = \"\";\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation;\n        request.scheduling = this.requestFactory.createScheduling(parameters);\n\n        return request;\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexesPaths)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizableRegexesPaths)\n        )\n    }\n}\n","\r\nexport class GetContractNumberAnswersRequest {\r\n\r\n    respostasUser: string[];\r\n    nif: string;\r\n\r\n    constructor() {\r\n        this.respostasUser = [];\r\n        this.nif = \"\";\r\n    }\r\n\r\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetUpdateClientInformationPersonal implements AgentifaiCommand<WidgetResponse> {\n\n  private nonAnonymizableRegexPathsSuccess: string[] = [\n      \"headers.+\",\n      \"status\",\n      \"body.expirado\"\n  ]\n\n  private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n  constructor(\n      private request: AgentifaiRequest,\n      private responseFactory: AgentifaiResponseFactoryService\n  ) {}\n  \n  execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n      const headers = this.request.getHeaders()\n\n      return service.getUpdateClientInfoIdentification(headers)\n          .pipe(\n              map(resp => this.createSuccessResponse(resp)),\n              catchError(error => this.createErrorResponse(error))\n          )\n  }\n\n  private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n      return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n  }\n\n  private createSuccessResponse(response: any): WidgetResponse {\n      return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n  }\n\n  private createErrorResponse(errorResponse: any) {\n      return throwError(\n          this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n      )\n  }\n\n}","import { Injectable } from '@angular/core';\nimport { Storage } from '@ionic/storage';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StorageService {\n\n  private apiUrlKey = \"apiUrl\"\n  private apiKeyKey = \"apiKey\"\n  private baseUrlKey = \"baseUrl\"\n  private settingsKey = \"settings\"\n\n  constructor(private storage: Storage) { }\n\n  getApiUrl() {\n    return this.get(this.apiUrlKey)\n  }\n\n  setApiUrl(apiUrl: string) {\n    return this.set(this.apiUrlKey, apiUrl)\n  }\n\n  getApiKey() {\n    return this.get(this.apiKeyKey)\n  }\n\n  setApiKey(apiKey: string) {\n    return this.set(this.apiKeyKey, apiKey)\n  }\n\n  getbaseUrl() {\n    return this.get(this.baseUrlKey)\n  }\n\n  setBaseUrl(baseUrl: string) {\n    return this.set(this.baseUrlKey, baseUrl)\n  }\n\n  getSettings() {\n    return this.get(this.settingsKey)\n  }\n\n  setSettings(settings: any) {\n    return this.set(this.settingsKey, settings)\n  }\n\n  private get(key: string) {\n    return this.ready()\n      .then(() => this.storage.get(key))\n  }\n\n  private set(key: string, value: any) {\n    return this.ready()\n      .then(() => this.storage.set(key, value))\n  }\n\n  private ready() {\n    return this.storage.ready()\n  }\n\n}\n","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { CredentialUnlockQuestionsRequest } from 'src/app/models/operation/request/customers/CredentialUnlockQuestionsRequest';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\n\nexport class GetCredentialsUnlockQuestions implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        \"body\\.(operationId|questions\\.*|passwordRegeneration|forceDuplicateOperation)\"\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters: any = this.request.getParameters()\n        const request = this.createRequest(parameters);\n\n        return service.getCredentialUnlockQuestions(headers, request)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createRequest(parameters: any): CredentialUnlockQuestionsRequest {\n        const request = new CredentialUnlockQuestionsRequest();\n        request.contractNumber = parameters.contractNumber;\n        request.phoneNumber = parameters.phoneNumber;\n        return request;\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","\nexport class AgentifaiUtils {\n\n    static mapFromString(data: string) {\n        var json: any;\n        try {\n            json = JSON.parse(data);\n        } catch (error) {\n            json = this.mapFromAny(data);\n        }\n        return json\n    }\n\n    static mapFromAny(data: any) {\n        const dataStr = JSON.stringify(data);\n        return JSON.parse(dataStr);\n    }\n\n    static convertToApiFormat(detectedValue) {\n        const detectedValueWithDots = detectedValue.replace(\",\", \".\");\n        const result = parseFloat(detectedValueWithDots);\n        const resultInCents = (result * 100).toFixed(0);\n        const resultInApiFormat = resultInCents.toString();\n\n        return resultInApiFormat;\n    }\n\n}\n\n","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetTelecommunicationConfigurationsCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPaths: String[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n\n        return service.getTelecomConfigurations(headers)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPaths)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizableRegexPaths)\n        )\n    }\n\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AgentifaiCardsTransformerService {\n\n  addNewCardProperties(cards: [any]): [any] {\n    if (cards != null) {\n      cards.forEach(card => {\n        card.cardName = card.description != null ? card.description.split(\" - \").reverse()[0] : null;\n      });\n    }\n\n    return cards;\n  }\n\n  addCardsGeneralDataProperties(data: any): any {\n    var cardAccounts = data.cardAccounts\n    cardAccounts = this.addCardAccountsCardProperties(cardAccounts);\n\n    var defaultCardAccount = data.defaultCardAccount;\n    if (defaultCardAccount != null) {\n      defaultCardAccount = this.addNewCardProperties(defaultCardAccount.cards);\n    }\n\n    return data\n  }\n\n  private addCardAccountsCardProperties(accounts: [any]): [any] {\n    accounts.forEach(account => {\n      var cards = account.cards\n      account.cards = this.addNewCardProperties(cards)\n    })\n\n    return accounts\n  }\n\n}\n","export class CredentialUnlockQuestionsRequest {\n\n    contractNumber: string;\n    phoneNumber: String;\n\n    constructor(){\n        this.contractNumber = \"\";\n        this.phoneNumber = \"\";\n    }\n\n}","import { MatrixActivateSimExe } from \"src/app/models/cardMatrix/MatrixActivateSimExe\";\nimport { MatrixRequisitionSimExe } from \"src/app/models/cardMatrix/MatrixRequisitionSimExe\";\nimport { AgentifaiRequestFactoryService } from \"src/app/services/agentifai/agentifai-request-factory.service\";\n\nexport class CredentialsManagementUtils {\n\n    static createMatrixRequisitionSimExe(parameters: any, requestFactory: AgentifaiRequestFactoryService) : MatrixRequisitionSimExe {\n        const request = new MatrixRequisitionSimExe()\n        request.operationId = parseInt(parameters.operationId)\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation\n        request.operationName = ''\n        request.scheduling = requestFactory.createScheduling(parameters)\n        request.adressSequenceNumber = parseInt(parameters.addressSequenceNumber)\n        request.motive = requestFactory.createGenericKeyValue(parameters[\"motive\"])\n\n        return request\n    }\n\n    static createMatrixActivateSimExe(parameters: any, requestFactory: AgentifaiRequestFactoryService): MatrixActivateSimExe {\n        const request = new MatrixActivateSimExe()\n        request.operationId = parseInt(parameters.operationId)\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation\n        request.operationName = ''\n        request.scheduling = requestFactory.createScheduling(parameters)\n        request.matrixReferenceNumber = parameters.matrixReferenceNumber\n        request.hasNifCreds = parameters.hasNifCreds\n\n        return request\n    }\n\n}","import { Observable, throwError } from \"rxjs\";\nimport { catchError, map } from \"rxjs/operators\";\nimport { AgentifaiRequest } from \"src/app/agentifai/models/agentifai-request\";\nimport { WidgetResponse } from \"src/app/agentifai/models/agentifai-widget-response\";\nimport { Anonymization } from \"src/app/agentifai/utils/anonymization-utils\";\nimport { AgentifaiResponseFactoryService } from \"src/app/services/agentifai/agentifai-response-factory.service\";\nimport { AgentifaiServicesProvider } from \"src/app/services/agentifai/agentifai-services.service\";\nimport { AgentifaiCommand } from \"../../commom/agentifai-command\";\n\nexport class GetMatrixConfig implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        'headers.+',\n        'status',\n        String.raw `body\\.((adressList\\.[^.]+\\.adressSequenceNumber)|motiveList\\.[^.]+)`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        \n        return service.matrixConfig(headers)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { GenericOperationRequest } from 'src/app/models/operation/request/GenericOperationRequest'\n\nexport class MBWayPartnerAcceptTransferCGDAccountRequest extends GenericOperationRequest {\n  acceptedTransferCGD: boolean;\n}\n  ","import { GenericOperationRequest } from 'src/app/models/operation/request/GenericOperationRequest'\nimport { Charges } from 'src/app/models/operation/Charges';\n\nexport class TransferInternalRequest extends GenericOperationRequest {\n\n\n    charges: Charges[];\n    sourceAccount: string;\n    destinationAccount: string;\n    destinationAccountCurrency: string;\n    amount: string;\n    currency: string;\n    descriptionForSourceAccount: string;\n    descriptionForDestinationAccount: string;   \n    finality: string;\n    comment: string;\n\n    constructor() {\n        super();\n        this.charges = [new Charges()];\n        this.sourceAccount = '';\n        this.destinationAccount = '';\n        this.destinationAccountCurrency = '';\n        this.amount = '';\n        this.currency = '';\n        this.descriptionForSourceAccount = '';\n        this.descriptionForDestinationAccount = '';     \n        this.finality = '';\n        this.comment = '';\n    }\n\n    get getSourceAccount(): any {\n        return this.sourceAccount;\n    }\n\n    set setSourceAccount(sourceAccount: any) {\n        this.sourceAccount = sourceAccount;\n    }\n\n    get getDestinationAccountAccount(): any {\n        return this.destinationAccount;\n    }\n\n    set setDestinationAccountAccount(destinationAccount: any) {\n        this.destinationAccount = destinationAccount;\n    }\n\n    get getDestinationAccountCurrency(): any {\n        return this.destinationAccountCurrency;\n    }\n\n    set setDestinationAccountCurrency(destinationAccountCurrency: any) {\n        this.destinationAccountCurrency = destinationAccountCurrency;\n    }\n\n    get getAmount(): string {\n        return this.amount;\n    }\n\n    set setAmount(amount: string) {\n        this.amount = amount;\n    }\n\n    get getCurrency(): any {\n        return this.currency;\n    }\n\n    set setCurrency(currency: any) {\n        this.currency = currency;\n    }\n\n    get getDescriptionForSourceAccount(): any {\n        return this.descriptionForSourceAccount;\n    }\n\n    set setDescriptionForSourceAccount(descriptionForSourceAccount: any) {\n        this.descriptionForSourceAccount = descriptionForSourceAccount;\n    }\n\n    get getdescriptionForDestinationAccount(): any {\n        return this.descriptionForDestinationAccount;\n    }\n\n    set setdescriptionForDestinationAccount(descriptionForDestinationAccount: any) {\n        this.descriptionForDestinationAccount = descriptionForDestinationAccount;\n    }\n\n    get getFinality(): string {\n        return this.finality;\n    }\n\n    set setFinality(finality: string) {\n        this.finality = finality;\n    }\n\n    get getComment(): string {\n        return this.comment;\n    }\n\n    set setComment(comment: string) {\n        this.comment = comment;\n    }\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\n\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class DisableBannerPage implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\"\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) {}\n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters = this.request.getParameters()\n        const pageName = parameters.pageName\n\n        return service.disableLandingPageBanner(headers, pageName)\n            .pipe(\n                map( resp => this.createSuccessResponse(resp) ),\n                catchError( error => this.createErrorResponse(error) )\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UtilsService {\n\n  handleError({ error, isLogin = null, isFingerPrint = null }: { error: any; isLogin?: Boolean; isFingerPrint?: Boolean; }) { }\n\n  APPSetTimeout() { }\n\n  APPClearTimeout() { }\n\n  resetCredentials() { }\n\n\n}\n","import { Injectable } from '@angular/core';\nimport { AgentifaiCommandType } from 'src/app/agentifai/commands/commom/agentifai-command-type';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { ExecuteServicePaymentCommand } from 'src/app/agentifai/commands/payments/services/execute-service-payment';\nimport { GetAccountsCommand } from 'src/app/agentifai/commands/accounts/get-accounts';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { GetFrequentServicePaymentCommand } from 'src/app/agentifai/commands/payments/services/get-frequent-service-payment';\nimport { GetPaymentsGeneralData } from 'src/app/agentifai/commands/payments/get-payments-general-data';\nimport { GetOperationProofCommand } from 'src/app/agentifai/commands/operation-proof/get-operation-proof';\nimport { GetCurrentCustomerContactsCommand } from 'src/app/agentifai/commands/get-current-customer-contacts';\nimport { SendOperationProofCommand } from 'src/app/agentifai/commands/operation-proof/send-operation-proof';\nimport { SimulateServicePaymentCommand } from 'src/app/agentifai/commands/payments/services/simulate-service-payment';\nimport { GetPaymentsEntityCommand } from 'src/app/agentifai/commands/payments/get-payments-entity';\nimport { GetAccountBalance } from 'src/app/agentifai/commands/accounts/get-account-balances';\nimport { GetTransactions } from 'src/app/agentifai/commands/accounts/get-transactions';\nimport { SimulateInternalTransferCommand } from 'src/app/agentifai/commands/transfers/internal/simulate-internal-transfer';\nimport { AgentifaiRequestFactoryService } from 'src/app/services/agentifai/agentifai-request-factory.service';\nimport { ExecuteInternalTransferCommand } from 'src/app/agentifai/commands/transfers/internal/execute-internal-transfer';\nimport { ExecuteSEPATransferCommand } from 'src/app/agentifai/commands/transfers/sepa/execute-sepa-transfer';\nimport { SimulateSEPATransferCommand } from 'src/app/agentifai/commands/transfers/sepa/simulate-sepa-transfer';\nimport { ExecuteImmediateTransferCommand } from 'src/app/agentifai/commands/transfers/immediate/execute-immediate-transfer';\nimport { SimulateImmediateTransferCommand } from 'src/app/agentifai/commands/transfers/immediate/simulate-immediate-transfer';\nimport { GetTransferTypeValidation } from 'src/app/agentifai/commands/transfers/get-transfer-type-validation';\nimport { GetClientStatus } from 'src/app/agentifai/commands/transfers/get-client-status';\nimport { GetTransferCalendarRestrictions } from 'src/app/agentifai/commands/transfers/get-transfer-calendar-restrictions';\nimport { GetTransfersGeneralData } from 'src/app/agentifai/commands/transfers/get-transfers-general-data';\nimport { GetFrequentInternalTransfer } from 'src/app/agentifai/commands/transfers/internal/get-frequent-internal-transfer';\nimport { GetFrequentSEPATransfer } from 'src/app/agentifai/commands/transfers/sepa/get-frequent-sepa-transfer';\nimport { GetCredentialsUnlockQuestions } from 'src/app/agentifai/commands/unlock-credentials/get-credential-unlock-questions';\nimport { UnlockCredentials } from 'src/app/agentifai/commands/unlock-credentials/unlock-credentials';\nimport { GetTermsAndConditionsConsentCommand } from 'src/app/agentifai/commands/terms-and-conditions/get-terms-and-conditions-consent';\nimport { ConsentTermsAndConditionsCommand } from 'src/app/agentifai/commands/terms-and-conditions/consent-terms-and-conditions';\nimport { AgentifaiAccountsTransformerService } from 'src/app/services/agentifai/agentifai-accounts-transformer.service';\nimport { GetTelecommunicationConfigurationsCommand } from 'src/app/agentifai/commands/payments/telecommunications/get-telecommunicaition-configurations';\nimport { SimulateTelecommunicationPaymentCommand } from 'src/app/agentifai/commands/payments/telecommunications/simulate-telecommunication-payment';\nimport { ExecuteTelecommunicationPaymentCommand } from 'src/app/agentifai/commands/payments/telecommunications/execute-telecommunication-payment';\nimport { GetFrequentTelecommunicationPaymentCommand } from 'src/app/agentifai/commands/payments/telecommunications/get-frequent-telecommunication-payment';\nimport { GetMBWayCardsCommand } from 'src/app/agentifai/commands/mbway/get-mbway-cards';\nimport { SimulateMBWayAdhesionCommand } from 'src/app/agentifai/commands/mbway/simulate-mbway-adhesion';\nimport { ExecuteMBWayAdhesionCommand } from 'src/app/agentifai/commands/mbway/execute-mbway-adhesion';\nimport { UpdateTransferConsentForCgdAccountCommand } from 'src/app/agentifai/commands/mbway/update-transfer-consent-for-cgd-account';\nimport { GetImmediateTransferPhoneNumbersCommand } from 'src/app/agentifai/commands/transfers/immediate/get-immediate-transfer-phone-numbers';\nimport { GetImmediateTransferAccountsCommand } from 'src/app/agentifai/commands/transfers/immediate/get-immediate-transfer-accounts';\nimport { GetPaymentCards } from 'src/app/agentifai/commands/cards/get-payment-cards';\nimport { GetCardsGeneralData } from 'src/app/agentifai/commands/cards/get-cards-general-data';\nimport { GetCardAccountTransactions } from 'src/app/agentifai/commands/cards/get-card-account-transactions';\nimport { AgentifaiCardsTransformerService } from 'src/app/services/agentifai/agentifai-cards-transformer.service'\nimport { ExecuteCardPaymentCommand } from 'src/app/agentifai/commands/cards/payment/execute-card-payment';\nimport { SimulateCardPaymentCommand } from 'src/app/agentifai/commands/cards/payment/simulate-card-payment';\nimport { GetSmsTokenPhoneNumber } from 'src/app/agentifai/commands/cards/get-sms-token-phone-number';\nimport { ActivateCardCommand } from 'src/app/agentifai/commands/cards/activation/activate-card';\nimport { GetCustomerManager } from 'src/app/agentifai/commands/callback/get-customer-manager';\nimport { GetManagerCallbackConfig } from 'src/app/agentifai/commands/callback/get-manager-callback-config';\nimport { GetManagerAvailableTime } from 'src/app/agentifai/commands/callback/get-manager-available-time';\nimport { SetCallback } from 'src/app/agentifai/commands/callback/set-callback';\nimport { SimulatePersonalLoan } from 'src/app/agentifai/commands/loans/simulate-personal-loan';\nimport { GetPersonalLoanGeneralData } from 'src/app/agentifai/commands/loans/get-personal-loan-general-data';\nimport { SimulatePersonalLoanAdhesion } from 'src/app/agentifai/commands/loans/simulate-personal-loan-adhesion';\nimport { ExecutePersonalLoanAdhesion } from 'src/app/agentifai/commands/loans/execute-personal-loan-adhesion';\nimport { GetPrivateContent } from 'src/app/agentifai/commands/content/get-private-content';\nimport { DisableBannerPage } from 'src/app/agentifai/commands/content/disable-banner-page';\nimport { GetShowcaseCards } from 'src/app/agentifai/commands/cards/acquisition/get-showcase-cards';\nimport { GetShowcaseProductDocument } from 'src/app/agentifai/commands/cards/acquisition/get-showcase-product-document';\nimport { GetCardAdhesionAccounts } from 'src/app/agentifai/commands/cards/acquisition/get-card-adhesion-accounts';\nimport { GetCardAdhesionConfigurations } from 'src/app/agentifai/commands/cards/acquisition/get-card-adhesion-configurations';\nimport { SimulateCardAdhesion } from 'src/app/agentifai/commands/cards/acquisition/simulate-card-adhesion';\nimport { InitNewCreditCard } from 'src/app/agentifai/commands/cards/acquisition/init-new-credit-card';\nimport { ExecuteCardAdhesion } from 'src/app/agentifai/commands/cards/acquisition/execute-card-adhesion';\nimport { GetShowcaseCharacteristics } from 'src/app/agentifai/commands/cards/acquisition/get-showcase-characteristics';\nimport { UnlockContractNumber } from 'src/app/agentifai/commands/unlock-contract-number/unlock-contract-number';\nimport { GetContractNumberUnlockQuestions } from 'src/app/agentifai/commands/unlock-contract-number/get-contract-number-unlock-questions';\nimport { GetUpdateClientInformationAddress } from 'src/app/agentifai/commands/customers/update-client-information/get-update-client-information-address';\nimport { GetUpdateClientInformationList } from 'src/app/agentifai/commands/customers/update-client-information/get-update-client-information-list';\nimport { SimulateUpdateClientInformation } from 'src/app/agentifai/commands/customers/update-client-information/simulate-update-client-information';\nimport { ExecuteUpdateClientInformation } from 'src/app/agentifai/commands/customers/update-client-information/execute-update-client-information';\nimport { GetUpdateClientInformationValidity } from 'src/app/agentifai/commands/customers/update-client-information/get-update-client-information-validity';\nimport { GetUpdateClientInformationProfessional } from 'src/app/agentifai/commands/customers/update-client-information/get-update-client-information-professional';\nimport { GetUpdateClientInformationPersonal } from 'src/app/agentifai/commands/customers/update-client-information/get-update-client-information-personal';\nimport { GetCredentialsManagement } from 'src/app/agentifai/commands/credentialsmanagement/get-credentials-management';\nimport { GetMatrixConfig } from 'src/app/agentifai/commands/credentialsmanagement/matrixrequisition/get-matrix-config';\nimport { SimulateMatrixRequisition } from 'src/app/agentifai/commands/credentialsmanagement/matrixrequisition/simulate-matrix-requisition';\nimport { ExecuteMatrixRequisition } from 'src/app/agentifai/commands/credentialsmanagement/matrixrequisition/execute-matrix-requisition';\nimport { SimulateActivateMatrix } from 'src/app/agentifai/commands/credentialsmanagement/matrixactivation/simulate-activate-matrix';\nimport { ExecuteActivateMatrix } from 'src/app/agentifai/commands/credentialsmanagement/matrixactivation/execute-activate-matrix';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AgentifaiCommandFactoryService {\n\n  constructor(\n    private responseFactory: AgentifaiResponseFactoryService,\n    private requestFactory: AgentifaiRequestFactoryService,\n    private accountsTranformer: AgentifaiAccountsTransformerService,\n    private cardsTransformer: AgentifaiCardsTransformerService\n  ) { }\n\n  createCommand(\n    commandType: AgentifaiCommandType,\n    request: AgentifaiRequest\n  ): AgentifaiCommand<any> {\n    let command: AgentifaiCommand<any>;\n\n    switch (commandType) {\n\n      case AgentifaiCommandType.GetAccounts:\n        command = this.createGetAccounts(request);\n        break;\n\n      case AgentifaiCommandType.GetAccountBalances:\n        command = this.createGetAccountBalances(request);\n        break;\n\n      case AgentifaiCommandType.GetTransactions:\n        command = this.createGetTransactions(request);\n        break;\n\n      case AgentifaiCommandType.GetPaymentsEntity:\n        command = this.createGetPaymentsEntity(request);\n        break;\n\n      case AgentifaiCommandType.GetFrequentServicePayment:\n        command = this.createGetFrequentServicePayment(request);\n        break;\n\n      case AgentifaiCommandType.GetPaymentsGeneralData:\n        command = this.createGetPaymentsGeneralData(request);\n        break;\n\n      case AgentifaiCommandType.SimulateServicePayment:\n        command = this.createSimulateServicePayment(request);\n        break;\n\n      case AgentifaiCommandType.ExecuteServicePayment:\n        command = this.createExecuteService(request);\n        break;\n\n      case AgentifaiCommandType.GetTelecommunicationConfigurations:\n        command = this.createGetTelecommunicationConfigurations(request);\n        break;\n\n      case AgentifaiCommandType.SimulateTelecommunicationPayment:\n        command = this.createSimulateTelecommunicationPayment(request);\n        break;\n\n      case AgentifaiCommandType.ExecuteTelecommunicationPayment:\n        command = this.createExecuteTelecommunicationPayment(request);\n        break;\n\n      case AgentifaiCommandType.GetFrequentTelecommunicationPayment:\n        command = this.createGetFrequentTelecommunicationPayment(request);\n        break;\n\n      case AgentifaiCommandType.GetCurrentCustomerContacts:\n        command = this.createGetCurrentCustomerContacts(request);\n        break;\n\n      case AgentifaiCommandType.GetOperationProof:\n        command = this.createGetOperationProof(request);\n        break;\n\n      case AgentifaiCommandType.SendOperationProof:\n        command = this.createSendOperationProof(request);\n        break;\n\n      case AgentifaiCommandType.SimulateInternalTransfer:\n        command = this.createSimulateInternalTransfer(request);\n        break;\n\n      case AgentifaiCommandType.ExecuteInternalTransfer:\n        command = this.createExecuteInternalTransfer(request);\n        break;\n\n      case AgentifaiCommandType.SimulateSEPATransfer:\n        command = this.createSimulateSEPATransfer(request);\n        break;\n\n      case AgentifaiCommandType.ExecuteSEPATransfer:\n        command = this.createExecuteSEPATransfer(request);\n        break;\n\n      case AgentifaiCommandType.SimulateImmediateTransfer:\n        command = this.createSimulateImmediateTransferCommand(request);\n        break;\n\n      case AgentifaiCommandType.ExecuteImmediateTransfer:\n        command = this.createExecuteImmediateTransferCommand(request);\n        break;\n\n      case AgentifaiCommandType.GetTransferTypeValidation:\n        command = this.createGetTransferTypeValidation(request);\n        break;\n\n      case AgentifaiCommandType.GetTransferCalendarRestrictions:\n        command = this.createGeTransferCalendarRestrictions(request);\n        break;\n\n      case AgentifaiCommandType.GetClientStatus:\n        command = this.createGetClientStatus(request);\n        break;\n\n      case AgentifaiCommandType.GetTransfersGeneralData:\n        command = this.createGetTransfersGeneralData(request);\n        break;\n\n      case AgentifaiCommandType.GetFrequentInternalTransfer:\n        command = this.createGetFrequentInternalTransfer(request);\n        break;\n\n      case AgentifaiCommandType.GetFrequentSEPATransfer:\n        command = this.createGetFrequentSEPATransfer(request);\n        break;\n\n      case AgentifaiCommandType.GetImmediateTransferPhoneNumbers:\n        command = this.createGetImmediateTransferPhoneNumbers(request);\n        break;\n\n      case AgentifaiCommandType.GetImmediateTransferAccounts:\n        command = this.createGetImmediateTransferAccounts(request);\n        break;\n\n      case AgentifaiCommandType.GetCredentialUnlockQuestions:\n        command = this.createGetCredentialUnlockQuestions(request);\n        break;\n\n      case AgentifaiCommandType.UnlockCredentials:\n        command = this.createUnlockQuestions(request);\n        break;\n\n      case AgentifaiCommandType.GetContractNumberUnlockQuestions:\n        command = this.createGetContractNumberUnlockQuestions(request);\n        break;\n\n      case AgentifaiCommandType.UnlockContractNumber:\n        command = this.createUnlockContractNumber(request);\n        break;\n\n      case AgentifaiCommandType.GetTermsAndConditionsConsent:\n        command = this.createGetTermsAndConditionsConsent(request);\n        break;\n\n      case AgentifaiCommandType.ConsentTermsAndConditions:\n        command = this.createConsentTermsAndConditions(request);\n        break;\n\n      case AgentifaiCommandType.GetMBWayCards:\n        command = this.createGetMBWayCards(request);\n        break;\n\n      case AgentifaiCommandType.SimulateMBWayAdhesion:\n        command = this.createSimulateMBWayAdhesion(request);\n        break;\n\n      case AgentifaiCommandType.ExecuteMBWayAdhesion:\n        command = this.createExecuteMBWayAdhesion(request);\n        break;\n\n      case AgentifaiCommandType.UpdateTransferConsentForCgdAccount:\n        command = this.createUpdateTransferConsentForCgdAccounts(request);\n        break;\n\n      case AgentifaiCommandType.GetPaymentCards:\n        command = this.createGetPaymentCards(request);\n        break;\n\n      case AgentifaiCommandType.GetCardsGeneralData:\n        command = this.createGetCardsGeneralData(request);\n        break;\n\n      case AgentifaiCommandType.GetCardAccountTransactions:\n        command = this.createGetCardAccountTransactions(request);\n        break;\n\n      case AgentifaiCommandType.SimulateCardPayment:\n        command = this.createSimulateCardPayment(request);\n        break;\n\n      case AgentifaiCommandType.ExecuteCardPayment:\n        command = this.createExecuteCardPayment(request);\n        break;\n\n      case AgentifaiCommandType.ActivateCard:\n        command = this.createActivateCard(request);\n        break;\n\n      case AgentifaiCommandType.GetSmsTokenPhoneNumber:\n        command = this.createGetSmsTokenPhoneNumber(request);\n        break;\n\n      case AgentifaiCommandType.GetCustomerManager:\n        command = this.createGetCustomerManager(request);\n        break;\n\n      case AgentifaiCommandType.GetManagerCallbackConfig:\n        command = this.createGetManagerCallbackConfig(request);\n        break;\n\n      case AgentifaiCommandType.GetManagerAvailableTime:\n        command = this.createGetManagerAvailableTime(request);\n        break;\n\n      case AgentifaiCommandType.SetCallback:\n        command = this.createSetCallback(request);\n        break;\n\n      case AgentifaiCommandType.SimulatePersonalLoan:\n        command = this.createSimulatePersonalLoan(request);\n        break;\n\n      case AgentifaiCommandType.GetPersonalLoanGeneralData:\n        command = this.createGetPersonalLoanGeneralData(request);\n        break;\n\n      case AgentifaiCommandType.SimulatePersonalLoanAdhesion:\n        command = this.createSimulatePersonalLoanAdhesion(request);\n        break;\n\n      case AgentifaiCommandType.ExecutePersonalLoanAdhesion:\n        command = this.createExecutePersonalLoanAdhesion(request);\n        break;\n\n      case AgentifaiCommandType.GetPrivateContent:\n        command = this.createGetPrivateContent(request);\n        break;\n\n      case AgentifaiCommandType.DisableBannerPage:\n        command = this.createDisableBannerPage(request);\n        break;\n\n      case AgentifaiCommandType.GetShowcaseCards:\n        command = this.createGetShowcaseCards(request);\n        break;\n\n      case AgentifaiCommandType.GetShowcaseCharacteristics:\n        command = this.createGetShowcaseCharacteristics(request);\n        break;\n\n      case AgentifaiCommandType.GetShowcaseProductDocument:\n        command = this.createGetShowcaseProductDocument(request);\n        break;\n\n      case AgentifaiCommandType.GetCardAdhesionAccounts:\n        command = this.createGetCardAdhesionAccounts(request);\n        break;\n\n      case AgentifaiCommandType.GetCardAdhesionConfigurations:\n        command = this.createGetCardAdhesionConfigurations(request);\n        break;\n\n      case AgentifaiCommandType.SimulateCardAdhesion:\n        command = this.createSimulateCardAdhesion(request);\n        break;\n\n      case AgentifaiCommandType.InitNewCreditCard:\n        command = this.createInitNewCreditCard(request);\n        break;\n\n      case AgentifaiCommandType.ExecuteCardAdhesion:\n        command = this.createExecuteCardAdhesion(request);\n        break;\n\n      case AgentifaiCommandType.GetUpdateClientInformationAddress:\n        command = this.createGetUpdateClientInformationAddress(request);\n        break;\n\n      case AgentifaiCommandType.GetUpdateClientInformationPersonal:\n        command = this.createGetUpdateClientInformationPersonal(request);\n        break;\n\n      case AgentifaiCommandType.GetUpdateClientInformationProfessional:\n        command = this.createGetUpdateClientInformationProfessional(request);\n        break;\n\n      case AgentifaiCommandType.GetUpdateClientInformationValidity:\n        command = this.createGetUpdateClientInformationValidity(request);\n        break;\n\n      case AgentifaiCommandType.GetUpdateClientInformationList:\n        command = this.createGetUpdateClientInformationList(request);\n        break;\n\n      case AgentifaiCommandType.SimulateUpdateClientInformation:\n        command = this.createSimulateUpdateClientInformation(request);\n        break;\n\n      case AgentifaiCommandType.ExecuteUpdateClientInformation:\n        command = this.createExecuteUpdateClientInformation(request);\n        break;\n\n      case AgentifaiCommandType.GetCredentialsManagement:\n        command = this.createGetCredentialsManagement(request);\n        break;\n\n      case AgentifaiCommandType.GetMatrixConfig:\n        command = this.createGetMatrixConfig(request);\n        break;\n\n      case AgentifaiCommandType.SimulateMatrixRequisition:\n        command = this.createSimulateMatrixRequistion(request);\n        break;\n\n      case AgentifaiCommandType.ExecuteMatrixRequisition:\n        command = this.createExecuteMatrixRequisition(request);\n        break;\n\n      case AgentifaiCommandType.SimulateActivateMatrix:\n        command = this.createSimulateActivateMatrix(request);\n        break;\n      \n      case AgentifaiCommandType.ExecuteActivateMatrix:\n        command = this.createExecuteActivateMatrix(request);\n        break;\n\n      default:\n        break;\n        \n    }\n\n    return command;\n  }\n\n  //Accounts\n  private createGetAccounts(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetAccountsCommand(request, this.responseFactory, this.accountsTranformer);\n  }\n\n  private createGetAccountBalances(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetAccountBalance(request, this.responseFactory);\n  }\n\n  private createGetTransactions(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetTransactions(request, this.responseFactory);\n  }\n\n  //Services Payment\n  private createGetPaymentsEntity(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetPaymentsEntityCommand(request, this.responseFactory);\n  }\n\n  private createGetPaymentsGeneralData(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetPaymentsGeneralData(request, this.responseFactory, this.accountsTranformer);\n  }\n\n  private createGetFrequentServicePayment(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetFrequentServicePaymentCommand(request, this.responseFactory);\n  }\n\n  private createSimulateServicePayment(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new SimulateServicePaymentCommand(request, this.responseFactory, this.requestFactory);\n  }\n\n  private createExecuteService(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new ExecuteServicePaymentCommand(request, this.responseFactory, this.requestFactory);\n  }\n\n  private createGetCurrentCustomerContacts(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetCurrentCustomerContactsCommand(request, this.responseFactory);\n  }\n\n  //Telecommunications Payment\n  private createGetTelecommunicationConfigurations(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetTelecommunicationConfigurationsCommand(request, this.responseFactory);\n  }\n\n  private createSimulateTelecommunicationPayment(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new SimulateTelecommunicationPaymentCommand(request, this.requestFactory, this.responseFactory);\n  }\n\n  private createExecuteTelecommunicationPayment(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new ExecuteTelecommunicationPaymentCommand(request, this.requestFactory, this.responseFactory);\n  }\n\n  private createGetFrequentTelecommunicationPayment(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetFrequentTelecommunicationPaymentCommand(request, this.responseFactory);\n  }\n\n  //Proofs\n  private createGetOperationProof(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetOperationProofCommand(request, this.responseFactory);\n  }\n\n  private createSendOperationProof(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new SendOperationProofCommand(request, this.responseFactory);\n  }\n\n  //Transfers\n  private createSimulateInternalTransfer(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new SimulateInternalTransferCommand(request, this.responseFactory, this.requestFactory);\n  }\n\n  private createExecuteInternalTransfer(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new ExecuteInternalTransferCommand(request, this.responseFactory, this.requestFactory);\n  }\n\n  private createSimulateSEPATransfer(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new SimulateSEPATransferCommand(request, this.responseFactory, this.requestFactory);\n  }\n\n  private createExecuteSEPATransfer(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new ExecuteSEPATransferCommand(request, this.responseFactory, this.requestFactory);\n  }\n\n  private createSimulateImmediateTransferCommand(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new SimulateImmediateTransferCommand(request, this.responseFactory);\n  }\n\n  private createExecuteImmediateTransferCommand(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new ExecuteImmediateTransferCommand(request, this.responseFactory, this.requestFactory);\n  }\n\n  private createGetTransferTypeValidation(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetTransferTypeValidation(request, this.responseFactory);\n  }\n\n  private createGeTransferCalendarRestrictions(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetTransferCalendarRestrictions(request, this.responseFactory);\n  }\n\n  private createGetClientStatus(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetClientStatus(request, this.responseFactory);\n  }\n\n  private createGetTransfersGeneralData(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetTransfersGeneralData(request, this.responseFactory, this.accountsTranformer);\n  }\n\n  private createGetFrequentInternalTransfer(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetFrequentInternalTransfer(request, this.responseFactory);\n  }\n\n  private createGetFrequentSEPATransfer(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetFrequentSEPATransfer(request, this.responseFactory);\n  }\n\n  private createGetImmediateTransferPhoneNumbers(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetImmediateTransferPhoneNumbersCommand(request, this.responseFactory);\n  }\n\n  private createGetImmediateTransferAccounts(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetImmediateTransferAccountsCommand(request, this.responseFactory, this.accountsTranformer);\n  }\n\n  //Terms and Conditions\n  private createGetTermsAndConditionsConsent(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetTermsAndConditionsConsentCommand(request, this.responseFactory);\n  }\n\n  private createConsentTermsAndConditions(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new ConsentTermsAndConditionsCommand(request, this.responseFactory);\n  }\n\n  //Unlock Contract\n  private createGetCredentialUnlockQuestions(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetCredentialsUnlockQuestions(request, this.responseFactory);\n  }\n\n  private createUnlockQuestions(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new UnlockCredentials(request, this.responseFactory);\n  }\n\n  //Unlock Contract Number\n  private createGetContractNumberUnlockQuestions(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetContractNumberUnlockQuestions(request, this.responseFactory);\n  }\n\n  private createUnlockContractNumber(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new UnlockContractNumber(request, this.responseFactory);\n  }\n\n  // MBWAY\n  private createGetMBWayCards(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetMBWayCardsCommand(request, this.responseFactory);\n  }\n\n  private createSimulateMBWayAdhesion(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new SimulateMBWayAdhesionCommand(request, this.responseFactory, this.requestFactory);\n  }\n\n  private createExecuteMBWayAdhesion(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new ExecuteMBWayAdhesionCommand(request, this.responseFactory, this.requestFactory);\n  }\n\n  private createUpdateTransferConsentForCgdAccounts(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new UpdateTransferConsentForCgdAccountCommand(request, this.responseFactory, this.requestFactory);\n  }\n\n  // Cards\n  private createGetPaymentCards(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetPaymentCards(request, this.responseFactory, this.cardsTransformer);\n  }\n\n  private createGetCardsGeneralData(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetCardsGeneralData(request, this.responseFactory, this.cardsTransformer);\n  }\n\n  private createGetCardAccountTransactions(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetCardAccountTransactions(request, this.responseFactory, this.cardsTransformer);\n  }\n\n  private createSimulateCardPayment(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new SimulateCardPaymentCommand(request, this.requestFactory, this.responseFactory);\n  }\n\n  private createExecuteCardPayment(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new ExecuteCardPaymentCommand(request, this.requestFactory, this.responseFactory);\n  }\n\n  private createActivateCard(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new ActivateCardCommand(request, this.responseFactory);\n  }\n\n  private createGetSmsTokenPhoneNumber(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetSmsTokenPhoneNumber(request, this.responseFactory);\n  }\n\n  // Callback\n  private createGetCustomerManager(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetCustomerManager(request, this.responseFactory)\n  }\n\n  private createGetManagerCallbackConfig(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetManagerCallbackConfig(request, this.responseFactory)\n  }\n\n  private createGetManagerAvailableTime(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetManagerAvailableTime(request, this.responseFactory)\n  }\n\n  private createSetCallback(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new SetCallback(request, this.responseFactory)\n  }\n\n  // Loans\n  private createSimulatePersonalLoan(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new SimulatePersonalLoan(request, this.requestFactory, this.responseFactory)\n  }\n\n  private createGetPersonalLoanGeneralData(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetPersonalLoanGeneralData(request, this.responseFactory, this.accountsTranformer)\n  }\n\n  private createSimulatePersonalLoanAdhesion(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new SimulatePersonalLoanAdhesion(request, this.requestFactory, this.responseFactory)\n  }\n\n  private createExecutePersonalLoanAdhesion(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new ExecutePersonalLoanAdhesion(request, this.requestFactory, this.responseFactory)\n  }\n\n  private createGetPrivateContent(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetPrivateContent(request, this.responseFactory)\n  }\n\n  // Moratorium Form\n  private createDisableBannerPage(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new DisableBannerPage(request, this.responseFactory)\n  }\n\n  // Card acquisition\n  private createGetShowcaseCards(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetShowcaseCards(request, this.responseFactory)\n  }\n\n  private createGetShowcaseCharacteristics(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetShowcaseCharacteristics(request, this.responseFactory)\n  }\n\n  private createGetShowcaseProductDocument(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetShowcaseProductDocument(request, this.responseFactory)\n  }\n\n  private createGetCardAdhesionAccounts(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetCardAdhesionAccounts(request, this.responseFactory, this.accountsTranformer)\n  }\n\n  private createGetCardAdhesionConfigurations(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetCardAdhesionConfigurations(request, this.responseFactory)\n  }\n\n  private createSimulateCardAdhesion(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new SimulateCardAdhesion(request, this.responseFactory, this.requestFactory)\n  }\n\n  private createInitNewCreditCard(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new InitNewCreditCard(request, this.responseFactory, this.requestFactory)\n  }\n\n  private createExecuteCardAdhesion(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new ExecuteCardAdhesion(request, this.responseFactory, this.requestFactory)\n  }\n\n  //Update Client Information\n  private createGetUpdateClientInformationAddress(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetUpdateClientInformationAddress(request, this.responseFactory)\n  }\n\n  private createGetUpdateClientInformationPersonal(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetUpdateClientInformationPersonal(request, this.responseFactory)\n  }\n\n  private createGetUpdateClientInformationProfessional(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetUpdateClientInformationProfessional(request, this.responseFactory)\n  }\n\n  private createGetUpdateClientInformationValidity(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetUpdateClientInformationValidity(request, this.responseFactory)\n  }\n\n  private createGetUpdateClientInformationList(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetUpdateClientInformationList(request, this.responseFactory)\n  }\n\n  private createSimulateUpdateClientInformation(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new SimulateUpdateClientInformation(request, this.requestFactory, this.responseFactory)\n  }\n\n  private createExecuteUpdateClientInformation(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new ExecuteUpdateClientInformation(request, this.requestFactory, this.responseFactory)\n  }\n\n  private createGetCredentialsManagement(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetCredentialsManagement(request, this.responseFactory)\n  }\n\n  private createGetMatrixConfig(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new GetMatrixConfig(request, this.responseFactory)\n  }\n\n  private createSimulateMatrixRequistion(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new SimulateMatrixRequisition(request, this.responseFactory, this.requestFactory)\n  }\n\n  private createExecuteMatrixRequisition(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new ExecuteMatrixRequisition(request, this.responseFactory, this.requestFactory)\n  }\n\n  private createSimulateActivateMatrix(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new SimulateActivateMatrix(request, this.responseFactory, this.requestFactory)\n  }\n\n  private createExecuteActivateMatrix(request: AgentifaiRequest): AgentifaiCommand<WidgetResponse> {\n    return new ExecuteActivateMatrix(request, this.responseFactory, this.requestFactory)\n  }\n\n}","import { Observable, throwError } from \"rxjs\";\nimport { catchError, map } from \"rxjs/operators\";\nimport { AgentifaiRequest } from \"src/app/agentifai/models/agentifai-request\";\nimport { WidgetResponse } from \"src/app/agentifai/models/agentifai-widget-response\";\nimport { Anonymization } from \"src/app/agentifai/utils/anonymization-utils\";\nimport { MatrixRequisitionSimExe } from \"src/app/models/cardMatrix/MatrixRequisitionSimExe\";\nimport { AgentifaiRequestFactoryService } from \"src/app/services/agentifai/agentifai-request-factory.service\";\nimport { AgentifaiResponseFactoryService } from \"src/app/services/agentifai/agentifai-response-factory.service\";\nimport { AgentifaiServicesProvider } from \"src/app/services/agentifai/agentifai-services.service\";\nimport { AgentifaiCommand } from \"../../commom/agentifai-command\";\nimport { CredentialsManagementUtils } from \"../credentials-management-utils\";\n\nexport class SimulateMatrixRequisition implements AgentifaiCommand<WidgetResponse> {\n    \n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        'headers.+',\n        'status',\n        `body\\.(operationId|operationStatus|${Anonymization.scheduling()})`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private requestFactory: AgentifaiRequestFactoryService\n    ) { }   \n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters = this.request.getParameters()\n        const request = this.createRequest(parameters)\n        \n        return service.simulateMatrixRequisition(headers,request)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createRequest(parameters: any): MatrixRequisitionSimExe {\n        return CredentialsManagementUtils.createMatrixRequisitionSimExe(parameters, this.requestFactory);\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { CardsUtils } from 'src/app/agentifai/commands/cards/cards-utils';\n\nexport class GetMBWayCardsCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        `body\\.[^.]+\\.(${CardsUtils.nonAnonymizedCardProperties})`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const fullAccountKey = this.request.getParameters()[\"fullAccountKey\"];\n\n        return service.getCardsForMbwayAssociation(headers, fullAccountKey)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\n\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetPrivateContent implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\"\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) {}\n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters = this.request.getParameters()\n        const featureId = parameters.featureId\n\n        return service.getPrivateContent(headers, featureId)\n            .pipe(\n                map( resp => this.createSuccessResponse(resp) ),\n                catchError( error => this.createErrorResponse(error) )\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\n\nexport class GetOperationProofCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\"\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const operationId = Number(this.request.getParameters()[\"operationId\"]);\n\n        return service.getOperationProof(headers, operationId)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Api } from 'src/app/services/api/api.service';\nimport { Observable } from 'rxjs';\nimport { TransferInternalRequest } from 'src/app/models/operation/request/transfers/TransferInternalRequest';\nimport { TransferSEPARequest } from 'src/app/models/operation/request/transfers/TransferSEPARequest';\nimport { TransferImmediateRequest } from 'src/app/models/operation/request/transfers/TransferImmediateRequest';\nimport { ServicePaymentRequest } from 'src/app/models/operation/request/payments/ServicePaymentRequest';\nimport { TelecommunicationsPaymentRequest } from 'src/app/models/operation/request/payments/TelecommunicationsPaymentRequest';\nimport { Credential } from 'src/app/models/operation/Credential';\nimport { OperationProofByEmailRequest } from 'src/app/models/operation/OperationProofByEmailRequest';\nimport { CredentialUnlockQuestionsRequest } from 'src/app/models/operation/request/customers/CredentialUnlockQuestionsRequest';\nimport { CredentialUnlockAnswersRequest } from 'src/app/models/operation/request/customers/CredentialUnlockAnswersRequest';\nimport { VoiceTreatmentConsentRequest } from 'src/app/models/operation/request/devices/VoiceTreatmentConsentRequest';\nimport { MBWayPartnerRequest } from 'src/app/models/operation/request/cards/MBWayPartnerRequest';\nimport { MBWayPartnerAcceptTransferCGDAccountRequest } from 'src/app/models/operation/request/cards/MBWayPartnerAcceptTransferCGDAccountRequest';\nimport { CardPaymentRequest } from 'src/app/models/operation/request/cards/CardPaymentRequest';\nimport { CallbackSolicitationRequest } from 'src/app/models/operation/request/customers/CallbackSolicitationRequest';\nimport { ConsumerLoanAdhesionRequest } from 'src/app/models/operation/request/loans/ConsumerLoanAdhesionRequest';\nimport { CardRequestRequest } from 'src/app/models/operation/request/cards/CardRequestRequest';\nimport { GetContractNumberQuestionsRequest } from 'src/app/models/operation/request/customers/GetContractNumberQuestionsRequest';\nimport { GetContractNumberAnswersRequest } from 'src/app/models/operation/request/customers/GetContractNumberAnswersRequest';\nimport { UpdateClientInfoRequest } from 'src/app/models/customers/updateClientInfo/UpdateClientInfoRequest';\nimport { MatrixActivateSimExe } from 'src/app/models/cardMatrix/MatrixActivateSimExe';\nimport { MatrixRequisitionSimExe } from 'src/app/models/cardMatrix/MatrixRequisitionSimExe';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AgentifaiServicesProvider {\n\n  ACCOUNTS_FOR_BALANCES_AND_TRANSACTIONS: string = \"business/accounts?targetOperationType=BALANCES_AND_TRANSACTIONS\";\n  ACCOUNTS_FOR_BALANCES_AND_TRANSACTIONS_DEPOSITSONLY: string = \"business/accounts?targetOperationType=DEPOSIT_ACCOUNT_BALANCES\";\n  ACCOUNT_BALANCES_AND_TRANSACTIONS: string = \"business/accounts/#ACCOUNT#?includeBalancesInResponse=true&includeTransactionsInResponse=true&fromBookDate=#FROM_DATE#&toBookDate=#TO_DATE#\";\n  ACCOUNT_TRANSACTIONS: string = \"business/accounts/#ACCOUNT#/transactions?fromBookDate=#FROM_DATE#&toBookDate=#TO_DATE#\";\n  ACCOUNT_BALANCES: string = \"business/accounts/#ACCOUNT#/balances\";\n\n  EXECUTE_SERVICE_PAYMENT: string = \"business/payments/service/executions\";\n  SIMULATE_SERVICE_PAYMENT: string = \"business/payments/service/simulations\";\n  PAYMENTS_PAGE_DATA_SERVICE: string = \"business/payments/generaldataforpayments?paymentOperationsFilter=SERVICES_PAYMENT,TAXES_PAYMENT,TELECOMMUNICATIONS_PAYMENT,SOCIAL_SECURITY_PAYMENT\";\n  PAYMENT_CALENDAR_SERVICE: string = \"business/payments/calendarrestrictions\";\n  GET_ENTITY: string = \"business/payments/entities\";\n  GET_FREQUENT_SERVICE_PAYMENT_DETAIL: string = \"business/payments/service/frequent\";\n\n  TELECOM_CONFIGURATIONS: string = \"business/payments/telecommunications/configurations\";\n  SIMULATE_TELECOM_PAYMENT: string = \"business/payments/telecommunications/simulations\";\n  EXECUTE_TELECOM_PAYMENT: string = \"business/payments/telecommunications/executions\";\n  GET_FREQUENT_TELECOM_PAYMENT_DETAIL: string = \"business/payments/telecommunications/frequent\";\n\n  BUSINESS_OPERATIONS: string = \"business/operations\";\n  PROOFS_EMAILS: string = \"proofs/emails\";\n\n  INTERNAL_TRANSFER_SIMULATION_SERVICE: string = \"business/transfers/internal/simulations\";\n  INTERNAL_TRANSFER_EXECUTION_SERVICE: string = \"business/transfers/internal/executions\";\n  INTERNAL_TRANSFER_CERTIFICATE_SERVICE: string = \"business/transfers/internal/certificate\";\n  INTERNAL_TRANSFER_SIMULATE_CERTIFICATE_SERVICE: string = \"business/transfers/internal/certificate/simulations\";\n  INTERNAL_TRANSFER_FREQUENT_SERVICE: string = \"business/transfers/internal/frequent\";\n  TRANSFER_PAGE_DATA_SERVICE: string = \"business/transfers/generaldatafortransfers\";\n  TRANSFER_TYPE_SERVICE: string = \"business/transfers/types/validate?targetAccount=\";\n  INTERNAL_TRANSFER_CALENDAR_SERVICE: string = \"business/transfers/calendarrestrictions?transferTypeFilter=INTERNAL_TRANSFER\";\n  SEPA_TRANSFER_CALENDAR_SERVICE: string = \"business/transfers/calendarrestrictions?transferTypeFilter=SEPA_TRANSFER\";\n  ALL_TRANSFERS_CALENDAR_SERVICE: string = \"business/transfers/calendarrestrictions?transferTypeFilter=INTERNAL_TRANSFER,SEPA_TRANSFER,INTERNATIONAL_TRANSFER\";\n  SEPA_TRANSFER_SIMULATION_SERVICE: string = \"business/transfers/sepa/simulations\";\n  SEPA_TRANSFER_EXECUTION_SERVICE: string = \"business/transfers/sepa/executions\";\n  SEPA_TRANSFER_CERTIFICATE_SERVICE: string = \"business/transfers/sepa/certificate\";\n  SEPA_TRANSFER_SIMULATE_CERTIFICATE_SERVICE: string = \"business/transfers/sepa/certificate/simulations\";\n  SEPA_TRANSFER_FREQUENT_SERVICE: string = \"business/transfers/sepa/frequent\";\n  SEPA_TRANSFER_VALIDATE_BENEFICIARY: string = \"business/transfers/sepa/validations/beneficiary?beneficiaryName=\";\n  SEPA_TRANSFER_GET_FREQUENT_OPERATION: string = \"business/transfers/sepa/frequent\";\n  IMMEDIATE_TRANSFER_SIMULATION_SERVICE: string = \"business/transfers/immediate/simulations\";\n  IMMEDIATE_TRANSFER_EXECUTION_SERVICE: string = \"business/transfers/immediate/executions\";\n  ACCOUNTS_FOR_IMMEDIATE_TRANSFER_REGISTRATION: string = \"business/accounts?targetOperationType=IMMEDIATE_TRANSFER_REGISTRATION\";\n  PHONE_NUMBERS_FOR_IMMEDIATE_TRANSFER_REGISTRATION: string = \"business/transfers/immediate/registration/contacts\";\n  MBWAY_PARTNER_CLIENT_STATUS: string = \"business/cards/mbwaypartner/clientStatus\";\n  MBWAY_PARTNER_CARDS_LIST: string = \"business/cards/mbwaypartner/cards\";\n  WITHDRAWAL_SIMULATE_ADHESION_MBWAY: string = \"business/cards/mbwaypartner/adhesion/simulationsv2\";\n  WITHDRAWAL_EXECUTE_ADHESION_MBWAY: string = \"business/cards/mbwaypartner/adhesion/executionsv2\";\n  MBWAY_ACCEPT_TRANSFERS_CGD: string = \"business/cards/mbwaypartner/acceptTransferCGD\";\n  CUSTOMER_CONTACTS: string = \"business/customers/current/contacts\";\n  \n  CREDENTIAL_UNLOCK_QUESTIONS: string = \"business/customers/contracts/credencialUnlockQuestions\";\n  CREDENTIAL_UNLOCK_ANSWERS: string = \"business/customers/contracts/credencialUnlockAnswers\"\n  GET_CONTRACT_NUMBER_QUESTIONS: string = \"business/customers/contracts/contractUnlockQuestions\";\n  GET_CONTRACT_NUMBER_ANSWERS: string = \"business/customers/contracts/contractUnlockAnswers\"\n\n  VOICE_TREATMENT_CONSENT: string = \"business/consent/voiceTreatment\";\n  LOGOUT_SERVICE: string = \"system/security/authentications/current\";\n\n  GENERAL_CARD_DATA: string = \"business/cards/customercarddata\";\n  CARD_ACCOUNT_TRANSACTIONS: string = \"business/cards/accounts/#CARDACCOUNT#/transactions\";\n  CARD_PAYMENT_DATA: string = \"business/cards?targetCardOperationType=CARD_PAYMENT\";\n  SIMULATE_CARD_PAYMENT: string = \"business/cards/payments/simulations\";\n  EXECUTE_CARD_PAYMENT: string = \"business/cards/payments/executions\";\n\n  CARD_ACTIVATION: string = \"business/cards/activation/#CARDNUMBER#/#CARDVALIDITYDATE#/activateCard\";\n\n  GET_SMS_TOKEN: string = \"business/cards/phoneNumber\";\n\n  CUSTOMER_MANAGER: string = \"business/customers/manager\";\n  MANAGER_CALLBACK_CONFIG: string = \"business/customers/manager/callback/configuration\";\n  MANAGER_CALLBACK_AVAILABLETIME: string = \"business/customers/manager/callback/availabletime\";\n  CUSTOMER_CALLBACK: string = \"business/customers/manager/callback\";\n\n  LOANS_CONSUMER_CALCULATOR: string = \"business/loans/consumer/calculatorV2\";\n  CONSULT_LOAN_ADHESION_GENERAL_DATA: string = \"business/loans/consumer/adhesionGeneralDataV2\";\n  LOAN_ADHESION_SIMULATION: string = \"business/loans/consumer/adhesionSimulationV2\";\n  LOAN_ADHESION_EXECUTION: string = \"business/loans/consumer/adhesionExecutionV2\";\n\n  //contents\n  CONTENT_PRIVATE_CONTENT: string = \"business/content/privateContent/features/#FEATUREID#\";\n  CONTENT_PRIVATE_CONTENT_LANDING_BANNER_DISABLE: string = \"business/content/privateContent/landingPage/banner/disable\";\n\n  SHOWCASE_CARDS: string = \"business/showcase/cards\";\n  SHOWCASE_CHARACTERISTICS: string = \"business/showcase/characteristics?characteristicsId=#CHARACTERISTICSID#\";\n  SHOWCASE_PRODUCT_DOCUMENT: string = \"business/showcase/productdocument?productCode=#PRODUCTCODE#&docType=#DOCTYPE#\";\n  CARD_ADHESION_ACCOUNTS: string = \"business/accounts?targetOperationType=NEW_CARD_REQUEST\";\n  CARD_ADHESION_CONFIGURATIONS: string = \"business/cards/requests/configurations?fullAccountKey=#ACCOUNT#&productCode=#PRODUCTCODE#\";\n  CARD_ADHESION_SIMULATE: string = \"business/cards/requests/simulations\";\n  CARD_ADHESION_INIT: string = \"business/cards/requests/initNewCreditCard\";\n  CARD_ADHESION_EXECUTE: string = \"business/cards/requests/executions\";\n\n  // Update client personal data\n  UPDATE_CLIENT_INFO_VALIDITY: string = \"business/customers/updateClientInformation/validity\";\n  UPDATE_CLIENT_INFO_ADDRESS: string = \"business/customers/updateClientInformation/address\";\n  UPDATE_CLIENT_INFO_PERSONAL: string = \"business/customers/updateClientInformation/personal\";\n  UPDATE_CLIENT_INFO_PROFESSIONAL: string = \"business/customers/updateClientInformation/professional\";\n  UPDATE_CLIENT_MARTIAL_STATUS: string = \"business/customers/updateClientInformation/list/#ID#\";\n  UPDATE_CLIENT_SIMULATION: string = \"business/customers/updateClientInformation/simulation\";\n  UPDATE_CLIENT_EXECUTION: string = \"business/customers/updateClientInformation/execution\";\n\n  //CREDENTIALS_MANAGEMENT\n  GET_CREDENTIALS: string = \"business/credentialsmanagement/credentials/#CREDENTIALTYPE#\";\n\n  // MATRIX CARD\n  MATRIX_CONFIG: string = \"business/credentialsmanagement/matrixrequisition/config\";\n  MATRIX_REQUISITION_SIMULATION: string = \"business/credentialsmanagement/matrixrequisition/simulations\";\n  MATRIX_REQUISITION_EXECUTION: string = \"business/credentialsmanagement/matrixrequisition/executions\";\n  MATRIX_ACTIVE_SIMULATION: string = \"business/credentialsmanagement/matrixactivation/simulations\";\n  MATRIX_ACTIVE_EXECUTION: string = \"business/credentialsmanagement/matrixactivation/executions\";\n\n  // parametros de servicos\n  ACCOUNT_PARAM: string = \"#ACCOUNT#\";\n  FROM_DATE_PARAM: string = \"#FROM_DATE#\";\n  TO_DATE_PARAM: string = \"#TO_DATE#\";\n  CARD_ACCOUNT_PARAM: string = \"#CARDACCOUNT#\";\n  CARD_NUMBER: string = \"#CARDNUMBER#\";\n  CARD_VALIDITY_DATE: string = \"#CARDVALIDITYDATE#\"\n  CHARACTERISTICSID_PARAM: string = \"#CHARACTERISTICSID#\";\n  PRODUCTCODE_PARAM: string = \"#PRODUCTCODE#\";\n  DOCTYPE_PARAM: string = \"#DOCTYPE#\";\n  FEATUREID: string = \"#FEATUREID#\";\n  ID: string = \"#ID#\";\n  CREDENTIAL_PARAM = \"#CREDENTIALTYPE#\";\n\n  constructor(private api: Api) { }\n\n  logout(): Observable<any> {\n    let obs = this.api.deleteLogoutAgentifai(this.LOGOUT_SERVICE, null);\n    this.api.genericClearCookies();\n    return obs;\n  }\n\n  /* obter a listagem de contas para os saldos e movimentos de conta */\n  getBalancesAndTransactionsAccountList(headers: any, onlyDeposit: boolean = false): Observable<any> {\n    if (onlyDeposit == true) {\n      return this.api.genericGetAuthenticatedMethodAgentifai(this.ACCOUNTS_FOR_BALANCES_AND_TRANSACTIONS_DEPOSITSONLY, headers);\n    }\n    else {\n      return this.api.genericGetAuthenticatedMethodAgentifai(this.ACCOUNTS_FOR_BALANCES_AND_TRANSACTIONS, headers);\n    }\n  }\n\n  /* obtem os detalhes de saldo e movimentos da conta no formato label/value standard da app */\n  getDebitAccountBalancesAndMovements(headers: any, sourceAccount: string, minimumDate: string, maximumDate: string): Observable<any> {\n    let url = this.ACCOUNT_BALANCES_AND_TRANSACTIONS.replace(this.ACCOUNT_PARAM, sourceAccount)\n      .replace(this.FROM_DATE_PARAM, minimumDate)\n      .replace(this.TO_DATE_PARAM, maximumDate);\n    return this.api.genericGetAuthenticatedMethodAgentifai(url, headers);\n  }\n\n  /* lista de movimentos de uma conta DO */\n  getTransactions(headers: any, request: any): Observable<any> {\n    let url = this.ACCOUNT_TRANSACTIONS.replace(this.ACCOUNT_PARAM, request.sourceAccount)\n      .replace(this.FROM_DATE_PARAM, request.minimumDate)\n      .replace(this.TO_DATE_PARAM, request.maximumDate);\n\n    if (request.nextPageKeys && request.nextPageKeys != \"\") {\n      url += \"&pageKey=\" + request.nextPageKeys;\n    }\n    return this.api.genericGetAuthenticatedMethodAgentifai(url, headers);\n  }\n\n  /* obtem os detalhes de saldo da conta */\n  getAccountBalance(headers: any, fullAccountKey: string): Observable<any> {\n    let url = this.ACCOUNT_BALANCES.replace(this.ACCOUNT_PARAM, fullAccountKey);\n    return this.api.genericGetAuthenticatedMethodAgentifai(url, headers);\n  }\n\n  //SERVICES PAYMENT\n  /* dados para a pagina de pagamentos */\n  getPaymentsPageData(headers: any, includeFrequentOperationImages: boolean): Observable<any> {\n    var url = this.PAYMENTS_PAGE_DATA_SERVICE;\n\n    if (includeFrequentOperationImages) {\n      url += \"&includeFrequentOperationsImages=true\";\n    }\n\n    return this.api.genericGetAuthenticatedMethodAgentifai(url, headers);\n  }\n\n  /* obter calendario de pagamentos */\n  getCalendarToPayment(headers: any): Observable<any> {\n    return this.api.genericGetAuthenticatedMethodAgentifai(this.PAYMENT_CALENDAR_SERVICE, headers);\n  }\n\n  /* obter nome da entidade */\n  getPaymentsEntity(headers: any, entityNumber: string): Observable<any> {\n    var url = this.GET_ENTITY + \"/\" + entityNumber;\n    return this.api.genericGetAuthenticatedMethodAgentifai(url, headers);\n  }\n\n  /* simular pagamento de servicos */\n  simulateServicePayment(headers: any, request: ServicePaymentRequest): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.SIMULATE_SERVICE_PAYMENT, headers);\n  }\n\n  /* executar pagamento de servicos */\n  executeServicePayment(headers: any, request: ServicePaymentRequest, credential?: Credential): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.EXECUTE_SERVICE_PAYMENT, headers, credential);\n  }\n\n  /* dados para a pagina de pagamento de telecomunicacoes */\n  getTelecomConfigurations(headers: any): Observable<any> {\n    return this.api.genericGetAuthenticatedMethodAgentifai(this.TELECOM_CONFIGURATIONS, headers);\n  }\n\n  /* simular pagamento de telecomunicacoes */\n  simulateTelecomPayment(headers: any, request: TelecommunicationsPaymentRequest): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.SIMULATE_TELECOM_PAYMENT, headers);\n  }\n\n  /* executar pagamento de telecomunicacoes */\n  executeTelecomPayment(headers: any, request: TelecommunicationsPaymentRequest, credential?: Credential): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.EXECUTE_TELECOM_PAYMENT, headers, credential);\n  }\n\n  //OPERATIONS PROOF\n  /* send email to user with document of operation */\n  sendOperationProofByEmail(headers: any, operationId: number, request: OperationProofByEmailRequest): Observable<any> {\n    const url = this.BUSINESS_OPERATIONS + `/${operationId}/` + this.PROOFS_EMAILS;\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, url, headers);\n  }\n\n  getOperationProof(headers: any, operationId: number): Observable<any> {\n    let url = this.BUSINESS_OPERATIONS + `/${operationId}/` + \"proof\";\n    return this.api.genericGetAuthenticatedMethodAgentifai(url, headers);\n  }\n\n  //Frequent Operations\n  getFrequentPaymentDetail(headers: any, operationId: string): Observable<any> {\n    let url = this.GET_FREQUENT_SERVICE_PAYMENT_DETAIL + \"?idFrequentOperation=\" + operationId;\n    return this.api.genericGetAuthenticatedMethodAgentifai(url, headers);\n  }\n\n  getFrequentTelecomPaymentDetail(headers: any, operationId: string): Observable<any> {\n    let url = this.GET_FREQUENT_TELECOM_PAYMENT_DETAIL + \"?idFrequentOperation=\" + operationId;\n    return this.api.genericGetAuthenticatedMethodAgentifai(url, headers);\n  }\n\n  //Contacts\n  getCustomerContacts(headers: any): Observable<any> {\n    return this.api.genericGetAuthenticatedMethodAgentifai(this.CUSTOMER_CONTACTS, headers);\n  }\n\n  /********************************/\n  /******** Transferências ********/\n  /********************************/\n\n  /* dados para a pagina de transferencias */\n  getTransferPageData(headers: any, includeFrequentOperationImages: boolean, account?: string) {\n    let url = this.TRANSFER_PAGE_DATA_SERVICE + \"?transferOperationsFilter=INTERNAL_TRANSFER\";\n    url += \", SEPA_TRANSFER\";\n\n    if (account && account != \"\") {\n      url += \"&fullAccountKey=\" + account;\n    }\n    if (includeFrequentOperationImages) {\n      url += \"&includeFrequentOperationsImages=true\";\n    }\n    return this.api.genericGetAuthenticatedMethodAgentifai(url, headers);\n  }\n\n  /* tipo de transferencia */\n  getTransferType(headers: any, account: string): Observable<any> {\n    return this.api.genericGetAuthenticatedMethodAgentifai(this.TRANSFER_TYPE_SERVICE + account, headers);\n  }\n\n  getCalendarToAllTranfers(headers: any): Observable<any> {\n    return this.api.genericGetAuthenticatedMethodAgentifai(this.ALL_TRANSFERS_CALENDAR_SERVICE, headers);\n  }\n\n  /***** Transferências internas *****/\n\n  /* simular transferencia interna */\n  simulateInternalTransfer(headers: any, request: TransferInternalRequest): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.INTERNAL_TRANSFER_SIMULATION_SERVICE, headers);\n  }\n\n  /* executar transferencia interna */\n  executeInternalTransfer(headers: any, request: TransferInternalRequest, credential?: Credential): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.INTERNAL_TRANSFER_EXECUTION_SERVICE, headers, credential);\n  }\n\n  /* obter dados de uma transferencia frequente interna */\n  getFrequentINTERNALoperation(headers: any, operationId: number): Observable<any> {\n    let url = this.INTERNAL_TRANSFER_FREQUENT_SERVICE + \"?idFrequentOperation=\" + operationId;\n    return this.api.genericGetAuthenticatedMethodAgentifai(url, headers);\n  }\n\n  /***** Transferências SEPA *****/\n  /* validacao do nome do beneficiario nas transferencias SEPA */\n  validateSepaBeneficiaryName(headers: any, beneficiaryName): Observable<any> {\n    var url = this.SEPA_TRANSFER_VALIDATE_BENEFICIARY + beneficiaryName;\n    return this.api.genericGetAuthenticatedMethodAgentifai(url, headers);\n  }\n\n  /* simular transferencia SEPA */\n  simulateSepaTransfer(headers: any, request: TransferSEPARequest): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.SEPA_TRANSFER_SIMULATION_SERVICE, headers);\n  }\n\n  /* executar transferencia SEPA */\n  executeSepaTransfer(headers: any, request: TransferSEPARequest, credential?: Credential): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.SEPA_TRANSFER_EXECUTION_SERVICE, headers, credential);\n  }\n\n  /* obter dados de uma transferencia frequente SEPA */\n  getFrequentSEPAoperation(headers: any, operationId: number): Observable<any> {\n    let url = this.SEPA_TRANSFER_GET_FREQUENT_OPERATION + \"?idFrequentOperation=\" + operationId;\n    return this.api.genericGetAuthenticatedMethodAgentifai(url, headers);\n  }\n\n  /***** Transferências imediatas *****/\n\n  /* simular transferencia imediata - para contacto */\n  simulateImmediateTransfer(headers: any, request: TransferImmediateRequest): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.IMMEDIATE_TRANSFER_SIMULATION_SERVICE, headers);\n  }\n\n  /* executar transferencia imediata - para contacto */\n  executeImmediateTransfer(headers: any, request: TransferImmediateRequest, credential?: Credential): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.IMMEDIATE_TRANSFER_EXECUTION_SERVICE, headers, credential);\n  }\n\n  /* obter a lista de contas elegíveis para uma transferencia imediata */\n  getAccountsForImmediateTransfers(headers: any): Observable<any> {\n    return this.api.genericGetAuthenticatedMethodAgentifai(this.ACCOUNTS_FOR_IMMEDIATE_TRANSFER_REGISTRATION, headers);\n  }\n\n  /* obter a lista de numeros disponíveis para uma transferencia imediata */\n  getPhoneNumbersForImmediateTransfers(headers: any): Observable<any> {\n    return this.api.genericGetAuthenticatedMethodAgentifai(this.PHONE_NUMBERS_FOR_IMMEDIATE_TRANSFER_REGISTRATION, headers);\n  }\n\n  getMbwayPartnerClientStatus(headers: any): Observable<any> {\n    return this.api.genericGetAuthenticatedMethodAgentifai(this.MBWAY_PARTNER_CLIENT_STATUS, headers);\n  }\n\n  /* Obtém lista de cartões possíveis para associar para uma dada conta */\n  getCardsForMbwayAssociation(headers: any, fullAccountKey: string): Observable<any> {\n    let url = this.MBWAY_PARTNER_CARDS_LIST;\n    url += '?onlyCardsWithoutMBWAY=true&fullAccountKey=' + fullAccountKey;\n    return this.api.genericGetAuthenticatedMethodAgentifai(url, headers);\n  }\n\n  simulateAdhesionMbway(headers: any, request: MBWayPartnerRequest): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.WITHDRAWAL_SIMULATE_ADHESION_MBWAY, headers);\n  }\n\n  executeAdhesionMbway(headers: any, request: MBWayPartnerRequest, credential?: Credential): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.WITHDRAWAL_EXECUTE_ADHESION_MBWAY, headers, credential);\n  }\n\n  /* Após concluída a adesão deve ser perguntado ao cliente se pretende receber sempre as transferências MBWay na conta da Caixa\n      este serviço serve para registar a resposta do cliente */\n  acceptTransferCGD(headers: any, request: MBWayPartnerAcceptTransferCGDAccountRequest): Observable<any> {\n    return this.api.genericPutAuthenticatedMethodWithInputAgentifai(request, this.MBWAY_ACCEPT_TRANSFERS_CGD, headers);\n  }\n\n  /***** Termos e condições *****/\n  getVoiceTreatmentConsent(headers: any): Observable<any> {\n    return this.api.genericGetAuthenticatedMethodAgentifai(this.VOICE_TREATMENT_CONSENT, headers);\n  }\n\n  addVoiceTreatmentConsent(headers: any, request: VoiceTreatmentConsentRequest): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.VOICE_TREATMENT_CONSENT, headers);\n  }\n\n  deleteVoiceTreatmentConsent(headers: any): Observable<any> {\n    return this.api.genericDeleteAuthenticatedMethodAgentifai(this.VOICE_TREATMENT_CONSENT, headers);\n  }\n\n  /***** Desbloqueio de Contrato *****/\n\n  /* obter questões para desbloquear contrato */\n  getCredentialUnlockQuestions(headers: any, request: CredentialUnlockQuestionsRequest): Observable<any> {\n    let url = this.CREDENTIAL_UNLOCK_QUESTIONS\n      + \"?contractNumber=\" + request.contractNumber\n      + \"&phoneNumber=\" + request.phoneNumber\n\n    return this.api.genericGetMethodAgentifai(url, headers);\n  }\n\n  /* enviar respostas para desbloqueio do contrato */\n  credentialUnlockAnswers(headers: any, request: CredentialUnlockAnswersRequest): Observable<any> {\n    return this.api.genericPostMethodWithInputAgentifai(request, this.CREDENTIAL_UNLOCK_ANSWERS, headers);\n  }\n\n  /***** Obter numero de Contrato *****/\n\n  /* obter questões para obter numero de contrato */\n  getContractNumberQuestions(headers: any, request:GetContractNumberQuestionsRequest): Observable<any> {\n    let url = this.GET_CONTRACT_NUMBER_QUESTIONS\n      + \"?nif=\" + request.nif\n      + \"&phoneNumber=\" + request.phoneNumber\n\n    return this.api.genericGetMethodAgentifai(url, headers);\n  }\n\n  /* enviar respostas para obter numero de contrato */\n  getContractNumberAnswers(headers: any, request: GetContractNumberAnswersRequest): Observable<any> {\n    return this.api.genericPostMethodWithInputAgentifai(request, this.GET_CONTRACT_NUMBER_ANSWERS, headers);\n  }\n\n  /***** Cartões *****/\n\n  getCardsGeneralData(headers: any, cardAccountId?: string, targetCardOperationType?: string, omitTransactionsInResponse?: boolean): Observable<any> {\n    if (!targetCardOperationType) {\n      targetCardOperationType = 'BALANCES_AND_TRANSACTIONS';\n    }\n\n    let url = this.GENERAL_CARD_DATA + \"?targetCardOperationType=\" + targetCardOperationType;\n\n    if (cardAccountId) {\n      url += \"&cardAccountId=\" + cardAccountId + \"&omitAccountsInResponse=true\";\n    }\n\n    if (omitTransactionsInResponse) {\n      url += \"&omitTransactionsInResponse=true\";\n    }\n    return this.api.genericGetAuthenticatedMethodAgentifai(url, headers);\n  }\n\n  getCardStatementTransactions(headers: any, cardAccountId: string, statementDate?: string): Observable<any> {\n    let url = this.CARD_ACCOUNT_TRANSACTIONS.replace(this.CARD_ACCOUNT_PARAM, cardAccountId);\n\n    if (statementDate) {\n      url = url + \"?statementDate=\" + statementDate;\n    }\n\n    return this.api.genericGetAuthenticatedMethodAgentifai(url, headers);\n  }\n\n  getCardsPaymentData(headers: any): Observable<any> {\n    return this.api.genericGetAuthenticatedMethodAgentifai(this.CARD_PAYMENT_DATA, headers);\n  }\n\n  simulateCardPayment(headers: any, request: CardPaymentRequest): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.SIMULATE_CARD_PAYMENT, headers);\n  }\n\n  executeCardPayment(headers: any, request: CardPaymentRequest, credential?: Credential): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.EXECUTE_CARD_PAYMENT, headers, credential);\n  }\n\n  activateCard(headers: any, cardNumber: string, cardValidityDate: string): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodAgentifai(this.CARD_ACTIVATION.replace(this.CARD_NUMBER, cardNumber).replace(this.CARD_VALIDITY_DATE, cardValidityDate), headers);\n  }\n\n  getContactSmsToken(headers: any): Observable<any> {\n    return this.api.genericGetAuthenticatedMethodAgentifai(this.GET_SMS_TOKEN, headers);\n  }\n\n  /***** Callback *****/\n  getCustomerManager(headers: any): Observable<any> {\n    return this.api.genericGetAuthenticatedMethodAgentifai(this.CUSTOMER_MANAGER, headers);\n  }\n\n  getManagerCallbackConfig(headers: any): Observable<any> {\n    return this.api.genericGetAuthenticatedMethodAgentifai(this.MANAGER_CALLBACK_CONFIG, headers);\n  }\n\n  getManagerAvailableTime(headers: any, destinationType: number, date: string): Observable<any> {\n    let url = this.MANAGER_CALLBACK_AVAILABLETIME;\n    url += '?destinationType=' + destinationType.toString();\n    url += '&date=' + date;\n\n    return this.api.genericGetAuthenticatedMethodAgentifai(url, headers);\n  }\n\n  setCallback(headers: any, request: CallbackSolicitationRequest): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.CUSTOMER_CALLBACK, headers);\n  }\n\n  /***** LOANS *****/\n  getConsumerLoanCalculatorResult(headers: any, request: ConsumerLoanAdhesionRequest): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.LOANS_CONSUMER_CALCULATOR, headers);\n  }\n\n  getConsumerLoanAdhesionGeneralData(headers: any): Observable<any> {\n    return this.api.genericGetAuthenticatedMethodAgentifai(this.CONSULT_LOAN_ADHESION_GENERAL_DATA, headers);\n  }\n\n  simulateLoanRequest(headers: any, request: ConsumerLoanAdhesionRequest): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.LOAN_ADHESION_SIMULATION, headers);\n  }\n\n  executeLoanRequest(headers: any, request: ConsumerLoanAdhesionRequest, credential?: Credential): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.LOAN_ADHESION_EXECUTION, headers, credential);\n  }\n\n  getPrivateContent(headers: any, featureId: string): Observable<any>{\n    let url = this.CONTENT_PRIVATE_CONTENT.replace(this.FEATUREID, featureId);\n    return this.api.genericGetAuthenticatedMethodAgentifai(url, headers);\n  }\n\n  disableLandingPageBanner(headers: any, pageName: string): Observable<any> {\n    let url = this.CONTENT_PRIVATE_CONTENT_LANDING_BANNER_DISABLE + \"?pageName=\" + pageName;\n    return this.api.genericPutAuthenticatedMethodAgentifai(url, headers);\n  }\n\n  /***** CARD ACQUISITION *****/\n  getShowcaseCards(headers: any): Observable<any> {\n    return this.api.genericGetAuthenticatedMethodAgentifai(this.SHOWCASE_CARDS, headers);\n  }\n\n  getShowcaseCharacteristics(headers: any, characteristicsId: string): Observable<any> {\n    let url = this.SHOWCASE_CHARACTERISTICS.replace(this.CHARACTERISTICSID_PARAM, characteristicsId);\n    return this.api.genericGetAuthenticatedMethodAgentifai(url, headers);\n  }\n\n  getShowcaseProductDocument(headers: any, productCode: string, docType: string): Observable<any> {\n    let url = this.SHOWCASE_PRODUCT_DOCUMENT.replace(this.PRODUCTCODE_PARAM, productCode).replace(this.DOCTYPE_PARAM, docType);\n    return this.api.genericGetAuthenticatedMethodAgentifai(url, headers);\n  }\n\n  getCardAdhesionAccounts(headers: any): Observable<any> {\n    return this.api.genericGetAuthenticatedMethodAgentifai(this.CARD_ADHESION_ACCOUNTS, headers);\n  }\n\n  getCardAdhesionConfigurations(headers: any, fullAccountKey: string, productCode: string): Observable<any> {\n    let url = this.CARD_ADHESION_CONFIGURATIONS.replace(this.ACCOUNT_PARAM, fullAccountKey).replace(this.PRODUCTCODE_PARAM, productCode);\n    return this.api.genericGetAuthenticatedMethodAgentifai(url, headers);\n  }\n\n  simulateCardAdhesion(headers: any, request: CardRequestRequest): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.CARD_ADHESION_SIMULATE, headers);\n  }\n\n  initNewCreditCard(headers: any, request: CardRequestRequest): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.CARD_ADHESION_INIT, headers);\n  }\n\n  executeCardAdhesion(headers: any, request: CardRequestRequest, credential?: Credential): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.CARD_ADHESION_EXECUTE, headers, credential);\n  }\n\n  /***** UPDATE CLIENT INFO *****/\n  getUpdateClientInfoValidity(headers: any): Observable<any>  {\n    return this.api.genericGetAuthenticatedMethodAgentifai(this.UPDATE_CLIENT_INFO_VALIDITY, headers);\n  }\n\n  getUpdateClientInfoAddress(headers: any): Observable<any>  {\n    return this.api.genericGetAuthenticatedMethodAgentifai(this.UPDATE_CLIENT_INFO_ADDRESS, headers);\n  }\n\n  getUpdateClientInfoIdentification(headers: any): Observable<any> {\n    return this.api.genericGetAuthenticatedMethodAgentifai(this.UPDATE_CLIENT_INFO_PERSONAL, headers);\n  }\n\n  getUpdateClientInfoOccupation(headers: any): Observable<any> {\n    return this.api.genericGetAuthenticatedMethodAgentifai(this.UPDATE_CLIENT_INFO_PROFESSIONAL, headers);\n  }\n\n  /**\n     * \n     * @param id 0/1/2\n     * @returns Estado Civil/Paises/Profissoes\n     */\n  getUpdateClientListField(headers: any, id: string){\n    let url = this.UPDATE_CLIENT_MARTIAL_STATUS.replace(this.ID, id);\n    return this.api.genericGetAuthenticatedMethodAgentifai(url, headers);\n  }\n\n  simulateUpdateClientInfo(headers: any,request: UpdateClientInfoRequest): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.UPDATE_CLIENT_SIMULATION, headers);\n  }\n\n  executeUpdateClientInfo(headers: any, request: UpdateClientInfoRequest, credential?: Credential): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.UPDATE_CLIENT_EXECUTION,headers, credential);\n  }\n\n  /***** CREDENTIALS_MANAGEMENT *****/\n  getCredentials(headers: any, credentialType: string): Observable<any> {\n    var url = this.GET_CREDENTIALS.replace(this.CREDENTIAL_PARAM, credentialType);\n    return this.api.genericGetAuthenticatedMethodAgentifai(url, headers);\n  }\n\n  /***** MATRIX *****/\n  matrixConfig(headers: any): Observable<any> {\n    return this.api.genericGetAuthenticatedMethodAgentifai(this.MATRIX_CONFIG, headers);\n  }\n\n  simulateMatrixRequisition(headers:any, request: MatrixRequisitionSimExe): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.MATRIX_REQUISITION_SIMULATION, headers);\n  }\n\n  executeMatrixRequisition(headers:any, request: MatrixRequisitionSimExe, credential?: Credential): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.MATRIX_REQUISITION_EXECUTION, headers ,credential);\n  }\n\n  simulateActivateMatrix(headers:any, request: MatrixActivateSimExe): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.MATRIX_ACTIVE_SIMULATION, headers);\n  }\n\n  executeActivateMatrix(headers:any, request: MatrixActivateSimExe, credential?: Credential): Observable<any> {\n    return this.api.genericPostAuthenticatedMethodWithInputAgentifai(request, this.MATRIX_ACTIVE_EXECUTION, headers, credential);\n  }\n\n}\n","import { Observable, throwError } from \"rxjs\";\nimport { catchError, map } from \"rxjs/operators\";\nimport { AgentifaiRequest } from \"src/app/agentifai/models/agentifai-request\";\nimport { WidgetResponse } from \"src/app/agentifai/models/agentifai-widget-response\";\nimport { Anonymization } from \"src/app/agentifai/utils/anonymization-utils\";\nimport { MatrixRequisitionSimExe } from \"src/app/models/cardMatrix/MatrixRequisitionSimExe\";\nimport { AgentifaiRequestFactoryService } from \"src/app/services/agentifai/agentifai-request-factory.service\";\nimport { AgentifaiResponseFactoryService } from \"src/app/services/agentifai/agentifai-response-factory.service\";\nimport { AgentifaiServicesProvider } from \"src/app/services/agentifai/agentifai-services.service\";\nimport { AgentifaiCommand } from \"../../commom/agentifai-command\";\nimport { Credential } from 'src/app/models/operation/Credential';\nimport { CredentialsManagementUtils } from \"../credentials-management-utils\";\n\nexport class ExecuteMatrixRequisition implements AgentifaiCommand<WidgetResponse> {\n    \n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        'headers.+',\n        'status',\n        `body\\.(operationId|operationStatus|customerMessage|${Anonymization.scheduling()})`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private requestFactory: AgentifaiRequestFactoryService\n    ) { }   \n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters = this.request.getParameters()\n        const request = this.createRequest(parameters)\n        const credential = this.createCredentials(parameters)\n        \n        return service.executeMatrixRequisition(headers,request,credential)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createRequest(parameters: any): MatrixRequisitionSimExe {\n        return CredentialsManagementUtils.createMatrixRequisitionSimExe(parameters, this.requestFactory)\n    }\n\n    private createCredentials(parameters: any): Credential {\n        return this.requestFactory.createCredentials(parameters)\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetUpdateClientInformationProfessional implements AgentifaiCommand<WidgetResponse> {\n\n  private nonAnonymizableRegexPathsSuccess: string[] = [\n      'headers.+',\n      'status',\n      String.raw `^body\\.(expirado|trabalharPorContaDoutrem|empregadoCgd|tipoDependencia)$`\n  ]\n\n  private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n  constructor(\n      private request: AgentifaiRequest,\n      private responseFactory: AgentifaiResponseFactoryService\n  ) {}\n  \n  execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n      const headers = this.request.getHeaders()\n\n      return service.getUpdateClientInfoOccupation(headers)\n          .pipe(\n              map(resp => this.createSuccessResponse(resp)),\n              catchError(error => this.createErrorResponse(error))\n          )\n  }\n\n  private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: string[]): WidgetResponse {\n      return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n  }\n\n  private createSuccessResponse(response: any): WidgetResponse {\n      return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n  }\n\n  private createErrorResponse(errorResponse: any) {\n      return throwError(\n          this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n      )\n  }\n\n}","import { Injectable } from '@angular/core';\nimport { ResponseEvent } from 'src/app/agentifai/models/agentifai-response-event';\nimport { AgentifaiUtils } from 'src/app/agentifai/utils/agentifai-utils';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AgentifaiResponseFactoryService {\n\n  createResponseFromRestApi(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n    const event = success ? this.createResponseEventFromRestApi(response) : this.createErrorResponseEventFromRestApi(response);\n    return new WidgetResponse(event, nonAnonymizableRegexesPaths);\n  }\n\n  //Create ResponseEvent Factory\n  private createResponseEventFromRestApi(response: any): ResponseEvent {\n    return this.createResponseEvent(response.headers, response.status, AgentifaiUtils.mapFromString(response.data));\n  }\n\n  private createErrorResponseEventFromRestApi(response: any): ResponseEvent {\n    return this.createResponseEvent(response.headers, response.status, AgentifaiUtils.mapFromString(response.error));\n  }\n\n  private createResponseEvent(headers: JSON, status: number, body: JSON): ResponseEvent {\n    return new ResponseEvent(headers, status, body)\n  }\n\n}\n\n","export class OperationProofByEmailRequest {\n    targetEmail: string;\n    targetCCEmail: string;\n    recipientName: string;\n    honorificTitle: string;\n    emailSubject: string;\n    emailComment: string;\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\n\nimport { map, catchError } from 'rxjs/operators';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiUtils } from 'src/app/agentifai/utils/agentifai-utils'\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { AgentifaiAccountsTransformerService } from 'src/app/services/agentifai/agentifai-accounts-transformer.service';\nimport { AccountsUtils } from 'src/app/agentifai/commands/accounts/accounts-utils';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetAccountsCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexesPathsuccess: String[] = [\n        \"headers.+\",\n        \"status\",\n        \"body\\.(\"\n        + `defaultAccount\\.(${AccountsUtils.nonAnonymizedAccountsProperties})`\n        + `|accounts\\.[^.]+\\.(${AccountsUtils.nonAnonymizedAccountsProperties})`\n        + \")(?:$|\\W)\"\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private transformer: AgentifaiAccountsTransformerService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n\n        return service.getBalancesAndTransactionsAccountList(headers, false)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        var transformedResponse = this.transformResponse(response);\n        return this.createResponse(transformedResponse, true, this.nonAnonymizableRegexesPathsuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n    private transformResponse(response: any): any {\n        const data = AgentifaiUtils.mapFromString(response.data);\n\n        if (data.defaultAccount != null && data.accounts != null) {\n            data.accounts = this.transformer.transformAccounts(data.accounts);\n            data.defaultAccount = this.transformer.transformAccount(data.defaultAccount);\n\n            response.data = data;\n        }\n\n        return response;\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { TransferInternalRequest } from 'src/app/models/operation/request/transfers/TransferInternalRequest';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiRequestFactoryService } from 'src/app/services/agentifai/agentifai-request-factory.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\n\nexport class SimulateInternalTransferCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexesPathsSuccess: String[] = [\n        \"headers.+\",\n        \"status\",\n        `body\\.(operationId|operationStatus|charges[.].*|${Anonymization.scheduling()})`\n    ]\n\n    private nonAnonymizableRegexesPathsError: String[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private requestFactory: AgentifaiRequestFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters: any = this.request.getParameters()\n        const request = this.createRequest(parameters);\n\n        return service.simulateInternalTransfer(headers, request)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(resp => this.createErrorResponse(resp))\n            );\n    }\n\n    private createRequest(parameters: any): TransferInternalRequest {\n        const request = new TransferInternalRequest();\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation;\n        request.sourceAccount = parameters.sourceAccount;\n        request.destinationAccount = parameters.destinationAccount;\n        request.amount = parameters.amount;\n        request.currency = parameters.currency;\n        request.descriptionForSourceAccount = parameters.descriptionForSourceAccount;\n        request.descriptionForDestinationAccount = parameters.descriptionForDestinationAccount;\n        request.scheduling = this.requestFactory.createScheduling(parameters);\n\n        return request;\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexesPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizableRegexesPathsError)\n        )\n    }\n\n}","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AgentifaiAccountsTransformerService {\n\n  transformAccount(account: any): any {\n    return this.transform(account);\n  }\n\n  transformAccounts(accounts: [any]): [any] {\n    var accounts = accounts;\n\n    accounts.forEach(account => {\n      account = this.transform(account);\n    });\n\n    return accounts;\n  }\n\n  private transform(account: any): any {\n    return this.addNewAccountProperties(\n      account\n    );\n  }\n\n  private addNewAccountProperties(account: any): any {\n    account.accountName = account.description != null ? account.description.split(\" - \").reverse()[0] : null;\n    return account;\n  }\n\n}","import { AgentifaiResponseFactoryService } from \"src/app/services/agentifai/agentifai-response-factory.service\";\nimport { AgentifaiServicesProvider } from \"src/app/services/agentifai/agentifai-services.service\";\nimport { AgentifaiRequest } from \"../../models/agentifai-request\";\nimport { WidgetResponse } from \"../../models/agentifai-widget-response\";\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { Anonymization } from \"../../utils/anonymization-utils\";\nimport { AgentifaiCommand } from \"../commom/agentifai-command\";\n\nexport class GetCredentialsManagement implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        'headers.+',\n        'status',\n        String.raw `body\\.credentials\\.[^.]+\\.status`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const credentialType = this.request.getParameters().credentialType\n        \n        return service.getCredentials(headers,credentialType)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n    \n}","import { Injectable } from '@angular/core';\nimport { AgentifaiManagerProvider } from 'src/app/services/agentifai/agentifai-manager.service';\nimport { AgentifaiResponse } from 'src/app/agentifai/models/agentifai-response';\nimport { EnvironmentService } from 'src/app/services/environment-service/environment-service.service';\nimport { OpenAliceIntent } from 'src/app/agentifai/open-alice-intent';\nimport { AgentifaiWidgetDimensions } from 'src/app/agentifai/models/widget-config/agentifai-widget-dimensions';\n\ndeclare let agentifai: any;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AgentifaiPluginControllerService {\n\n  constructor(\n    private agentifaiManager: AgentifaiManagerProvider,\n    private env: EnvironmentService\n  ) { }\n\n  initialize() {\n    if (agentifai) {\n      const config = this.env.getAgentifaiConfiguration();\n      this.initializeWithConfig(config.apiUrl, config.apiKey, config.settings);\n    }\n  }\n\n  initializeWithConfig(apiUrl: string, apiKey: string, settings: any) {\n    if (agentifai) {\n      this.addCallback();\n      agentifai.initialize(apiUrl, apiKey, settings);\n    }\n  }\n\n  stop() {\n    if (agentifai) {\n      agentifai.stop()\n    }\n  }\n\n  setConfigurations(configurations: any) {\n    if (agentifai) {\n      agentifai.setConfigurations(configurations)\n    }\n  }\n\n  showWidget() {\n    if (agentifai) {\n      agentifai.setWidgetVisibility(true);\n    }\n  }\n\n  hideWidget() {\n    if (agentifai) {\n      agentifai.setWidgetVisibility(false);\n    }\n  }\n\n  showApp(intent: OpenAliceIntent = null) {\n    if (agentifai) {\n      agentifai.openApplication(intent);\n    }\n  }\n\n  hideApp() {\n    if (agentifai) {\n      agentifai.closeApplication();\n    }\n  }\n\n  registerUser(id: string, name: string, token: string, authHeaders: any) {\n    if (agentifai) {\n      const user = { \"id\": id, \"name\": name, \"token\": token };\n      agentifai.registerUser(user, authHeaders);\n    }\n  }\n\n  unregisterUser() {\n    if (agentifai) {\n      agentifai.unregisterUser();\n    }\n  }\n\n  addCallback() {\n    if (agentifai) {\n      agentifai.addClientCallback(data => {\n        this.processAgentifaiEvent(data);\n      }, () => {} );\n    }\n  }\n\n  setWidgetDimensions(dimensions: AgentifaiWidgetDimensions) {\n    if (agentifai) {\n      agentifai.setWidgetDimensions(dimensions);\n    }\n  }\n\n  setTheme(theme: string) {\n    if (agentifai) {\n      agentifai.setTheme(theme)\n    }\n  }\n\n  private processAgentifaiEvent(data: JSON) {\n    const eventType = data[\"type\"];\n\n    if (eventType == \"applicationStatus\") {\n      this.processApplicationStatusEvent(data);\n    } else if (eventType == \"request\") {\n      this.executeAgentifaiRequest(data);\n    }\n  }\n\n  private processApplicationStatusEvent(data: JSON) {\n    const isOpened = data[\"isOpened\"];\n    if (isOpened) {\n      this.env.openAlice();\n    } else {\n      this.env.closeAlice();\n    }\n  }\n\n  private executeAgentifaiRequest(data: JSON) {\n    console.log(\"REQUEST:\" + JSON.stringify(data));\n    this.agentifaiManager.executeWidgetRequest(data)\n      .subscribe(resp => {\n        this.sendResponseOfRequest(resp);\n      }, error => {\n        this.sendResponseOfRequest(error);\n      });\n  }\n\n  private sendResponseOfRequest(response: AgentifaiResponse) {\n    console.log(\"RESPONSE: \" + JSON.stringify(response));\n    agentifai.requestResult(response.requestId, response.success, response.result);\n  }\n\n}\n","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiRequestFactoryService } from 'src/app/services/agentifai/agentifai-request-factory.service';\nimport { ConsumerLoanAdhesionRequest } from 'src/app/models/operation/request/loans/ConsumerLoanAdhesionRequest';\nimport { GenericPersonalCreditWorkElement } from 'src/app/models/operation/request/loans/GenericPersonalCreditWorkElement';\n\nexport class SimulatePersonalLoan implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        String.raw`^body\\.(operationId|success|errorMessage|simulationDate|amountMin|amountMax)$`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private requestFactory: AgentifaiRequestFactoryService,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters = this.request.getParameters()\n        const request = this.createRequest(parameters);\n\n        return service.getConsumerLoanCalculatorResult(headers, request)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createRequest(parameters: any): ConsumerLoanAdhesionRequest {\n        const request = new ConsumerLoanAdhesionRequest()\n\n        if (parameters.operationId != null) {\n            request.operationId = parseInt(parameters.operationId)\n        }\n\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation\n        request.scheduling = this.requestFactory.createScheduling(parameters)\n        request.currency = parameters.currency\n        request.targetAmount = parseInt(parameters.targetAmount)\n        request.periodMonths = parseInt(parameters.periodMonths)\n        request.includeDocuments = parameters.includeDocuments\n        request.fullKeyToAccount = parameters.fullKeyToAccount\n\n        if (parameters.profession != null) {\n            const profession = new GenericPersonalCreditWorkElement()\n            profession.cod = parameters.profession.cod\n            profession.description = parameters.profession.description\n            request.profissao = profession\n        }\n\n        if (parameters.jobSector != null) {\n            const jobSector = new GenericPersonalCreditWorkElement()\n            jobSector.cod = parameters.jobSector.cod\n            jobSector.description = parameters.jobSector.description\n            request.sector = jobSector\n        }\n\n        if (parameters.jobType != null) {\n            const jobType = new GenericPersonalCreditWorkElement()\n            jobType.cod = parameters.jobType.cod\n            jobType.description = parameters.jobType.description\n            request.trabalho = jobType\n        }\n\n        if (parameters.contractType != null) {\n            const contractType = new GenericPersonalCreditWorkElement()\n            contractType.cod = parameters.contractType.cod\n            contractType.description = parameters.contractType.description\n            request.contrato = contractType\n        }\n\n        if (parameters.jobServiceTime != null) {\n            request.antiguidade = parseInt(parameters.jobServiceTime)\n        }\n\n        request.codigoIRS = parameters.irsCode\n\n        if (parameters.grossIncome != null) {\n            request.rendimentoBruto = parseInt(parameters.grossIncome)\n        }\n\n        if (parameters.netIncome != null) {\n            request.rendimentoLiquido = parseInt(parameters.netIncome)\n        }\n\n        if (parameters.monthlyExpenses != null) {\n            request.encargosMensais = parseInt(parameters.monthlyExpenses)\n        }\n\n        if (parameters.householdExpenses != null) {\n            request.despesasFamiliares = parseInt(parameters.householdExpenses)\n        }\n\n        if (parameters.householdMembers != null) {\n            request.nrAgregado = parseInt(parameters.householdMembers)\n        }\n\n        request.prestacao = parameters.installment\n\n        request.defaultSimulation = parameters.defaultSimulation\n\n        return request;\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { CardRequestRequest } from 'src/app/models/operation/request/cards/CardRequestRequest';\nimport { AgentifaiRequestFactoryService } from 'src/app/services/agentifai/agentifai-request-factory.service';\n\nexport class SimulateCardAdhesion implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        String.raw`^body\\.(operationId|operationStatus|scheduling|invalidAccountIntervenLei83|safeMessageAdhesion|normalAdherenceErrorMsg)$`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private requestFactory: AgentifaiRequestFactoryService\n    ) {}\n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders();\n        const parameters = this.request.getParameters();\n        const request = this.createRequest(parameters);\n\n        return service.simulateCardAdhesion(headers, request)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createRequest(parameters: any): CardRequestRequest {\n        const request = new CardRequestRequest();\n\n        if (parameters.operationId != null) {\n            request.operationId = parseInt(parameters.operationId)\n        }\n\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation;\n        request.scheduling = this.requestFactory.createScheduling(parameters);\n\n        request.fullAccountKey = parameters.fullAccountKey;\n        request.productCode = parameters.productCode;\n        request.cardPaymentMode = parameters.cardPaymentMode;\n        \n        if (parameters.paymentPercentage != null) {\n            request.paymentPercentage = parseInt(parameters.paymentPercentage)\n        }\n\n        request.paymentFixedValue = parameters.paymentFixedValue;\n        request.nameToPrintOnCard = parameters.nameToPrintOnCard;\n\n        if (parameters.statementEmissionDay != null) {\n            request.statementEmissionDay = parseInt(parameters.statementEmissionDay)\n        }\n\n        request.postalAddress = parameters.postalAddress;\n        request.creditLimit = parameters.creditLimit;\n\n        if (parameters.checkForCredit != null) {\n            request.checkForCredit = this.requestFactory.parseBool(parameters.checkForCredit)\n        }\n\n        if (parameters.onlineAdherence != null) {\n            request.onlineAdherence = this.requestFactory.parseBool(parameters.onlineAdherence)\n        }\n\n        if (parameters.safeMessageAdhesion != null) {\n            request.safeMessageAdhesion = this.requestFactory.parseBool(parameters.safeMessageAdhesion)\n        }\n\n        return request;\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","export class GenericKeyValue{\r\n    key: string = \"\";\r\n    value: string = \"\";\r\n\r\n    constructor(key: string, value: string){\r\n        this.key = key;\r\n        this.value = value;\r\n    }\r\n}","\nexport enum AgentifaiCommandType {\n    GetAccounts = \"GET_ACCOUNTS\",\n    GetAccountBalances = \"GET_ACCOUNT_BALANCES\",\n    GetTransactions = \"GET_TRANSACTIONS\",\n    GetPaymentsEntity = \"GET_PAYMENTS_ENTITY\",\n    GetPaymentsGeneralData = \"GET_PAYMENTS_GENERAL_DATA\",\n    GetFrequentServicePayment = \"GET_FREQUENT_SERVICES_PAYMENT\",\n    SimulateServicePayment = \"SIMULATE_SERVICE_PAYMENT\",\n    ExecuteServicePayment = \"EXECUTE_SERVICE_PAYMENT\",\n    GetTelecommunicationConfigurations = \"GET_TELECOMMUNICATIONS_CONFIGURATIONS\",\n    SimulateTelecommunicationPayment = \"SIMULATE_TELECOMMUNICATIONS_PAYMENT\",\n    ExecuteTelecommunicationPayment = \"EXECUTE_TELECOMMUNICATIONS_PAYMENT\",\n    GetFrequentTelecommunicationPayment = \"GET_FREQUENT_TELECOMMUNICATIONS_PAYMENT\",\n    GetCurrentCustomerContacts = \"GET_CURRENT_CUSTOMER_CONTACTS\",\n    GetOperationProof = \"GET_OPERATION_PROOF\",\n    SendOperationProof = \"SEND_OPERATION_PROOF\",\n    SimulateInternalTransfer = \"SIMULATE_INTERNAL_TRANSFER\",\n    ExecuteInternalTransfer = \"EXECUTE_INTERNAL_TRANSFER\",\n    SimulateSEPATransfer = \"SIMULATE_SEPA_TRANSFER\",\n    ExecuteSEPATransfer = \"EXECUTE_SEPA_TRANSFER\",\n    SimulateImmediateTransfer = \"SIMULATE_IMMEDIATE_TRANSFER\",\n    ExecuteImmediateTransfer = \"EXECUTE_IMMEDIATE_TRANSFER\",\n    GetTransferTypeValidation = \"GET_TRANSFER_TYPE_VALIDATION\",\n    GetClientStatus = \"GET_CLIENT_STATUS\",\n    GetTransferCalendarRestrictions = \"GET_TRANSFER_CALENDAR_RESTRICTIONS\",\n    GetTransfersGeneralData = \"GET_TRANSFERS_GENERAL_DATA\",\n    GetFrequentInternalTransfer = \"GET_FREQUENT_INTERNAL_TRANSFER\",\n    GetFrequentSEPATransfer = \"GET_FREQUENT_SEPA_TRANSFER\",\n    GetCredentialUnlockQuestions = \"GET_CREDENTIAL_UNLOCK_QUESTIONS\",\n    UnlockCredentials = \"UNLOCK_CREDENTIALS\",\n    GetContractNumberUnlockQuestions = \"GET_CONTRACT_NUMBER_UNLOCK_QUESTIONS\",\n    UnlockContractNumber = \"UNLOCK_CONTRACT_NUMBER\",\n    GetTermsAndConditionsConsent = \"GET_TERMS_AND_CONDITIONS_CONSENT\",\n    ConsentTermsAndConditions = \"CONSENT_TERMS_AND_CONDITIONS\",\n    GetMBWayCards = \"GET_MBWAY_CARDS\",\n    GetImmediateTransferPhoneNumbers = \"GET_IMMEDIATE_TRANSFER_PHONE_NUMBERS\",\n    GetImmediateTransferAccounts = \"GET_IMMEDIATE_TRANSFER_ACCOUNTS\",\n    SimulateMBWayAdhesion = \"SIMULATE_MBWAY_ADHESION\",\n    ExecuteMBWayAdhesion = \"EXECUTE_MBWAY_ADHESION\",\n    UpdateTransferConsentForCgdAccount = \"UPDATE_TRANSFER_ACCOUNT_CONSENT\",\n    GetPaymentCards = \"GET_PAYMENT_CARDS\",\n    GetCardsGeneralData = \"GET_CARDS_GENERAL_DATA\",\n    GetCardAccountTransactions = \"GET_CARD_ACCOUNT_TRANSACTIONS\",\n    SimulateCardPayment = \"SIMULATE_CARD_PAYMENT\",\n    ExecuteCardPayment = \"EXECUTE_CARD_PAYMENT\",\n    ActivateCard = \"ACTIVATE_CARD\",\n    GetSmsTokenPhoneNumber = \"GET_SMS_TOKEN_PHONE_NUMBER\",\n    GetCustomerManager = \"GET_CUSTOMER_MANAGER\",\n    GetManagerCallbackConfig = \"GET_MANAGER_CALLBACK_CONFIG\",\n    GetManagerAvailableTime = \"GET_MANAGER_AVAILABLE_TIME\",\n    SetCallback = \"SET_CALLBACK\",\n    SimulatePersonalLoan = \"SIMULATE_PERSONAL_LOAN\",\n    GetPersonalLoanGeneralData = \"GET_PERSONAL_LOAN_GENERAL_DATA\",\n    SimulatePersonalLoanAdhesion = \"SIMULATE_PERSONAL_LOAN_ADHESION\",\n    ExecutePersonalLoanAdhesion = \"EXECUTE_PERSONAL_LOAN_ADHESION\",\n    GetPrivateContent = \"GET_PRIVATE_CONTENT\",\n    DisableBannerPage = \"DISABLE_BANNER_PAGE\",\n    GetShowcaseCards = \"GET_CARDS_SHOWCASE\",\n    GetShowcaseCharacteristics = \"GET_PRODUCT_CHARACTERISTICS\",\n    GetShowcaseProductDocument = \"GET_PRODUCT_DOCUMENT\",\n    GetCardAdhesionAccounts = \"GET_CARD_ADHESION_ACCOUNTS\",\n    GetCardAdhesionConfigurations = \"GET_CARD_ADHESION_CONFIGURATIONS\",\n    SimulateCardAdhesion = \"SIMULATE_CARD_ADHESION\",\n    InitNewCreditCard = \"INIT_NEW_CREDIT_CARD\",\n    ExecuteCardAdhesion = \"EXECUTE_CARD_ADHESION\",\n    GetUpdateClientInformationAddress = \"GET_UPDATE_CLIENT_INFORMATION_ADDRESS\",\n    GetUpdateClientInformationPersonal = \"GET_UPDATE_CLIENT_INFORMATION_PERSONAL\",\n    GetUpdateClientInformationProfessional = \"GET_UPDATE_CLIENT_INFORMATION_PROFESSIONAL\",\n    GetUpdateClientInformationValidity = \"GET_UPDATE_CLIENT_INFORMATION_VALIDITY\",\n    GetUpdateClientInformationList = \"GET_UPDATE_CLIENT_INFORMATION_LIST\",\n    SimulateUpdateClientInformation = \"SIMULATE_UPDATE_CLIENT_INFORMATION\",\n    ExecuteUpdateClientInformation = \"EXECUTE_UPDATE_CLIENT_INFORMATION\",\n    GetCredentialsManagement = \"GET_CREDENTIALS_MANAGEMENT\",\n    GetMatrixConfig = \"GET_MATRIX_CONFIG\",\n    SimulateMatrixRequisition = \"SIMULATE_MATRIX_REQUISITION\",\n    ExecuteMatrixRequisition = \"EXECUTE_MATRIX_REQUISITION\",\n    SimulateActivateMatrix = \"SIMULATE_ACTIVATE_MATRIX\",\n    ExecuteActivateMatrix = \"EXECUTE_ACTIVATE_MATRIX\"\n};","import { GenericOperationRequest } from '../GenericOperationRequest';\r\n\r\nexport class TelecommunicationsPaymentRequest extends GenericOperationRequest {\r\n    sourceAccount: string;\r\n    reference: string;\r\n    amount: string;\r\n    paymentConfigurationCode: number;\r\n    parentPaymentConfigurationCode: number;\r\n    taxPayerNumber: string;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetUpdateClientInformationValidity implements AgentifaiCommand<WidgetResponse> {\n\n  private nonAnonymizableRegexPathsSuccess: string[] = [\n      \"headers.+\",\n      \"status\",\n      \"body.*\"\n  ]\n\n  private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n  constructor(\n      private request: AgentifaiRequest,\n      private responseFactory: AgentifaiResponseFactoryService\n  ) {}\n  \n  execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n      const headers = this.request.getHeaders()\n\n      return service.getUpdateClientInfoValidity(headers)\n          .pipe(\n              map(resp => this.createSuccessResponse(resp)),\n              catchError(error => this.createErrorResponse(error))\n          )\n  }\n\n  private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n      return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n  }\n\n  private createSuccessResponse(response: any): WidgetResponse {\n      return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n  }\n\n  private createErrorResponse(errorResponse: any) {\n      return throwError(\n          this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n      )\n  }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\n\nexport class ActivateCardCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexesPathsSuccess: String[] = [\n        \"headers.+\",\n        \"status\",\n        String.raw `^body\\.(success|failureReason)$`\n    ]\n\n    private nonAnonymizableRegexesPathsError: String[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters: any = this.request.getParameters()\n        const cardNumber = parameters[\"cardNumber\"];\n        const cardValidityDate = parameters[\"cardValidatyDate\"];\n\n        return service.activateCard(headers, cardNumber, cardValidityDate)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(resp => this.createErrorResponse(resp))\n            );\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexesPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizableRegexesPathsError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\n\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetManagerCallbackConfig implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        String.raw`^body\\.(callbackDestinations\\.\\d\\.periods\\.\\d|minDate|maxDate)$`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n\n        return service.getManagerCallbackConfig(headers)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\n\nexport class GetFrequentTelecommunicationPaymentCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        \"body\\.(operationName|operationId|amount|paymentConfigurationCode|parentPaymentConfigurationCode)(?:$|\\W)\"\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const idFrequentOperation = this.request.getParameters()[\"idFrequentOperation\"];\n\n        return service.getFrequentTelecomPaymentDetail(headers, String(idFrequentOperation))\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { Observable, throwError } from \"rxjs\";\nimport { catchError, map } from \"rxjs/operators\";\nimport { AgentifaiRequest } from \"src/app/agentifai/models/agentifai-request\";\nimport { WidgetResponse } from \"src/app/agentifai/models/agentifai-widget-response\";\nimport { Anonymization } from \"src/app/agentifai/utils/anonymization-utils\";\nimport { MatrixActivateSimExe } from \"src/app/models/cardMatrix/MatrixActivateSimExe\";\nimport { AgentifaiRequestFactoryService } from \"src/app/services/agentifai/agentifai-request-factory.service\";\nimport { AgentifaiResponseFactoryService } from \"src/app/services/agentifai/agentifai-response-factory.service\";\nimport { AgentifaiServicesProvider } from \"src/app/services/agentifai/agentifai-services.service\";\nimport { AgentifaiCommand } from \"../../commom/agentifai-command\";\nimport { CredentialsManagementUtils } from \"../credentials-management-utils\";\n\nexport class ExecuteActivateMatrix implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        'headers.+',\n        'status',\n        `body\\.(operationId|operationStatus|customerMessage|${Anonymization.scheduling()})`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private requestFactory: AgentifaiRequestFactoryService\n    ) { }  \n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters = this.request.getParameters()\n        const request = this.createRequest(parameters)\n        const credential = this.createCredentials(parameters)\n\n        return service.executeActivateMatrix(headers, request, credential)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createRequest(parameters: any): MatrixActivateSimExe {\n        return CredentialsManagementUtils.createMatrixActivateSimExe(parameters, this.requestFactory)\n    }\n    \n    private createCredentials(parameters: any) {\n        return this.requestFactory.createCredentials(parameters)\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetShowcaseCharacteristics implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        String.raw`^body\\.productCharacteristicsList\\.[0-9]+\\.(title|description)$`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) {}\n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders();\n        const characteristicsId = this.request.getParameters().characteristicsId;\n\n        return service.getShowcaseCharacteristics(headers, characteristicsId)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { Component } from '@angular/core';\nimport { Platform } from '@ionic/angular';\nimport { AgentifaiPluginControllerService } from 'src/app/services/agentifai/agentifai-plugin-controller.service';\nimport { Api } from 'src/app/services/api/api.service';\nimport { StorageService } from 'src/app/services/storage/storage.service';\nimport { AssistantUtilsService } from 'src/app/services/assistant-utils/assistant-utils.service';\nimport { InternalUtils } from 'src/app/internal/internal-utils';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.scss'],\n})\nexport class AppComponent {\n  constructor(\n    platform: Platform,\n    private api: Api,\n    private agentifaiController: AgentifaiPluginControllerService,\n    private storage: StorageService,\n    private assistantUtils: AssistantUtilsService\n  ) {\n    platform.ready().then(() => {\n      this.initializeAssistant()\n      this.setConfigurations();\n    });\n  }\n\n  private setConfigurations() {\n    let headers = this.api.getHeadersAlice();\n    let headersKeysMapping = this.api.HEADERS_KEYS_MAPPING_ALICE;\n    let endpoints = InternalUtils.getEndpointsWhitelist();\n    var endpointUrl = InternalUtils.endpoints[0].baseUrl;\n\n    this.storage.getbaseUrl().then(result => {\n      if (result != null) endpointUrl = result.baseUrl\n      this.agentifaiController.setConfigurations({ url: endpointUrl, headers: headers, headersKeysMapping: headersKeysMapping, endpoints: endpoints });\n    }, error => {\n      this.agentifaiController.setConfigurations({ url: endpointUrl, headers: headers, headersKeysMapping: headersKeysMapping, endpoints: endpoints });\n    });\n  }\n\n  private initializeAssistant() {\n    this.assistantUtils.getConfig()\n      .then( config => {\n        this.agentifaiController.initializeWithConfig(config[0], config[1], config[2])\n      })\n  }\n\n}\n","import { GenericKeyValue } from \"../../GenericKeyValue\";\nimport { GenericOperationRequest } from \"../../operation/request/GenericOperationRequest\";\n\nexport class UpdateClientInfoRequest extends GenericOperationRequest {\n\n    attachments: UpdateClientAttachment[] = [];\n    personal: UpdateClientPersonal = null;\n    professional: UpdateClientProfessional = null;\n    address: UpdateClientAddress = null;\n    political: UpdateClientPolitical = null;\n    finalityQAList: GenericKeyValue[];\n\n    constructor() {\n        super();\n    }\n}\n\n\nexport class UpdateClientAttachment {\n    name: string;\n    document: any;\n    extension: string;\n\n    constructor() {\n    }\n}\n\nexport class UpdateClientAddress {\n    moradaResidencia: string;\n    localidade: string;\n    codigoPostal: string;\n    pais: string;\n    moradaFiscalResidencia: string;\n    localidadeFiscal: string;\n    codigoPostalFiscal: string;\n    paisFiscal: string;\n    contribuinteFiscalEstrangeiro: string;\n    fiscal: boolean;\n\n    constructor() {\n\n    }\n\n}\nexport class UpdateClientPersonal {\n    nomeCompleto: string;\n    nrDoc: string;\n    nrDocFiscal: string;\n    estadoCivil: string;\n    naturalidade: string;\n    paisEstrangeiro: string;\n    nifEstrangeiro: string;\n    validade: Date;\n    paisNaturalidade: string;\n    distrito: string;\n    concelho: string;\n\n    constructor() {\n    }\n}\nexport class UpdateClientProfessional {\n    profissao: string;\n    trabalharPorContaDoutrem: boolean;\n    entidadePatronal: string;\n    cirs: string;\n    tipoDependencia: string;\n    tipoCliente: string;\n    dataInicioAtividade: Date;\n    caeData: Date;\n    cae: string;\n    situacaoSocioProfissional: string;\n    codigoProfissao: string;\n    interveniente: string;\n\n    constructor() {\n\n    }\n}\n\nexport class UpdateClientPolitical {\n\n    pep: boolean;\n    pepCargo: string;\n    pepEntidade: string;\n    autodecRca: boolean;\n    autoDecTocpp: boolean;\n    tocppCargo: string;\n    tocppEntidade: string;\n\n    constructor() {\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { TransferInternalRequest } from 'src/app/models/operation/request/transfers/TransferInternalRequest';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiRequestFactoryService } from 'src/app/services/agentifai/agentifai-request-factory.service';\nimport { Credential } from 'src/app/models/operation/Credential';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\n\nexport class ExecuteInternalTransferCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexesPathsSuccess: String[] = [\n        \"headers.+\",\n        \"status\",\n        `body\\.(operationId|operationStatus|charges[.].*|${Anonymization.scheduling()})`\n    ]\n\n    private nonAnonymizableRegexesPathsError: String[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private requestFactory: AgentifaiRequestFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters = this.request.getParameters()\n        const request = this.createRequest(parameters);\n        const credential = this.createCredentials(parameters);\n\n        return service.executeInternalTransfer(headers, request, credential)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(resp => this.createErrorResponse(resp))\n            );\n    }\n\n    private createRequest(parameters: any): TransferInternalRequest {\n        const request = new TransferInternalRequest();\n        request.operationId = parameters.operationId;\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation;\n        request.sourceAccount = parameters.sourceAccount;\n        request.destinationAccount = parameters.destinationAccount;\n        request.amount = parameters.amount;\n        request.currency = parameters.currency;\n        request.descriptionForSourceAccount = parameters.descriptionForSourceAccount;\n        request.descriptionForDestinationAccount = parameters.descriptionForDestinationAccount;\n        request.scheduling = this.requestFactory.createScheduling(parameters);\n\n        return request;\n    }\n\n    private createCredentials(parameters: any): Credential {\n        return this.requestFactory.createCredentials(parameters);\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexesPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizableRegexesPathsError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { CardsUtils } from 'src/app/agentifai/commands/cards/cards-utils';\nimport { AgentifaiUtils } from 'src/app/agentifai/utils/agentifai-utils'\nimport { AgentifaiCardsTransformerService } from 'src/app/services/agentifai/agentifai-cards-transformer.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\n\n\nexport class GetCardAccountTransactions implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        `body\\.(`\n            + `cards\\.[^.]+\\.(${CardsUtils.nonAnonymizedCardProperties})`\n            + `|`\n            + `cardAccountTransactions.transactions.[^.]+.(${CardsUtils.nonAnonymizedCardTransactionProperties})`\n            + `)`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private transformer: AgentifaiCardsTransformerService\n    ) {}\n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters = this.request.getParameters()\n        const cardAccountId = parameters[\"cardAccountId\"];\n        const statementDate = parameters[\"statementDate\"];\n\n        return service.getCardStatementTransactions(headers, cardAccountId, statementDate)\n            .pipe(\n                map( resp => this.createSuccessResponse(resp) ),\n                catchError( error => this.createErrorResponse(error) )\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        var transformedResponse = this.transformResponse(response);\n        return this.createResponse(transformedResponse, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n    private transformResponse(response: any): any {\n        var data = AgentifaiUtils.mapFromString(response.data);\n        var cards = data.cards;\n\n        if (cards != null) {\n            cards = this.transformer.addNewCardProperties(cards);\n            data.cards = cards;\n        }\n\n        response.data = data;\n\n        return response;\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\n\nexport class GetTransactions implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexesPathsuccess: String[] = [\n        \"headers.+\",\n        \"status\"\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(private request: AgentifaiRequest, private responseFactory: AgentifaiResponseFactoryService) {\n    }\n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters = this.request.getParameters()\n        const transactionsRequest = this.createTransactionRequest(parameters);\n\n        return service.getTransactions(headers, transactionsRequest)\n            .pipe(\n                map( resp => this.createSuccessResponse(resp) ),\n                catchError( error => this.createErrorResponse(error) )\n            )\n    }\n\n    private createTransactionRequest(parameteres): any {\n        var transactionsRequest: any = {};\n        transactionsRequest.sourceAccount = parameteres.fullAccountKey;\n        transactionsRequest.minimumDate = parameteres.fromBookDate;\n        transactionsRequest.maximumDate = parameteres.toBookDate;\n        transactionsRequest.nextPageKeys = parameteres.pageKey;\n        return transactionsRequest;\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexesPathsuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { CardsUtils } from 'src/app/agentifai/commands/cards/cards-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetClientStatus implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        `body\\.(cards\\.[^.]+\\.(${CardsUtils.nonAnonymizedCardProperties})|clientMBWay)`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n\n        return service.getMbwayPartnerClientStatus(headers)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { GetContractNumberAnswersRequest } from 'src/app/models/operation/request/customers/GetContractNumberAnswersRequest';\n\nexport class UnlockContractNumber implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexesPathsSuccess: String[] = [\n        \"headers.+\",\n        \"status\",\n        \"body\\.result\"\n    ]\n\n    private nonAnonymizableRegexesPathsError: String[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters: any = this.request.getParameters()\n        const request = this.createRequest(parameters);\n\n        return service.getContractNumberAnswers(headers, request)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(resp => this.createErrorResponse(resp))\n            );\n    }\n\n    private createRequest(parameters: any): GetContractNumberAnswersRequest {\n        const request = new GetContractNumberAnswersRequest();\n        request.respostasUser = parameters.answers;\n        request.nif = parameters.nif;\n        return request;\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexesPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizableRegexesPathsError)\n        )\n    }\n\n}","export default \"<ion-app>\\n  <ion-router-outlet></ion-router-outlet>\\n</ion-app>\\n\";","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiRequestFactoryService } from 'src/app/services/agentifai/agentifai-request-factory.service';\nimport { TransferSEPARequest } from 'src/app/models/operation/request/transfers/TransferSEPARequest';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\n\nexport class SimulateSEPATransferCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexesPathsSuccess: String[] = [\n        \"headers.+\",\n        \"status\",\n        `body\\.(operationId|operationStatus|charges[.].*|${Anonymization.scheduling()})`\n    ]\n\n    private nonAnonymizableRegexesPathsError: String[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private requestFactory: AgentifaiRequestFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters: any = this.request.getParameters()\n        const request = this.createRequest(parameters);\n\n        return service.simulateSepaTransfer(headers, request)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(resp => this.createErrorResponse(resp))\n            );\n    }\n\n    private createRequest(parameters: any): TransferSEPARequest {\n        const request = new TransferSEPARequest();\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation;\n        request.sourceAccount = parameters.sourceAccount;\n        request.destinationAccount = parameters.destinationAccount;\n        request.amount = parameters.amount;\n        request.currency = parameters.currency;\n        request.description = parameters.description;\n        request.destinationName = parameters.destinationName;\n        request.urgent = parameters.urgent;\n        request.scheduling = this.requestFactory.createScheduling(parameters);\n\n        return request;\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexesPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizableRegexesPathsError)\n        )\n    }\n\n}","import { GenericOperationRequest } from 'src/app/models/operation/request/GenericOperationRequest'\n\nexport class MBWayPartnerRequest extends GenericOperationRequest {\n  amount: string;\n  serviceId: string;\n  referenceId: number;\n  phoneNumber: string;\n  cardNumberMasked: string;\n  acceptedTransferCGD:boolean = true;\n}","\nexport class Anonymization {\n\n    static NonAnonymizablePathRegexDefault: string[] = [\n        \"headers.+\",\n        \"status\",\n        \"body.*\"\n    ]\n\n    static scheduling() {\n        return \"scheduling\\.*\"\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiRequestFactoryService } from 'src/app/services/agentifai/agentifai-request-factory.service';\nimport { Credential } from 'src/app/models/operation/Credential';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { TelecommunicationsPaymentRequest } from 'src/app/models/operation/request/payments/TelecommunicationsPaymentRequest';\n\nexport class ExecuteTelecommunicationPaymentCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexesPathsSuccess: String[] = [\n        \"headers.+\",\n        \"status\",\n        `body\\.(operationId|operationStatus|${Anonymization.scheduling()})`\n    ]\n\n    private nonAnonymizableRegexesPathsError: String[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private requestFactory: AgentifaiRequestFactoryService,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters = this.request.getParameters()\n        const request = this.createRequest(parameters);\n        const credential = this.createCredentials(parameters);\n\n        return service.executeTelecomPayment(headers, request, credential)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(resp => this.createErrorResponse(resp))\n            );\n    }\n\n    private createRequest(parameters: any): TelecommunicationsPaymentRequest {\n        const request = new TelecommunicationsPaymentRequest();\n        request.operationId = parameters.operationId;\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation;\n        request.scheduling = this.requestFactory.createScheduling(parameters);\n        request.sourceAccount = parameters.sourceAccount;\n        request.reference = parameters.reference;\n        request.amount = parameters.amount;\n        request.paymentConfigurationCode = parseInt(parameters.paymentConfigurationCode);\n        request.parentPaymentConfigurationCode = parseInt(parameters.parentPaymentConfigurationCode);\n        request.taxPayerNumber = parameters.taxPayerNumber;\n\n        return request;\n    }\n\n    private createCredentials(parameters: any): Credential {\n        return this.requestFactory.createCredentials(parameters);\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexesPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizableRegexesPathsError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetCardAdhesionConfigurations implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        String.raw`^body\\.(paymentPercentages\\.[^.]+|statementEmissionDays\\.[^.]+|showCheckForCredit|onlineAdherence|creditLimitIncrementValue|minProductCreditLimit|maxProductCreditLimit)$`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) {}\n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders();\n        const parameters = this.request.getParameters();\n        const fullAccountKey = parameters.fullAccountKey;\n        const productCode = parameters.productCode;\n\n        return service.getCardAdhesionConfigurations(headers, fullAccountKey, productCode)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { RouteReuseStrategy } from '@angular/router';\n\nimport { IonicModule, IonicRouteStrategy } from '@ionic/angular';\n\nimport { AppComponent } from './app.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { HTTP } from '@ionic-native/http/ngx';\nimport { IonicStorageModule } from '@ionic/storage';\n\n@NgModule({\n  declarations: [AppComponent],\n  entryComponents: [],\n  imports: [BrowserModule, IonicModule.forRoot(), IonicStorageModule.forRoot(), AppRoutingModule],\n  providers: [\n    { provide: RouteReuseStrategy, useClass: IonicRouteStrategy },\n    HTTP\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule { }\n","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetTransferCalendarRestrictions implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizablePathRegex: String[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n\n        return service.getCalendarToAllTranfers(headers)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizablePathRegex)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegex)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\n\nexport class GetFrequentInternalTransfer implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        \"body\\.(operationName|operationId|amount)(?:$|\\W)\"\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const idFrequentOperation = Number(this.request.getParameters()[\"idFrequentOperation\"]);\n\n        return service.getFrequentINTERNALoperation(headers, idFrequentOperation)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiRequestFactoryService } from 'src/app/services/agentifai/agentifai-request-factory.service';\nimport { Credential } from 'src/app/models/operation/Credential';\nimport { CardRequestRequest } from 'src/app/models/operation/request/cards/CardRequestRequest';\n\nexport class ExecuteCardAdhesion implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        String.raw`^body\\.(operationId|operationStatus|scheduling|invalidAccountIntervenLei83|safeMessageAdhesion|normalAdherenceErrorMsg)$`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private requestFactory: AgentifaiRequestFactoryService\n    ) {}\n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders();\n        const parameters = this.request.getParameters();\n        const request = this.createRequest(parameters);\n        const credential = this.createCredentials(parameters);\n\n        return service.executeCardAdhesion(headers, request, credential)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createRequest(parameters: any): CardRequestRequest {\n        const request = new CardRequestRequest();\n\n        if (parameters.operationId != null) {\n            request.operationId = parseInt(parameters.operationId)\n        }\n\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation;\n        request.scheduling = this.requestFactory.createScheduling(parameters);\n\n        request.fullAccountKey = parameters.fullAccountKey;\n        request.productCode = parameters.productCode;\n        request.cardPaymentMode = parameters.cardPaymentMode;\n\n        if (parameters.paymentPercentage != null) {\n            request.paymentPercentage = parseInt(parameters.paymentPercentage)\n        }\n\n        request.paymentFixedValue = parameters.paymentFixedValue;\n        request.nameToPrintOnCard = parameters.nameToPrintOnCard;\n\n        if (parameters.statementEmissionDay != null) {\n            request.statementEmissionDay = parseInt(parameters.statementEmissionDay)\n        }\n\n        request.postalAddress = parameters.postalAddress;\n        request.creditLimit = parameters.creditLimit;\n\n        if (parameters.checkForCredit != null) {\n            request.checkForCredit = this.requestFactory.parseBool(parameters.checkForCredit)\n        }\n\n        if (parameters.onlineAdherence != null) {\n            request.onlineAdherence = this.requestFactory.parseBool(parameters.onlineAdherence)\n        }\n\n        if (parameters.safeMessageAdhesion != null) {\n            request.safeMessageAdhesion = this.requestFactory.parseBool(parameters.safeMessageAdhesion)\n        }\n\n        return request;\n    }\n\n    private createCredentials(parameters: any): Credential {\n        return this.requestFactory.createCredentials(parameters);\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\n\nexport class GetPaymentsEntityCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\"\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const entityNumber = this.request.getParameters()[\"entityNumber\"];\n\n        return service.getPaymentsEntity(headers, entityNumber)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}\n","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { AccountsUtils } from 'src/app/agentifai/commands/accounts/accounts-utils';\nimport { AgentifaiAccountsTransformerService } from 'src/app/services/agentifai/agentifai-accounts-transformer.service';\nimport { AgentifaiUtils } from 'src/app/agentifai/utils/agentifai-utils'\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetPaymentsGeneralData implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        \"body\\.(\"\n        + \"frequentOperations\\.[^.]+\\.\"\n        + \"(operationName|operationType|operationId|amount)\"\n        + \"|accounts\\.[^.]+\\.\"\n        + `(${AccountsUtils.nonAnonymizedAccountsProperties})`\n        + \")(?:$|\\W)\"\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private accountsTransformer: AgentifaiAccountsTransformerService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n\n        return service.getPaymentsPageData(headers, false)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        var transformedResponse = this.transformResponse(response);\n        return this.createResponse(transformedResponse, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n    private transformResponse(response: any): any {\n        const data = AgentifaiUtils.mapFromString(response.data);\n\n        if (data.accounts != null) {\n            data.accounts = this.accountsTransformer.transformAccounts(data.accounts);\n            response.data = data;\n        }\n\n        return response;\n    }\n}","import { GenericOperationRequest } from '../GenericOperationRequest';\n\nexport class VoiceTreatmentConsentRequest extends GenericOperationRequest {\n    constructor() {\n        super();\n    }\n}","import{ GenericOperationRequest } from \"../operation/request/GenericOperationRequest\";\r\nimport{ GenericKeyValue } from \"../GenericKeyValue\";\r\n\r\nexport class MatrixRequisitionSimExe extends GenericOperationRequest{\r\n    adressSequenceNumber: number;\r\n    motive: GenericKeyValue;\r\n    constructor(){\r\n        super();\r\n        this.adressSequenceNumber = null;\r\n        this.motive = null;\r\n    }\r\n}","import { GenericOperationRequest } from '../GenericOperationRequest';\n\nexport class CardRequestRequest extends GenericOperationRequest {\n    fullAccountKey: string;\n    productCode: string;\n    cardPaymentMode: string;\t//PERCENTAGE* ou FIXED_VALUE\n    paymentPercentage: number;\n    paymentFixedValue: string; //0\n    nameToPrintOnCard: string;\n    statementEmissionDay: number;\n    postalAddress: string;\n    checkForCredit: boolean;\n    creditLimit: string;\n    onlineAdherence: boolean;\n    safeMessageAdhesion: boolean;\n\n    constructor() {\n        super();\n    }\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Credential } from 'src/app/models/operation/Credential';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiRequestFactoryService } from'src/app/services/agentifai/agentifai-request-factory.service';\nimport { ConsumerLoanAdhesionRequest } from 'src/app/models/operation/request/loans/ConsumerLoanAdhesionRequest';\nimport { GenericPersonalCreditWorkElement } from 'src/app/models/operation/request/loans/GenericPersonalCreditWorkElement';\n\nexport class ExecutePersonalLoanAdhesion implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        String.raw `^body\\.(operationId|operationStatus)$`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private requestFactory: AgentifaiRequestFactoryService,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) {}\n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters = this.request.getParameters()\n        const request = this.createRequest(parameters)\n        const credential = this.createCredentials(parameters);\n\n        return service.executeLoanRequest(headers, request, credential)\n            .pipe(\n                map( resp => this.createSuccessResponse(resp) ),\n                catchError( error => this.createErrorResponse(error) )\n            )\n    }\n\n    private createRequest(parameters: any): ConsumerLoanAdhesionRequest {\n        const request = new ConsumerLoanAdhesionRequest()\n        \n        if (parameters.operationId != null) {\n            request.operationId = parseInt(parameters.operationId)\n        }\n        \n        request.forceDuplicateOperation = parameters.forceDuplicateOperation\n        request.scheduling = this.requestFactory.createScheduling(parameters)\n        request.currency = parameters.currency\n        request.targetAmount = parseInt(parameters.targetAmount)\n        request.periodMonths = parseInt(parameters.periodMonths)\n        request.includeDocuments = parameters.includeDocuments\n        request.fullKeyToAccount = parameters.fullKeyToAccount\n\n        if (parameters.profession != null) {\n            const profession = new GenericPersonalCreditWorkElement()\n            profession.cod = parameters.profession.cod\n            profession.description = parameters.profession.description\n            request.profissao = profession\n        }\n\n        if (parameters.jobSector != null) {\n            const jobSector = new GenericPersonalCreditWorkElement()\n            jobSector.cod = parameters.jobSector.cod\n            jobSector.description = parameters.jobSector.description\n            request.sector = jobSector\n        }\n\n        if (parameters.jobType != null) {\n            const jobType = new GenericPersonalCreditWorkElement()\n            jobType.cod = parameters.jobType.cod\n            jobType.description = parameters.jobType.description\n            request.trabalho = jobType\n        }\n\n        if (parameters.contractType != null) {\n            const contractType = new GenericPersonalCreditWorkElement()\n            contractType.cod = parameters.contractType.cod\n            contractType.description = parameters.contractType.description\n            request.contrato = contractType\n        }\n\n        if (parameters.jobServiceTime != null) {\n            request.antiguidade = parseInt(parameters.jobServiceTime)\n        }\n        \n        request.codigoIRS = parameters.irsCode\n\n        if (parameters.grossIncome != null) {\n            request.rendimentoBruto = parseInt(parameters.grossIncome)\n        }\n\n        if (parameters.netIncome != null) {\n            request.rendimentoLiquido = parseInt(parameters.netIncome)\n        }\n\n        if (parameters.monthlyExpenses != null) {\n            request.encargosMensais = parseInt(parameters.monthlyExpenses)\n        }\n        \n        if (parameters.householdExpenses != null) {\n            request.despesasFamiliares = parseInt(parameters.householdExpenses)\n        }\n        \n        if (parameters.householdMembers != null) {\n            request.nrAgregado = parseInt(parameters.householdMembers)\n        }\n        \n        request.prestacao = parameters.installment\n        request.receiptsVenc = parameters.salaryDocuments\n        request.irs = parameters.irsDocuments\n        request.laboralVinc = parameters.employmentDocuments\n        request.professionDoc = parameters.professionDocuments\n        request.addressDoc = parameters.addressDocuments\n        request.citzeanCardDoc = parameters.identificationDocuments\n\n        if (parameters.ral != null) {\n            request.ral = this.requestFactory.parseBool(parameters.ral)\n        }\n\n        request.questions = parameters.questions\n        \n        request.defaultSimulation = parameters.defaultSimulation\n\n        return request;\n    }\n\n    private createCredentials(parameters: any): Credential {\n        return this.requestFactory.createCredentials(parameters);\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { Injectable } from '@angular/core';\nimport { GenericKeyValue } from 'src/app/models/GenericKeyValue';\nimport { Credential } from 'src/app/models/operation/Credential';\nimport { Scheduling } from 'src/app/models/operation/Scheduling';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AgentifaiRequestFactoryService {\n\n  createCredentials(parameters: any): Credential {\n    const credentialJson = parameters.credential;\n    if (credentialJson) {\n      const credential = new Credential();\n      credential.type = credentialJson.type;\n      credential.value = credentialJson.value;\n      return credential\n    }\n  }\n\n  createScheduling(parameters: any): Scheduling {\n    const schedulingParams = parameters.scheduling;\n    const scheduling = new Scheduling();\n    scheduling.startDate = schedulingParams.startDate;\n    scheduling.endDate = schedulingParams.endDate || \"\";\n    return scheduling;\n  }\n\n  parseBool(val: any) {\n    return !!JSON.parse(String(val).toLowerCase());\n  }\n\n  createGenericKeyValue(parameters: any): GenericKeyValue {\n    return new GenericKeyValue(parameters.key, parameters.value);\n  }\n\n  createGenericKeyValueList(parameters: any[]): GenericKeyValue[] {\n    return parameters.map(item => {\n      return new GenericKeyValue(item.key, item.value);\n    })\n  }\n  \n}\n","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { AgentifaiUtils } from 'src/app/agentifai/utils/agentifai-utils'\nimport { AgentifaiCardsTransformerService } from 'src/app/services/agentifai/agentifai-cards-transformer.service';\nimport { CardsUtils } from 'src/app/agentifai/commands/cards/cards-utils';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetPaymentCards implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        `body\\.[^.]+\\.(${CardsUtils.nonAnonymizedCardProperties})`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private transformer: AgentifaiCardsTransformerService\n    ) {}\n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n\n        return service.getCardsPaymentData(headers)\n            .pipe(\n                map( resp => this.createSuccessResponse(resp) ),\n                catchError( error => this.createErrorResponse(error) )\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        var transformedResponse = this.transformResponse(response);\n        return this.createResponse(transformedResponse, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n    private transformResponse(response: any): any {\n        var data = AgentifaiUtils.mapFromString(response.data);\n        \n        if (data != null) {\n            data = this.transformer.addNewCardProperties(data);\n        }\n\n        response.data = data;\n\n        return response;\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetImmediateTransferPhoneNumbersCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\"\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n\n        return service.getPhoneNumbersForImmediateTransfers(headers)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiRequestFactoryService } from 'src/app/services/agentifai/agentifai-request-factory.service';\nimport { TransferImmediateRequest } from 'src/app/models/operation/request/transfers/TransferImmediateRequest';\nimport { Credential } from 'src/app/models/operation/Credential';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\n\nexport class ExecuteImmediateTransferCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexesPathsSuccess: String[] = [\n        \"headers.+\",\n        \"status\",\n        `body\\.(operationId|destinationType|operationCharge|operationStatus|transferState|${Anonymization.scheduling()})`\n    ]\n\n    private nonAnonymizableRegexesPathsError: String[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private requestFactory: AgentifaiRequestFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters = this.request.getParameters()\n        const request = this.createRequest(parameters);\n        const credential = this.createCredentials(parameters);\n\n        return service.executeImmediateTransfer(headers, request, credential)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(resp => this.createErrorResponse(resp))\n            );\n    }\n\n    private createRequest(parameters: any): TransferImmediateRequest {\n        const request = new TransferImmediateRequest();\n        request.operationId = parameters.operationId;\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation;\n        request.amount = parameters.amount;\n        request.message = parameters.message;\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation;\n        request.destinationPhone = parameters.destinationPhone;\n        request.cardNumberMasked = parameters.cardNumberMasked;\n        request.useMbwayPartner = parameters.useMbwayPartner;\n        request.scheduling = null;\n\n        return request;\n    }\n\n    private createCredentials(parameters: any): Credential {\n        return this.requestFactory.createCredentials(parameters);\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexesPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizableRegexesPathsError)\n        )\n    }\n\n}","\nexport class AccountsUtils {\n\n    static nonAnonymizedAccountsProperties: String = \"alias|accountType|accountName|activeCDForAllHolders|multipleHoldersInfoType|description\";\n    \n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetManagerAvailableTime implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        String.raw `^body\\.\\d$`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) {}\n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters: any = this.request.getParameters()\n        const destinationType = parameters[\"destinationType\"];\n        const date = parameters[\"date\"];\n\n        return service.getManagerAvailableTime(headers, destinationType, date)\n            .pipe(\n                map( resp => this.createSuccessResponse(resp) ),\n                catchError( error => this.createErrorResponse(error) )\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","var map = {\n\t\"./ion-action-sheet.entry.js\": [\n\t\t\"dUtr\",\n\t\t\"common\",\n\t\t0\n\t],\n\t\"./ion-alert.entry.js\": [\n\t\t\"Q8AI\",\n\t\t\"common\",\n\t\t1\n\t],\n\t\"./ion-app_8.entry.js\": [\n\t\t\"hgI1\",\n\t\t\"common\",\n\t\t2\n\t],\n\t\"./ion-avatar_3.entry.js\": [\n\t\t\"CfoV\",\n\t\t\"common\",\n\t\t3\n\t],\n\t\"./ion-back-button.entry.js\": [\n\t\t\"Nt02\",\n\t\t\"common\",\n\t\t4\n\t],\n\t\"./ion-backdrop.entry.js\": [\n\t\t\"Q2Bp\",\n\t\t5\n\t],\n\t\"./ion-button_2.entry.js\": [\n\t\t\"0Pbj\",\n\t\t\"common\",\n\t\t6\n\t],\n\t\"./ion-card_5.entry.js\": [\n\t\t\"ydQj\",\n\t\t\"common\",\n\t\t7\n\t],\n\t\"./ion-checkbox.entry.js\": [\n\t\t\"4fMi\",\n\t\t\"common\",\n\t\t8\n\t],\n\t\"./ion-chip.entry.js\": [\n\t\t\"czK9\",\n\t\t\"common\",\n\t\t9\n\t],\n\t\"./ion-col_3.entry.js\": [\n\t\t\"/CAe\",\n\t\t10\n\t],\n\t\"./ion-datetime_3.entry.js\": [\n\t\t\"WgF3\",\n\t\t\"common\",\n\t\t11\n\t],\n\t\"./ion-fab_3.entry.js\": [\n\t\t\"uQcF\",\n\t\t\"common\",\n\t\t12\n\t],\n\t\"./ion-img.entry.js\": [\n\t\t\"wHD8\",\n\t\t13\n\t],\n\t\"./ion-infinite-scroll_2.entry.js\": [\n\t\t\"2lz6\",\n\t\t14\n\t],\n\t\"./ion-input.entry.js\": [\n\t\t\"ercB\",\n\t\t\"common\",\n\t\t15\n\t],\n\t\"./ion-item-option_3.entry.js\": [\n\t\t\"MGMP\",\n\t\t\"common\",\n\t\t16\n\t],\n\t\"./ion-item_8.entry.js\": [\n\t\t\"9bur\",\n\t\t\"common\",\n\t\t17\n\t],\n\t\"./ion-loading.entry.js\": [\n\t\t\"cABk\",\n\t\t\"common\",\n\t\t18\n\t],\n\t\"./ion-menu_3.entry.js\": [\n\t\t\"kyFE\",\n\t\t\"common\",\n\t\t19\n\t],\n\t\"./ion-modal.entry.js\": [\n\t\t\"TvZU\",\n\t\t\"common\",\n\t\t20\n\t],\n\t\"./ion-nav_2.entry.js\": [\n\t\t\"vnES\",\n\t\t\"common\",\n\t\t21\n\t],\n\t\"./ion-popover.entry.js\": [\n\t\t\"qCuA\",\n\t\t\"common\",\n\t\t22\n\t],\n\t\"./ion-progress-bar.entry.js\": [\n\t\t\"0tOe\",\n\t\t\"common\",\n\t\t23\n\t],\n\t\"./ion-radio_2.entry.js\": [\n\t\t\"h11V\",\n\t\t\"common\",\n\t\t24\n\t],\n\t\"./ion-range.entry.js\": [\n\t\t\"XGij\",\n\t\t\"common\",\n\t\t25\n\t],\n\t\"./ion-refresher_2.entry.js\": [\n\t\t\"nYbb\",\n\t\t\"common\",\n\t\t26\n\t],\n\t\"./ion-reorder_2.entry.js\": [\n\t\t\"smMY\",\n\t\t\"common\",\n\t\t27\n\t],\n\t\"./ion-ripple-effect.entry.js\": [\n\t\t\"STjf\",\n\t\t28\n\t],\n\t\"./ion-route_4.entry.js\": [\n\t\t\"k5eQ\",\n\t\t\"common\",\n\t\t29\n\t],\n\t\"./ion-searchbar.entry.js\": [\n\t\t\"OR5t\",\n\t\t\"common\",\n\t\t30\n\t],\n\t\"./ion-segment_2.entry.js\": [\n\t\t\"fSgp\",\n\t\t\"common\",\n\t\t31\n\t],\n\t\"./ion-select_3.entry.js\": [\n\t\t\"lfGF\",\n\t\t\"common\",\n\t\t32\n\t],\n\t\"./ion-slide_2.entry.js\": [\n\t\t\"5xYT\",\n\t\t33\n\t],\n\t\"./ion-spinner.entry.js\": [\n\t\t\"nI0H\",\n\t\t\"common\",\n\t\t34\n\t],\n\t\"./ion-split-pane.entry.js\": [\n\t\t\"NAQR\",\n\t\t35\n\t],\n\t\"./ion-tab-bar_2.entry.js\": [\n\t\t\"knkW\",\n\t\t\"common\",\n\t\t36\n\t],\n\t\"./ion-tab_2.entry.js\": [\n\t\t\"TpdJ\",\n\t\t\"common\",\n\t\t37\n\t],\n\t\"./ion-text.entry.js\": [\n\t\t\"ISmu\",\n\t\t\"common\",\n\t\t38\n\t],\n\t\"./ion-textarea.entry.js\": [\n\t\t\"U7LX\",\n\t\t\"common\",\n\t\t39\n\t],\n\t\"./ion-toast.entry.js\": [\n\t\t\"L3sA\",\n\t\t\"common\",\n\t\t40\n\t],\n\t\"./ion-toggle.entry.js\": [\n\t\t\"IUOf\",\n\t\t\"common\",\n\t\t41\n\t],\n\t\"./ion-virtual-scroll.entry.js\": [\n\t\t\"8Mb5\",\n\t\t42\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"kLfG\";\nmodule.exports = webpackAsyncContext;","import { environment } from \"src/environments/environment\";\nimport { AccountsUtils } from \"src/app/agentifai/commands/accounts/accounts-utils\";\nimport { Anonymization } from \"src/app/agentifai/utils/anonymization-utils\";\nimport { CardsUtils } from \"../agentifai/commands/cards/cards-utils\";\n\nexport class InternalUtils {\n\n    static endpointKey = \"baseEndpointKey\";\n    static baseUrl = \"\";\n\n    static endpoints = environment.endpoints;\n\n    static getBaseUrl() {\n        if (this.baseUrl.length > 0) {\n            return this.baseUrl;\n        } else {\n            return this.endpoints[0];\n        }\n    }\n\n    static getEndpointsWhitelist() {\n        return [ \n            {\n                \"endpoint\": \"business\\/accounts($|[?].+?$)\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    \"body\\.(\"\n                    + `defaultAccount\\.(${AccountsUtils.nonAnonymizedAccountsProperties})`\n                    + `|accounts\\.[^.]+\\.(${AccountsUtils.nonAnonymizedAccountsProperties})`\n                    + \")(?:$|\\W)\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/accounts\\/[^\\/]+\\/transactions($|[?].+?$)\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/accounts\\/[^\\/]+\\/balances$\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    \"body\\.(accountCurrency|accountBalancesList\\.[^.]+\\.currency)(?:$|\\W)\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/payments\\/service\\/executions\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": Anonymization.NonAnonymizablePathRegexDefault,\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/payments\\/service\\/simulations\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": Anonymization.NonAnonymizablePathRegexDefault,\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/payments\\/generaldataforpayments\\?.+\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    \"body\\.(\"\n                    + \"frequentOperations\\.[^.]+\\.\"\n                    + \"(operationName|operationType|operationId|amount)\"\n                    + \"|accounts\\.[^.]+\\.\"\n                    + `(${AccountsUtils.nonAnonymizedAccountsProperties})`\n                    + \")(?:$|\\W)\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/payments\\/entities\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/payments\\/service\\/frequent\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    \"body\\.(operationName|operationId|amount)(?:$|\\W)\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/payments\\/telecommunications\\/configurations\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": Anonymization.NonAnonymizablePathRegexDefault,\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/payments\\/telecommunications\\/simulations\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    `body\\.(operationId|operationStatus|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/payments\\/telecommunications\\/executions\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    `body\\.(operationId|operationStatus|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/payments\\/telecommunications\\/frequent\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    \"body\\.(operationName|operationId|amount|paymentConfigurationCode|parentPaymentConfigurationCode)(?:$|\\W)\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            \n            {\n                \"endpoint\": \"business\\/operations\\/.+\\/proofs\\/emails\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/operations\\/.+\\/proof\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/transfers\\/internal\\/simulations\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    `body\\.(operationId|operationStatus|charges[.].*|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/transfers\\/internal\\/executions\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    `body\\.(operationId|operationStatus|charges[.].*|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/transfers\\/internal\\/frequent\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    \"body\\.(operationName|operationId|amount)(?:$|\\W)\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/transfers\\/generaldatafortransfers\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    \"body\\.(\"\n                    + \"frequentOperations\\.[^.]+\\.\"\n                    + \"(operationName|operationType|operationId|amount)\"\n                    + \"|accounts\\.[^.]+\\.\"\n                    + `(${AccountsUtils.nonAnonymizedAccountsProperties})`\n                    + \")(?:$|\\W)\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/transfers\\/types\\/validate\\?targetAccount=.+\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": Anonymization.NonAnonymizablePathRegexDefault,\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/transfers\\/calendarrestrictions\\?transferTypeFilter=.+\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": Anonymization.NonAnonymizablePathRegexDefault,\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/transfers\\/sepa\\/simulations\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    `body\\.(operationId|operationStatus|charges[.].*|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/transfers\\/sepa\\/executions\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    `body\\.(operationId|operationStatus|charges[.].*|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/transfers\\/sepa\\/frequent\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\":  [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    \"body\\.(operationName|operationId|amount)(?:$|\\W)\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/transfers\\/immediate\\/simulations\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    `body\\.(operationId|destinationType|operationCharge|operationStatus|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/transfers\\/immediate\\/executions\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    `body\\.(operationId|destinationType|operationCharge|operationStatus|transferState|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/transfers\\/immediate\\/registration\\/contacts\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/cards\\/mbwaypartner\\/clientStatus\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    `body\\.(cards\\.[^.]+\\.(${CardsUtils.nonAnonymizedCardProperties})|clientMBWay)`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/cards\\/mbwaypartner\\/cards\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    `body\\.[^.]+\\.(${CardsUtils.nonAnonymizedCardProperties})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/cards\\/mbwaypartner\\/adhesion\\/simulationsv2\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    `body\\.(operationId|operationStatus|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/cards\\/mbwaypartner\\/adhesion\\/executionsv2\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    `body\\.(operationId|operationStatus|${Anonymization.scheduling()})`\n                ],            \n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/cards\\/mbwaypartner\\/acceptTransferCGD\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    `body\\.(operationId|operationStatus|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/customers\\/current\\/contacts\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    \"body\\.contacts\\.[^.]+\\.(communicationMeans|contactType)(?:$|\\W)\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/customers\\/contracts\\/credencialUnlockQuestions\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    \"body\\.(operationId|questions\\.*|passwordRegeneration|forceDuplicateOperation)\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/customers\\/contracts\\/credencialUnlockAnswers\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    \"body\\.(operationId|success)\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/customers\\/contracts\\/contractUnlockQuestions\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    \"body\\.(questions\\.*)\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/customers\\/contracts\\/contractUnlockAnswers\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    \"body\\.result\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/consent\\/voiceTreatment\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": Anonymization.NonAnonymizablePathRegexDefault,\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/consent\\/voiceTreatment\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": Anonymization.NonAnonymizablePathRegexDefault,\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/cards\\/customercarddata\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    \"body\\.(\"\n                        + \"((cardAccounts\\.[^.]+)|defaultCardAccount)\\.(\"\n                            + \"currency|type|cardCodeType|statementIssueDateDescription|\"\n                            + \"statementPaymentLimitDescription|productImageUrl|\"\n                            + `cards\\.[^.]+\\.(${CardsUtils.nonAnonymizedCardProperties}))`\n                        + \"|defaultCardAccountBalances\\.availableCredit)\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/cards\\/accounts\\/.+\\/transactions\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    `body\\.(`\n                        + `cards\\.[^.]+\\.(${CardsUtils.nonAnonymizedCardProperties})`\n                        + `|`\n                        + `cardAccountTransactions.transactions.[^.]+.(${CardsUtils.nonAnonymizedCardTransactionProperties})`\n                        + `)`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/cards\\?targetCardOperationType=.+\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    `body\\.[^.]+\\.(${CardsUtils.nonAnonymizedCardProperties})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/cards\\/payments\\/simulations\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    `body\\.(operationId|operationStatus|charges.*|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/cards\\/payments\\/executions\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    `body\\.(operationId|operationStatus|charges.*|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/cards\\/activation\\/.+\\/.+\\/activateCard\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    String.raw `^body\\.(success|failureReason)$`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/cards\\/phoneNumber\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/customers\\/manager\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    String.raw `^body\\.serviceModel$`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/customers\\/manager\\/callback\\/configuration\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    String.raw`^body\\.(callbackDestinations\\.\\d\\.periods\\.\\d|minDate|maxDate)$`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/customers\\/manager\\/callback\\/availabletime\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    String.raw `^body\\.\\d$`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/customers\\/manager\\/callback\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/loans\\/consumer\\/calculatorV2\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    String.raw`^body\\.(operationId|success|errorMessage|simulationDate|amountMin|amountMax)$`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/loans\\/consumer\\/adhesionGeneralDataV2\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    String.raw`^body\\.(pedidoExistenteMes|validClient|client95_96|professionalInformation\\..+|accounts\\.[^.]+\\.(${AccountsUtils.nonAnonymizedAccountsProperties}))$`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/loans\\/consumer\\/adhesionSimulationV2\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\":  [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    String.raw`^body\\.(operationId|success|errorMessage|simulationDate|amountMin|amountMax)$`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/loans\\/consumer\\/adhesionExecutionV2\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    String.raw `^body\\.(operationId|operationStatus)$`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/content\\/privateContent\\/features\\/.+\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/content\\/privateContent\\/landingPage\\/banner\\/disable\",\n                \"httpMethod\": \"PUT\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/showcase\\/cards\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    String.raw`(name|descriptionHtml|otherInfo)$`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/showcase\\/characteristics\\?characteristicsId=.+\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    String.raw`^body\\.productCharacteristicsList\\.[0-9]+\\.(title|description)$`\n                ],            \n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/showcase\\/productdocument\\?productCode=.+\\&docType=.+\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/accounts\\?targetOperationType=NEW_CARD_REQUEST\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    'headers.(?!Set-Cookie).+',\n                    'status'\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/cards\\/requests\\/configurations\\?fullAccountKey=.+\\&productCode=.+\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    String.raw`^body\\.(paymentPercentages\\.[^.]+|statementEmissionDays\\.[^.]+|showCheckForCredit|onlineAdherence|creditLimitIncrementValue|minProductCreditLimit|maxProductCreditLimit)$`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/cards\\/requests\\/simulations\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    String.raw`^body\\.(operationId|operationStatus|scheduling|invalidAccountIntervenLei83|safeMessageAdhesion|normalAdherenceErrorMsg)$`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/cards\\/requests\\/initNewCreditCard\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    String.raw `^body\\.(operationId|showCardCreditDocuments)$`\n                ],            \n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/cards\\/requests\\/executions\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    String.raw`^body\\.(operationId|operationStatus|scheduling|invalidAccountIntervenLei83|safeMessageAdhesion|normalAdherenceErrorMsg)$`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/customers\\/updateClientInformation\\/validity\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    \"body.*\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/customers\\/updateClientInformation\\/address\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    \"body.expirado\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/customers\\/updateClientInformation\\/personal\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    \"body.expirado\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/customers\\/updateClientInformation\\/professional\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    'headers.(?!Set-Cookie).+',\n                    'status',\n                    String.raw `^body\\.(expirado|trabalharPorContaDoutrem|empregadoCgd)$`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/customers\\/updateClientInformation\\/list\\/\\d*\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    \"body.*\"\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/customers\\/updateClientInformation\\/simulation\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    `body\\.(operationId|operationStatus|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/customers\\/updateClientInformation\\/execution\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    \"headers.(?!Set-Cookie).+\",\n                    \"status\",\n                    `body\\.(operationId|operationStatus|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/credentialsmanagement\\/credentials\\/\\d*\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    'headers.(?!Set-Cookie).+',\n                    'status',\n                    String.raw `body\\.credentials\\.[^.]+\\.status`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/credentialsmanagement\\/matrixrequisition\\/config\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    'headers.(?!Set-Cookie).+',\n                    'status',\n                    String.raw `body\\.((adressList\\.[^.]+\\.adressSequenceNumber)|motiveList\\.[^.]+)`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/credentialsmanagement\\/matrixrequisition\\/simulations\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\":  [\n                    'headers.(?!Set-Cookie).+',\n                    'status',\n                    `body\\.(operationId|operationStatus|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/credentialsmanagement\\/matrixrequisition\\/executions\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    'headers.(?!Set-Cookie).+',\n                    'status',\n                    `body\\.(operationId|operationStatus|customerMessage|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/credentialsmanagement\\/matrixactivation\\/simulations\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\":  [\n                    'headers.(?!Set-Cookie).+',\n                    'status',\n                    `body\\.(operationId|operationStatus|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/credentialsmanagement\\/matrixactivation\\/executions\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    'headers.(?!Set-Cookie).+',\n                    'status',\n                    `body\\.(operationId|operationStatus|customerMessage|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/cards\\/cashadvance\\/simulations$\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    'headers.(?!Set-Cookie).+',\n                    \"status\",\n                    `body\\.(operationId|operationStatus|operationCost|commissions|tax|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/cards\\/cashadvance\\/executions$\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    'headers.(?!Set-Cookie).+',\n                    \"status\",\n                    `body\\.(operationId|operationStatus|operationCost|commissions|tax|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/directdebits\\/detail($|[?].+?$)\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    'headers.(?!Set-Cookie).+',\n                    \"status\",\n                    String.raw `^body\\.(validToChange|limitDate|maxAmount|lastUpdateDate|situation|creationDate)$`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/directdebits($|[?].+?$)\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    'headers.(?!Set-Cookie).+',\n                    \"status\",\n                    String.raw`^body\\.directDebits\\.[^.]+\\.(creationDate|situation)$`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/directdebits\\/config\\/simulations$\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    'headers.(?!Set-Cookie).+',\n                    \"status\",\n                    `body\\.(operationId|operationStatus|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/directdebits\\/config\\/executions$\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    'headers.(?!Set-Cookie).+',\n                    \"status\",\n                    `body\\.(operationId|operationStatus|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/directdebits\\/revoke$\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    'headers.(?!Set-Cookie).+',\n                    \"status\",\n                    `body\\.(`\n                        + `operationId|operationStatus|${Anonymization.scheduling()}`\n                        + `|`\n                        + `directDebit\\.[^.]+\\.(creationDate|creditorEntity|situation|directDebitTransaction\\.[^.]+\\.(date|amount|revog|type))`\n                        + `)`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/directdebits\\/revoke\\/simulations$\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    'headers.(?!Set-Cookie).+',\n                    \"status\",\n                    `body\\.(operationId|operationStatus|success|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/directdebits\\/revoke\\/executions$\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    'headers.(?!Set-Cookie).+',\n                    \"status\",\n                    `body\\.(operationId|operationStatus|success|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/customers\\/nif\\/tooltip\\/info.*\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    'headers.(?!Set-Cookie).+',\n                    \"status\",\n                    `body\\.tooltipInfoText`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/directdebits\\/changestate\\/*\",\n                \"httpMethod\": \"POST\",\n                \"successWhitelist\": [\n                    'headers.(?!Set-Cookie).+',\n                    \"status\",\n                    `body\\.(operationId|operationStatus|${Anonymization.scheduling()})`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/directdebits\\/transactions($|[?].+?$)\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    'headers.(?!Set-Cookie).+',\n                    'status',\n                    String.raw`^body\\.directDebitTransaction\\.[^.]+\\.(date|type|revog|nsLote|nsRegLote)$`\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            },\n            {\n                \"endpoint\": \"business\\/accounts\\/[^\\/]+\\/getIbanPdf$\",\n                \"httpMethod\": \"GET\",\n                \"successWhitelist\": [\n                    'headers.(?!Set-Cookie).+',\n                    'status'\n                ],\n                \"failureWhitelist\": Anonymization.NonAnonymizablePathRegexDefault\n            }\n        ]\n    }\n\n}\n","import { GenericOperationRequest } from 'src/app/models/operation/request/GenericOperationRequest'\n\nexport class TransferImmediateRequest extends GenericOperationRequest {\n    amount: string;\n    message: string;\n    destinationPhone: string;\n    useMbwayPartner: boolean;\n    cardNumberMasked:string;\n\n    constructor() {\n        super();\n        this.amount = '';\n        this.message = '';\n        this.destinationPhone = '';\n        this.cardNumberMasked='';\n        this.useMbwayPartner = false;      \n    }\n}","\nexport class CardsUtils {\n\n    static nonAnonymizedCardProperties: String = `cardAlias|cardName|cardAccountCurrency|prePaidCard|prePaidDualCreditCard|active|cancelled|virtualCard|(transactions.[^.]+.(creditAmount|debitAmount))`;\n    static nonAnonymizedCardTransactionProperties: String = \"creditAmount|debitAmount\"\n    \n}","import { TransferImmediateRequest } from 'src/app/models/operation/request/transfers/TransferImmediateRequest';\nimport { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\n\nexport class SimulateImmediateTransferCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexesPathsSuccess: String[] = [\n        \"headers.+\",\n        \"status\",\n        `body\\.(operationId|destinationType|operationCharge|operationStatus|${Anonymization.scheduling()})`\n    ]\n\n    private nonAnonymizableRegexesPathsError: String[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters: any = this.request.getParameters()\n        const request = this.createRequest(parameters);\n\n        return service.simulateImmediateTransfer(headers, request)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(resp => this.createErrorResponse(resp))\n            );\n    }\n\n    private createRequest(parameters: any): TransferImmediateRequest {\n        const request = new TransferImmediateRequest();\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation;\n        request.amount = parameters.amount;\n        request.message = parameters.message;\n        request.destinationPhone = parameters.destinationPhone;\n        request.cardNumberMasked = parameters.cardNumberMasked;\n        request.useMbwayPartner = parameters.useMbwayPartner;\n        request.scheduling = null;\n\n        return request;\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexesPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizableRegexesPathsError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { AgentifaiRequestFactoryService } from 'src/app/services/agentifai/agentifai-request-factory.service';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { TelecommunicationsPaymentRequest } from 'src/app/models/operation/request/payments/TelecommunicationsPaymentRequest';\n\nexport class SimulateTelecommunicationPaymentCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexesPathsSuccess: String[] = [\n        \"headers.+\",\n        \"status\",\n        `body\\.(operationId|operationStatus|${Anonymization.scheduling()})`\n    ]\n\n    private nonAnonymizableRegexesPathsError: String[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private requestFactory: AgentifaiRequestFactoryService,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters: any = this.request.getParameters()\n        const request = this.createRequest(parameters);\n\n        return service.simulateTelecomPayment(headers, request)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(resp => this.createErrorResponse(resp))\n            );\n    }\n\n    private createRequest(parameters: any): TelecommunicationsPaymentRequest {\n        const request = new TelecommunicationsPaymentRequest();\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation;\n        request.scheduling = this.requestFactory.createScheduling(parameters);\n        request.sourceAccount = parameters.sourceAccount;\n        request.reference = parameters.reference;\n        request.amount = parameters.amount;\n        request.paymentConfigurationCode = parseInt(parameters.paymentConfigurationCode);\n        request.parentPaymentConfigurationCode = parseInt(parameters.parentPaymentConfigurationCode);\n        request.taxPayerNumber = parameters.taxPayerNumber;\n\n        return request;\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexesPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizableRegexesPathsError)\n        )\n    }\n\n}","\nexport class AgentifaiRequest {\n    id: string;\n    data: JSON;\n\n    constructor(id: string, data: JSON) {\n        this.id = id;\n        this.data = data;\n    }\n\n    getParameters(): any {\n        return this.data[\"parameters\"];\n    }\n\n    getHeaders(): any {\n        return this.data[\"headers\"];\n    }\n}","import { Injectable } from '@angular/core';\nimport { Platform } from '@ionic/angular';\nimport { environment } from 'src/environments/environment';\n\nexport enum ENVS {\n  BROWSER,\n  DEV,\n  DEV2,\n  TI,\n  CQ,\n  PROD\n}\n\n/**\n* https://ti-pce-bo.grupocgd.com/bkoWeb/ // https://cq-pce-bo.grupocgd.com/bkoWeb/home.seam\n*/\n\ndeclare var IRoot: any;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EnvironmentService {\n\n  public DEVELOPMENT_MODE: boolean = true;\n\n  private ENV_URLS: Array<string> = [\n    'http://localhost:8100/pceApi/rest/v1/',\n    'http://10.52.33.69:8080/pceApi/rest/v1/',\n    'http://10.52.3.80:28080/pceApi/rest/v1/',\n    'http://ti-app.cgd.pt/pceApi/rest/v1/',\n    'https://app.cqcgd.pt/pceApi/rest/v1/',\n    'https://qoba.cgd.pt/pceApi/rest/v1/',\n    'https://app.cgd.pt/pceApi/rest/v1/'\n  ];\n\n  private ENVS_CODES = {\n    \"ANDROID\": {\n      \"platform\": \"android\",\n      \"codeSmartPhone\": \"as2\",\n      \"codeTablet\": \"at2\"\n    },\n    \"IOS_SMARTPHONE\": {\n      \"platform\": \"iphone\",\n      \"code\": \"is2\"\n    },\n    \"IOS_TABLET\": {\n      \"platform\": \"ipad\",\n      \"code\": \"it2\"\n    }\n  };\n\n  public LANG_PT = 'pt-PT';\n  public LANG_EN = 'en-US'; //locale on services PCE\n\n  private DEFAULT_ENV: ENVS = ENVS.DEV;\n  private DEFAULT_LANG = this.LANG_PT;\n  private DEFAULT_DEVICE_TYPE = 'NA';\n  private DEFAULT_APPVERSION = 'NA';\n  public APPNAME = 'APP_CAIXADIRECTA';\n  public SELECTED_ENV: ENVS;\n\n  public baseUrl: string;\n  public pceVersion: string;\n  public appVersion: string;\n  public deviceType: string;\n  public languageCode: string;\n  public isDeviceRooted: boolean;\n\n  public isBrowser: boolean = false;\n  public aliceActive;\n  public reloadBanners = false;\n\n  private iPhoneModelsWithNotch: string[] = ['iPhone10,3', 'iPhone10,6', 'iPhone11,2', 'iPhone11,4', 'iPhone11,6', 'iPhone11,8', 'iPhone12,1', 'iPhone12,3', 'iPhone12,5'];\n\n  public aliceStateChangeCallback: Function = () => { };\n  public isAgentifaiLoggerEnabled: boolean = true;\n\n  ENVS_AUX = ENVS;\n\n  constructor(public platform: Platform) {\n    if (!this.DEVELOPMENT_MODE) {\n      this.DEFAULT_ENV = ENVS.PROD;\n    }\n\n    this.SELECTED_ENV = this.DEFAULT_ENV;\n    this.pceVersion = \"NA\";\n    this.languageCode = this.DEFAULT_LANG;\n    this.deviceType = this.DEFAULT_DEVICE_TYPE;\n    this.appVersion = this.DEFAULT_APPVERSION;\n    this.isDeviceRooted = false;\n    this.aliceActive = false;\n\n    if (platform && platform.is(\"cordova\")) {\n      console.log(platform);\n      this.appVersion = \"3.10.0\";\n      if (platform) {\n        if (platform.is('android')) {\n          if (platform.is(\"tablet\")) {\n            this.deviceType = this.ENVS_CODES.ANDROID.codeTablet;\n          } else {\n            this.deviceType = this.ENVS_CODES.ANDROID.codeSmartPhone;\n          }\n        } else if (platform.is('iphone')) {\n          this.deviceType = this.ENVS_CODES.IOS_SMARTPHONE.code;\n        } else if (platform.is('ipad')) {\n          this.deviceType = this.ENVS_CODES.IOS_TABLET.code;\n        }\n      }\n      this.baseUrl = this.ENV_URLS[this.DEFAULT_ENV];\n    } else {\n      console.log(\"BROWSER\");\n      this.baseUrl = this.ENV_URLS[ENVS.BROWSER];\n      this.SELECTED_ENV = ENVS.BROWSER;\n      this.isBrowser = true;\n      this.appVersion = \"1.0.0\";\n      this.deviceType = this.ENVS_CODES.ANDROID.codeSmartPhone;\n    }\n\n    this.platform.ready().then(() => {\n      if (this.platform && this.platform.is(\"cordova\")) {\n        IRoot.isRooted((result: boolean) => {\n          this.isDeviceRooted = result;\n        }, (error: string) => {\n          console.log(\"error checking if device rooted: \" + error);\n        });\n      }\n    });\n\n    console.log(\"url :\" + this.baseUrl);\n  }\n\n  isIPhone = function (): Boolean {\n    if (this.deviceType == this.ENVS_CODES.IOS_SMARTPHONE.code || this.deviceType == this.ENVS_CODES.IOS_TABLET.code) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  isAndroid = function (): Boolean {\n    if (this.deviceType == this.ENVS_CODES.ANDROID.codeSmartPhone || this.deviceType == this.ENVS_CODES.ANDROID.codeTablet) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  isTablet = function (): Boolean {\n    if (this.deviceType == this.ENVS_CODES.IOS_TABLET.code || this.deviceType == this.ENVS_CODES.ANDROID.codeTablet) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  changeEnvironment = function () {\n    //if (this.ENVS_AUX.BROWSER === this.SELECTED_ENV) {\n    //    this.SELECTED_ENV = this.ENVS_AUX.DEV;\n    //    this.baseUrl = this.ENV[this.SELECTED_ENV];\n    //} else\n    if (this.ENVS_AUX.DEV === this.SELECTED_ENV) {\n      this.SELECTED_ENV = this.ENVS_AUX.DEV2;\n      this.baseUrl = this.ENV[this.SELECTED_ENV];\n    } else if (this.ENVS_AUX.DEV2 === this.SELECTED_ENV) {\n      this.SELECTED_ENV = this.ENVS_AUX.TI;\n      this.baseUrl = this.ENV[this.SELECTED_ENV];\n    } else if (this.ENVS_AUX.TI === this.SELECTED_ENV) {\n      this.SELECTED_ENV = this.ENVS_AUX.CQ;\n      this.baseUrl = this.ENV[this.SELECTED_ENV];\n    } else if (this.ENVS_AUX.CQ === this.SELECTED_ENV) {\n      this.SELECTED_ENV = this.ENVS_AUX.PROD;\n      this.baseUrl = this.ENV[this.SELECTED_ENV];\n    } else if (this.ENVS_AUX.PROD === this.SELECTED_ENV) {\n      this.SELECTED_ENV = this.ENVS_AUX.DEV;\n      this.baseUrl = this.ENV[this.SELECTED_ENV];\n    } else {\n      this.SELECTED_ENV = this.ENVS_AUX.BROWSER;\n      this.baseUrl = this.ENV[this.SELECTED_ENV];\n    }\n    if (this.DEVELOPMENT_MODE) {\n      console.log(\"new url :\" + this.baseUrl);\n    }\n  }\n\n  /***** Alice methods *****/\n\n  isAliceActive(): boolean {\n    return this.aliceActive;\n  }\n\n  openAlice(): void {\n    this.aliceActive = true;\n  }\n\n  closeAlice(): void {\n    this.aliceActive = false;\n  }\n\n  getAgentifaiConfiguration(): any {\n    return {\n      apiUrl: environment.assistantConfiguration.apiUrl,\n      apiKey: environment.assistantConfiguration.apiKey\n    }\n  }\n  \n}\n\n","import { Injectable } from '@angular/core';\nimport { EnvironmentService } from 'src/app/services/environment-service/environment-service.service';\nimport { UtilsService } from 'src/app/services/utils/utils.service';\nimport { Credential } from 'src/app/models/operation/Credential';\nimport { InternalUtils } from 'src/app/internal/internal-utils';\nimport { HTTP } from '@ionic-native/http/ngx';\nimport { Observable, from } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class Api {\n\n  public developmentMode: boolean = true;\n  public HEADERS_KEYS_MAPPING_ALICE = { \n    \"language\": \"X-CGD-APP-LANGUAGE\", \n    \"requestId\": \"X-CGD-APP-Bot-Request-Id\" \n  };\n\n  constructor(\n    public http: HTTP,\n    public env: EnvironmentService,\n    public utils: UtilsService\n  ) { }\n\n  private getHeaders = function (fromAgentifai: boolean, agentifaiHeaders?: any): any {\n    let headers = {\n      \"X-CGD-APP-Device\": this.env.deviceType,\n      \"X-CGD-APP-Version\": this.env.appVersion,\n      \"X-CGD-APP-LANGUAGE\": this.env.languageCode,\n      \"X-CGD-APP-Name\": this.env.APPNAME\n    };\n\n    if (this.env.isDeviceRooted) {\n      headers[\"X-CGD-APP-Possibly-Rooted\"] = this.env.isDeviceRooted.toString();\n    }\n\n    if (fromAgentifai) {\n      headers[\"X-CGD-APP-Bot\"] = fromAgentifai.toString();\n\n      if (agentifaiHeaders != null) {\n        if (agentifaiHeaders['requestId']) {\n          headers[\"X-CGD-APP-Bot-Request-Id\"] = agentifaiHeaders['requestId'];\n        }\n\n        if (agentifaiHeaders[\"language\"]) {\n          headers[\"X-CGD-APP-LANGUAGE\"] = agentifaiHeaders['language'];\n        }\n      }\n    }\n\n    return headers;\n  }\n\n  private getHeadersAuthorization = function (value: string, fromAgentifai: boolean, agentifaiHeaders: any): any {\n    let headers = this.getHeaders(fromAgentifai, agentifaiHeaders);\n\n    headers[\"Authorization\"] = value;\n\n    return headers;\n  }\n\n  public getHeadersAlice = function() {\n    return this.getHeaders(true);\n  }\n\n  //////////////////////////\n  ///// PUBLIC METHODS /////\n  //////////////////////////\n\n  ///// LOGIN /////\n\n  postLogin(auth: any, serviceUrl: string, isFingerPrint?: boolean, loyaltyCode?: string): Observable<any> {\n    let headers = this.getHeadersAuthorization(\"Basic \" + auth, false, null);\n\n    if (loyaltyCode) {\n      headers[\"X-CGD-APP-LOYALTY-CODE\"] = loyaltyCode;\n    }\n\n    let endpoint = this.createUrl(serviceUrl);\n\n    if (this.developmentMode) {\n      console.log(\"POST \" + endpoint);\n      console.log(\"HEADERS: \" + JSON.stringify(headers));\n    }\n\n    this.http.clearCookies();\n    this.http.setDataSerializer(\"json\");\n\n    return from(this.http.post(endpoint, {}, headers).then((resp) => {\n      if (resp && resp.data) {\n        let data = JSON.parse(resp.data);\n\n        return { headers: resp.headers, data: data };\n      } else {\n        return resp;\n      }\n    }, (err) => {\n      if (isFingerPrint) {\n        this.utils.handleError({ error: { error: err, isLogin: true, isFingerPrint: true } });\n        throw err;\n      } else {\n        this.utils.handleError({ error: { error: err, isLogin: true } });\n        throw err;\n      }\n\n    }));\n  }\n\n  ///// PUBLIC GET /////\n\n  genericGetMethod(serviceUrl: string, notEncodeUrl?: boolean): Observable<any> {\n    return this.genericGetMethodInternal(serviceUrl, false, null, notEncodeUrl);\n  }\n\n  genericGetMethodAgentifai(serviceUrl: string, agentifaiHeaders: any, notEncodeUrl?: boolean): Observable<any> {\n    return this.genericGetMethodInternal(serviceUrl, true, agentifaiHeaders, notEncodeUrl);\n  }\n\n  private genericGetMethodInternal(serviceUrl: string, fromAgentifai: boolean, agentifaiHeaders: any, notEncodeUrl?: boolean): Observable<any> {\n    let url = encodeURI(serviceUrl);\n\n    if (notEncodeUrl) {\n      url = serviceUrl;\n    }\n\n    let headers = this.getHeaders(fromAgentifai, agentifaiHeaders);\n\n    let endpoint = this.createUrl(url);\n    if (this.developmentMode) {\n      console.log(\"GET \" + endpoint);\n      console.log(\"HEADERS: \" + JSON.stringify(headers));\n    }\n\n    this.http.setDataSerializer(\"json\");\n\n    return from(this.http.get(endpoint, null, headers).then(resp => {\n      if (resp && resp.data && !fromAgentifai) {\n        return JSON.parse(resp.data);\n      } else {\n        return resp;\n      }\n    }, (err) => {\n      this.utils.handleError({ error: { error: err } });\n      throw err;\n    }));\n  }\n\n  ///// PUBLIC GET WITH SPECIFIC LANGUAGE /////\n\n  genericGetMethodWithLanguage(serviceUrl: string, languageCode: string, notEncodeUrl?: boolean): Observable<any> {\n    let url = encodeURI(serviceUrl);\n\n    if (notEncodeUrl) {\n      url = serviceUrl;\n    }\n\n    let headers = this.getHeaders(false, null);\n\n    // force language header with value received\n    headers[\"X-CGD-APP-LANGUAGE\"] = languageCode;\n\n    let endpoint = this.createUrl(url);\n\n    if (this.developmentMode) {\n      console.log(\"GET \" + endpoint);\n      console.log(\"HEADERS: \" + JSON.stringify(headers));\n    }\n\n    this.http.setDataSerializer(\"json\");\n\n    return from(this.http.get(endpoint, null, headers).then(resp => {\n      if (resp && resp.data) {\n        return JSON.parse(resp.data);\n      } else {\n        return resp;\n      }\n    }, (err) => {\n      this.utils.handleError({ error: { error: err } });\n      throw err;\n    }));\n  }\n\n  ///// PUBLIC POST WITH INPUT /////\n\n  genericPostMethodWithInput(input: any, serviceUrl: string): Observable<any> {\n    return this.genericPostMethodWithInputInternal(input, serviceUrl, false, null);\n  }\n\n  genericPostMethodWithInputAgentifai(input: any, serviceUrl: string, agentifaiHeaders: any): Observable<any> {\n    return this.genericPostMethodWithInputInternal(input, serviceUrl, true, agentifaiHeaders);\n  }\n\n  private genericPostMethodWithInputInternal(input: any, serviceUrl: string, fromAgentifai: boolean, agentifaiHeaders: any): Observable<any> {\n    let headers = this.getHeaders(fromAgentifai, agentifaiHeaders);\n    var payload = input != null ? input : {};\n\n    let endpoint = this.createUrl(serviceUrl);\n\n    if (this.developmentMode) {\n      console.log(\"POST \" + endpoint);\n      console.log(\"HEADERS: \" + JSON.stringify(headers));\n      console.log(\"BODY: \" + JSON.stringify(payload));\n    }\n\n    this.http.setDataSerializer(\"json\");\n\n    return from(this.http.post(endpoint, payload, headers).then(resp => {\n      this.utils.APPSetTimeout();\n      if (resp && resp.data && !fromAgentifai) {\n        return JSON.parse(resp.data);\n      } else {\n        return resp;\n      }\n    }, (err) => {\n      this.utils.handleError({ error: { error: err } });\n      throw err;\n    }));\n  }\n\n\n  /////////////////////////////////\n  ///// AUTHENTICATED METHODS /////\n  /////////////////////////////////\n\n  ///// AUTHENTICATED GET /////\n\n  genericGetAuthenticatedMethod(serviceUrl: string, notEncodeUrl?: boolean, credential?: Credential): Observable<any> {\n    return this.genericGetAuthenticatedMethodInternal(serviceUrl, false, null, notEncodeUrl, credential);\n  }\n\n  genericGetAuthenticatedMethodAgentifai(serviceUrl: string, agentifaiHeaders: any, notEncodeUrl?: boolean, credential?: Credential): Observable<any> {\n    return this.genericGetAuthenticatedMethodInternal(serviceUrl, true, agentifaiHeaders, notEncodeUrl, credential);\n  }\n\n  private genericGetAuthenticatedMethodInternal(serviceUrl: string, fromAgentifai: boolean, agentifaiHeaders: any, notEncodeUrl?: boolean, credential?: Credential): Observable<any> {\n    if (credential == null) {\n      this.utils.resetCredentials();\n    }\n    let url = encodeURI(serviceUrl);\n\n    if (notEncodeUrl) {\n      url = serviceUrl;\n    }\n\n    let headers = null;\n\n    if (credential && credential.type) {\n      headers = this.getHeadersAuthorization(credential.type + \" \" + credential.value, fromAgentifai, agentifaiHeaders);\n    } else {\n      headers = this.getHeaders(fromAgentifai, agentifaiHeaders);\n    }\n\n    let endpoint = this.createUrl(url);\n\n    if (this.developmentMode) {\n      console.log(\"GET \" + endpoint);\n      console.log(\"HEADERS: \" + JSON.stringify(headers));\n    }\n\n    this.http.setDataSerializer(\"json\");\n    this.http.setRequestTimeout(300000);\n\n    return from(this.http.get(endpoint, {}, headers).then(resp => {\n      this.utils.APPSetTimeout();\n      if (resp && resp.data && !fromAgentifai) {\n        return JSON.parse(resp.data);\n      } else {\n        return resp;\n      }\n    }, (err) => {\n      this.utils.handleError({ error: { error: err } });\n      throw err;\n    }));\n  }\n\n  ///// AUTHENTICATED POST /////\n\n  genericPostAuthenticatedMethod(serviceUrl: string): Observable<any> {\n    return this.genericPostAuthenticatedMethodInternal(serviceUrl, false, null);\n  }\n\n  genericPostAuthenticatedMethodAgentifai(serviceUrl: string, agentifaiHeaders: any): Observable<any> {\n    return this.genericPostAuthenticatedMethodInternal(serviceUrl, true, agentifaiHeaders);\n  }\n\n  private genericPostAuthenticatedMethodInternal(serviceUrl: string, fromAgentifai: boolean, agentifaiHeaders: any): Observable<any> {\n    let headers = this.getHeaders(fromAgentifai, agentifaiHeaders);\n    let endpoint = this.createUrl(serviceUrl);\n\n    if (this.developmentMode) {\n      console.log(\"POST \" + endpoint);\n      console.log(\"HEADERS: \" + JSON.stringify(headers));\n    }\n\n    this.http.setDataSerializer(\"json\");\n\n    return from(this.http.post(endpoint, {}, headers).then(resp => {\n      this.utils.APPSetTimeout();\n\n      if (resp && resp.data && !fromAgentifai) {\n        return JSON.parse(resp.data);\n      } else {\n        return resp;\n      }\n    }, (err) => {\n      this.utils.handleError({ error: { error: err } });\n      throw err;\n    }));\n  }\n\n  ///// AUTHENTICATED POST WITH INPUT /////\n\n  genericPostAuthenticatedMethodWithInput(input: any, serviceUrl: string, credential?: Credential): Observable<any> {\n    return this.genericPostAuthenticatedMethodWithInputInternal(input, serviceUrl, false, null, credential);\n  }\n\n  genericPostAuthenticatedMethodWithInputAgentifai(input: any, serviceUrl: string, agentifaiHeaders: any, credential?: Credential): Observable<any> {\n    return this.genericPostAuthenticatedMethodWithInputInternal(input, serviceUrl, true, agentifaiHeaders, credential);\n  }\n\n  private genericPostAuthenticatedMethodWithInputInternal(input: any, serviceUrl: string, fromAgentifai: boolean, agentifaiHeaders: any, credential?: Credential): Observable<any> {\n    if (credential == null) {\n      this.utils.resetCredentials();\n    }\n\n    let headers = null;\n\n    if (credential && credential.type) {\n      headers = this.getHeadersAuthorization(credential.type + \" \" + credential.value, fromAgentifai, agentifaiHeaders);\n    } else {\n      headers = this.getHeaders(fromAgentifai, agentifaiHeaders);\n    }\n\n    var payload = input != null ? input : {};\n    let endpoint = this.createUrl(serviceUrl);\n\n    if (this.developmentMode) {\n      console.log(\"POST \" + endpoint);\n      console.log(\"HEADERS: \" + JSON.stringify(headers));\n      console.log(\"BODY: \" + JSON.stringify(payload));\n    }\n\n    this.http.setDataSerializer(\"json\");\n    this.http.setRequestTimeout(300000);\n\n    return from(this.http.post(endpoint, payload, headers)\n      .then(resp => {\n        this.utils.APPSetTimeout();\n        if (resp && resp.data && !fromAgentifai) {\n          return JSON.parse(resp.data);\n        } else {\n          return resp;\n        }\n      }, (err) => {\n        this.utils.handleError({ error: { error: err } });\n        throw err;\n      }));\n  }\n\n  ///// AUTHENTICATED PUT /////\n\n  genericPutAuthenticatedMethod(serviceUrl: string): Observable<any> {\n    return this.genericPutAuthenticatedMethodInternal(serviceUrl, false, null);\n  }\n\n  genericPutAuthenticatedMethodAgentifai(serviceUrl: string, agentifaiHeaders: any): Observable<any> {\n    return this.genericPutAuthenticatedMethodInternal(serviceUrl, true, agentifaiHeaders);\n  }\n\n  private genericPutAuthenticatedMethodInternal(serviceUrl: string, fromAgentifai: boolean, agentifaiHeaders: any): Observable<any> {\n    let headers = this.getHeaders(fromAgentifai, agentifaiHeaders);\n    let endpoint = this.createUrl(serviceUrl);\n\n    if (this.developmentMode) {\n      console.log(\"PUT \" + endpoint);\n      console.log(\"HEADERS: \" + JSON.stringify(headers));\n    }\n\n    this.http.setDataSerializer(\"json\");\n\n    return from(this.http.put(endpoint, {}, headers).then(resp => {\n      this.utils.APPSetTimeout();\n      if (resp && resp.data && !fromAgentifai) {\n        return JSON.parse(resp.data);\n      } else {\n        return resp;\n      }\n    }, (err) => {\n      this.utils.handleError({ error: { error: err } });\n      throw err;\n    }));\n  }\n\n  ///// AUTHENTICATED PUT WITH INPUT /////\n\n  genericPutAuthenticatedMethodWithInput(input: any, serviceUrl: string): Observable<any> {\n    return this.genericPutAuthenticatedMethodWithInputInternal(input, serviceUrl, false, null);\n  }\n\n  genericPutAuthenticatedMethodWithInputAgentifai(input: any, serviceUrl: string, agentifaiHeaders: any): Observable<any> {\n    return this.genericPutAuthenticatedMethodWithInputInternal(input, serviceUrl, true, agentifaiHeaders);\n  }\n\n  private genericPutAuthenticatedMethodWithInputInternal(input: any, serviceUrl: string, fromAgentifai: boolean, agentifaiHeaders: any): Observable<any> {\n    let headers = this.getHeaders(fromAgentifai, agentifaiHeaders);\n    var payload = input != null ? input : {};\n\n    let endpoint = this.createUrl(serviceUrl);\n\n    if (this.developmentMode) {\n      console.log(\"PUT \" + endpoint);\n      console.log(\"HEADERS: \" + JSON.stringify(headers));\n      console.log(\"BODY: \" + JSON.stringify(payload));\n    }\n\n    this.http.setDataSerializer(\"json\");\n\n    return from(this.http.put(endpoint, payload, headers).then(resp => {\n      this.utils.APPSetTimeout();\n      if (resp && resp.data && !fromAgentifai) {\n        return JSON.parse(resp.data);\n      } else {\n        return resp;\n      }\n    }, (err) => {\n      this.utils.handleError({ error: { error: err } });\n      throw err;\n    }));\n  }\n\n  ///// AUTHENTICATED DELETE /////\n\n  genericDeleteAuthenticatedMethod(serviceUrl: string): Observable<any> {\n    return this.genericDeleteAuthenticatedMethodInternal(serviceUrl, false, null);\n  }\n\n  genericDeleteAuthenticatedMethodAgentifai(serviceUrl: string, agentifaiHeaders: any): Observable<any> {\n    return this.genericDeleteAuthenticatedMethodInternal(serviceUrl, true, agentifaiHeaders);\n  }\n\n  private genericDeleteAuthenticatedMethodInternal(serviceUrl: string, fromAgentifai: boolean, agentifaiHeaders: any): Observable<any> {\n    let headers = this.getHeaders(fromAgentifai, agentifaiHeaders);\n    let endpoint = this.createUrl(serviceUrl);\n\n    if (this.developmentMode) {\n      console.log(\"DELETE \" + endpoint);\n      console.log(\"HEADERS: \" + JSON.stringify(headers));\n    }\n\n    this.http.setDataSerializer(\"json\");\n\n    return from(this.http.delete(endpoint, null, headers).then(resp => {\n      this.utils.APPSetTimeout();\n      if (resp && resp.data && !fromAgentifai) {\n        return JSON.parse(resp.data);\n      } else {\n        return resp;\n      }\n    }, (err) => {\n      this.utils.handleError({ error: { error: err } });\n      throw err;\n    }));\n  }\n\n  ///// LOGOUT /////\n\n  deleteLogout(serviceUrl: string): Observable<any> {\n    return this.deleteLogoutInternal(serviceUrl, false, null);\n  }\n\n  deleteLogoutAgentifai(serviceUrl: string, agentifaiHeaders: any): Observable<any> {\n    return this.deleteLogoutInternal(serviceUrl, true, agentifaiHeaders);\n  }\n\n  private deleteLogoutInternal(serviceUrl: string, fromAgentifai: boolean, agentifaiHeaders: any): Observable<any> {\n    let headers = this.getHeaders(fromAgentifai, agentifaiHeaders);\n    let endpoint = this.createUrl(serviceUrl);\n\n    if (this.developmentMode) {\n      console.log(\"DELETE \" + endpoint);\n      console.log(\"HEADERS: \" + JSON.stringify(headers));\n    }\n\n    this.http.setDataSerializer(\"json\");\n\n    return from(this.http.delete(endpoint, null, headers).then(resp => {\n      if (resp && resp.data && !fromAgentifai) {\n        return JSON.parse(resp.data);\n      } else {\n        return resp;\n      }\n    }, (err) => {\n      this.utils.handleError({ error: { error: err } });\n      throw err;\n    }));\n  }\n\n  genericClearCookies() {\n    this.utils.APPClearTimeout();\n    if (!this.env.isBrowser) {\n      this.http.clearCookies();\n    }\n  }\n\n  private createUrl(endpoint: string) {\n    return InternalUtils.getBaseUrl() + endpoint;\n  }\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetCurrentCustomerContactsCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        \"body\\.contacts\\.[^.]+\\.(communicationMeans|contactType)(?:$|\\W)\"\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n\n        return service.getCustomerContacts(headers)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\n\nexport class AgentifaiResponse{\n    requestId: string;\n    success: Boolean;\n    result: WidgetResponse;\n\n    constructor(requestId: string, success: Boolean, result: WidgetResponse) {\n        this.requestId = requestId;\n        this.success = success;\n        this.result = result;\n    }\n}","import { Injectable } from '@angular/core';\nimport { EnvironmentService } from 'src/app/services/environment-service/environment-service.service';\nimport { StorageService } from 'src/app/services/storage/storage.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AssistantUtilsService {\n\n  constructor(\n    private environment: EnvironmentService,\n    private storage: StorageService\n  ) { }\n\n  resetDefaultConfig() {\n    const config = this.getDefaultAssistantConfig()\n    return this.setConfig(config.apiUrl, config.apiKey, config.settings)\n  }\n\n  getConfig() {\n    const apiUrl = this.getApiUrl()\n    const apiKey = this.getApiKey()\n    const settings = this.getSettings()\n\n    return Promise.all([apiUrl, apiKey, settings])\n  }\n\n  setConfig(apiUrl: string, apiKey: string, settings: any) {\n    return Promise.all([\n      this.storage.setApiUrl(apiUrl), \n      this.storage.setApiKey(apiKey),\n      this.storage.setSettings(settings)\n    ])\n  }\n\n  private getApiUrl(): Promise<string> {\n    const defaultApiUrl = this.getDefaultAssistantConfig().apiUrl\n\n    return new Promise((resolve, _) => {\n      this.storage.getApiUrl()\n        .then(result => {\n          if (result != null) {\n            resolve(result)\n          } else {\n            resolve(defaultApiUrl)\n          }\n        })\n        .catch(() => {\n          resolve(defaultApiUrl)\n        })\n    })\n  }\n\n  private getApiKey(): Promise<string> {\n    const defaultApiKey = this.getDefaultAssistantConfig().apiKey\n\n    return new Promise((resolve, _) => {\n      this.storage.getApiKey()\n        .then(result => {\n          if (result != null) {\n            resolve(result)\n          } else {\n            resolve(defaultApiKey)\n          }\n        })\n        .catch(() => {\n          resolve(defaultApiKey)\n        })\n    })\n  }\n\n  private getSettings(): Promise<any> {\n      const defaultSettings = this.getDefaultSettings()\n\n      return new Promise((resolve, _) => {\n        this.storage.getSettings()\n        .then(result => {\n          if(result != null) {\n            resolve(result)\n          } else {\n            resolve(defaultSettings)\n          }\n        })\n        .catch(() => {\n          resolve(defaultSettings)\n        })\n      })\n  }\n\n  private getDefaultAssistantConfig() {\n    return this.environment.getAgentifaiConfiguration();\n  }\n\n  private getDefaultSettings(): any {\n    return {\n      defaultTheme: \"light\",\n      themes: {\n        light: \"AssistantConfiguration.json\",\n        dark: \"AssistantConfigurationDark.json\"\n      }\n    }\n  }\n\n}\n","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\n\nexport class GetFrequentSEPATransfer implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        \"body\\.(operationName|operationId|amount)(?:$|\\W)\"\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const idFrequentOperation = this.request.getParameters()[\"idFrequentOperation\"];\n\n        return service.getFrequentSEPAoperation(headers, idFrequentOperation)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { CallbackSolicitationRequest } from 'src/app/models/operation/request/customers/CallbackSolicitationRequest';\n\nexport class SetCallback implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\"\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) {}\n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters = this.request.getParameters()\n        const request = this.createRequest(parameters);\n\n        return service.setCallback(headers, request)\n            .pipe(\n                map( resp => this.createSuccessResponse(resp) ),\n                catchError( error => this.createErrorResponse(error) )\n            )\n    }\n\n    private createRequest(parameters: any): CallbackSolicitationRequest {\n        const request = new CallbackSolicitationRequest();\n        request.availableDate = parameters.availableDate;\n        request.availableTime = parameters.availableTime;\n        request.coments = parameters.comments;\n        request.destinationTelephone = parameters.destinationTelephone;\n        request.destinationType = parameters.destinationType;\n        request.period = parameters.period;\n        request.subject = parameters.subject;\n        request.subjectKey = parameters.subjectKey;\n\n        if (parameters.subjectId) {\n            request.subjectId = parameters.subjectId;\n        }\n        \n        return request;\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","export class Scheduling {\n    startDate: string;\n    endDate: string;\n    frequencyType: string;\n    numberOfOperations: number;\n\n    constructor() {\n        this.startDate = '';\n        this.endDate = '';\n        this.frequencyType = null;\n        this.numberOfOperations = null;\n    }\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { AgentifaiRequestFactoryService } from 'src/app/services/agentifai/agentifai-request-factory.service';\nimport { MBWayPartnerAcceptTransferCGDAccountRequest } from 'src/app/models/operation/request/cards/MBWayPartnerAcceptTransferCGDAccountRequest';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\n\nexport class UpdateTransferConsentForCgdAccountCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        `body\\.(operationId|operationStatus|${Anonymization.scheduling()})`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private requestFactory: AgentifaiRequestFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters = this.request.getParameters()\n        const request = this.createRequest(parameters);\n\n        return service.acceptTransferCGD(headers, request)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createRequest(parameters: any): MBWayPartnerAcceptTransferCGDAccountRequest {\n        const request = new MBWayPartnerAcceptTransferCGDAccountRequest();\n        request.operationId = parseInt(parameters.operationId);\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation;\n        request.acceptedTransferCGD = parameters.acceptedTransferCGD;\n        request.scheduling = this.requestFactory.createScheduling(parameters);\n\n        return request;\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetTermsAndConditionsConsentCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizablePathRegex: String[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n\n        return service.getVoiceTreatmentConsent(headers)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizablePathRegex)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegex)\n        )\n    }\n\n}","import { GenericOperationRequest } from '../GenericOperationRequest'\n\nexport class CredentialUnlockAnswersRequest extends GenericOperationRequest {\n\n    answers: string[];\n    contractNumber: string;\n\n    constructor() {\n        super();\n        this.answers = [];\n        this.contractNumber = \"\";\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { AgentifaiUtils } from 'src/app/agentifai/utils/agentifai-utils'\nimport { AgentifaiCardsTransformerService } from 'src/app/services/agentifai/agentifai-cards-transformer.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { CardsUtils } from 'src/app/agentifai/commands/cards/cards-utils';\n\nexport class GetCardsGeneralData implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        \"body\\.(\"\n            + \"((cardAccounts\\.[^.]+)|defaultCardAccount)\\.(\"\n                + \"currency|type|cardCodeType|statementIssueDateDescription|\"\n                + \"statementPaymentLimitDescription|productImageUrl|\"\n                + `cards\\.[^.]+\\.(${CardsUtils.nonAnonymizedCardProperties}))`\n            + \"|defaultCardAccountBalances\\.availableCredit)\"\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private transformer: AgentifaiCardsTransformerService\n    ) {}\n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters = this.request.getParameters()\n        const cardAccountId = parameters[\"cardAccountId\"];\n        const targetCardOperationType = parameters[\"targetCardOperationType\"];\n        const omitTransactionsInResponse = parameters[\"omitTransactionsInResponse\"];\n\n        return service.getCardsGeneralData(headers, cardAccountId, targetCardOperationType, omitTransactionsInResponse)\n            .pipe(\n                map( resp => this.createSuccessResponse(resp) ),\n                catchError( error => this.createErrorResponse(error) )\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        var transformedResponse = this.transformResponse(response);\n        return this.createResponse(transformedResponse, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n    private transformResponse(response: any): any {\n        var data = AgentifaiUtils.mapFromString(response.data);\n        \n        if (data != null) {\n            data = this.transformer.addCardsGeneralDataProperties(data);\n        }\n\n        response.data = data;\n\n        return response;\n    }\n\n}","import { GenericOperationRequest } from 'src/app/models/operation/request/GenericOperationRequest'\nimport { Charges } from 'src/app/models/operation/Charges';\n\nexport class TransferSEPARequest extends GenericOperationRequest {\n\n\n    charges: Charges[];\n    sourceAccount: any;\n    destinationAccount: any;\n    amount: any;\n    currency: string;\n    description: string;\n    additionalInfo: string;\n    destinationName: string;\n    finality: string;\n    comment: string;\n    urgent: boolean;\n    commissionFee: number;\n    stampDuty: number;\n    warningCharge: number;\n    warningVAT: number;\n    chargesSum: number;\n    chargesSumCurrency: string;\n\n    constructor() {\n        super();\n       \n        this.charges = [new Charges()];\n        this.sourceAccount = '';\n        this.destinationAccount = '';\n        this.amount = '';\n        this.currency = '';\n        this.description = '';\n        this.additionalInfo = '';\n        this.destinationName = '';\n        this.finality = '';\n        this.comment = '';\n        this.urgent = false;\n        this.commissionFee = null;\n        this.stampDuty = null;\n        this.warningCharge = null;\n        this.warningVAT = null;\n        this.chargesSum = null;\n        this.chargesSumCurrency = '';\n\n    }\n\n    get getSourceAccount(): any {\n        return this.sourceAccount;\n    }\n\n    set setSourceAccount(sourceAccount: any) {\n        this.sourceAccount = sourceAccount;\n    }\n\n    get getDestinationAccount(): any {\n        return this.destinationAccount;\n    }\n\n    set setDestinationAccount(destinationAccount: any) {\n        this.destinationAccount = destinationAccount;\n    }\n\n    get getAmount(): any {\n        return this.amount;\n    }\n\n    set setAmount(amount: any) {\n        this.amount = amount;\n    }\n\n    get getCurrency(): any {\n        return this.currency;\n    }\n\n    set setCurrency(currency: any) {\n        this.currency = currency;\n    }\n\n    get getDescription(): string {\n        return this.description;\n    }\n\n    set setDescription(description: string) {\n        this.description = description;\n    }\n\n    get getAdditionalInfo(): string {\n        return this.additionalInfo;\n    }\n\n    set setAdditionalInfo(additionalInfo: string) {\n        this.additionalInfo = additionalInfo;\n    }\n\n    get getDestinationName(): string {\n        return this.destinationName;\n    }\n\n    set setDestinationName(destinationName: string) {\n        this.destinationName = destinationName;\n    }\n\n    get getFinality(): string {\n        return this.finality;\n    }\n\n    set setFinality(finality: string) {\n        this.finality = finality;\n    }\n\n    get getComment(): string {\n        return this.comment;\n    }\n\n    set setComment(comment: string) {\n        this.comment = comment;\n    }\n\n    get getUrgent(): boolean {\n        return this.urgent;\n    }\n\n    set setUrgent(urgent: boolean) {\n        this.urgent = urgent;\n    }\n\n    get getCommissionFee(): number {\n        return this.commissionFee;\n    }\n\n    set setCommissionFee(commissionFee: number) {\n        this.commissionFee = commissionFee;\n    }\n\n    get getStampDuty(): number {\n        return this.stampDuty;\n    }\n\n    set setStampDuty(stampDuty: number) {\n        this.stampDuty = stampDuty;\n    }\n\n    get getWarningCharge(): number {\n        return this.warningCharge;\n    }\n\n    set setWarningCharge(warningCharge: number) {\n        this.warningCharge = warningCharge;\n    }\n\n    get getWarningVAT(): number {\n        return this.warningVAT;\n    }\n\n    set setWarningVAT(warningVAT: number) {\n        this.warningVAT = warningVAT;\n    }\n\n    get getChargesSum(): number {\n        return this.chargesSum;\n    }\n\n    set setChargesSum(chargesSum: number) {\n        this.chargesSum = chargesSum;\n    }\n\n    get getChargesSumCurrency(): string {\n        return this.chargesSumCurrency;\n    }\n\n    set setChargesSumCurrency(chargesSumCurrency: string) {\n        this.chargesSumCurrency = chargesSumCurrency;\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { map, catchError } from 'rxjs/operators';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetSmsTokenPhoneNumber implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\"\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) {}\n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n\n        return service.getContactSmsToken(headers)\n            .pipe(\n                map( resp => this.createSuccessResponse(resp) ),\n                catchError( error => this.createErrorResponse(error) )\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n    \n}","import { NgModule } from '@angular/core';\nimport { PreloadAllModules, RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: 'home',\n    loadChildren: () => import('./home/home.module').then( m => m.HomePageModule)\n  },\n  {\n    path: '',\n    redirectTo: 'home',\n    pathMatch: 'full'\n  },\n  {\n    path: 'second-page',\n    loadChildren: () => import('./second-page/second-page.module').then( m => m.SecondPagePageModule)\n  },\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(routes, { preloadingStrategy: PreloadAllModules })\n  ],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { GenericOperationRequest } from '../GenericOperationRequest';\r\n\r\nexport class CardPaymentRequest extends GenericOperationRequest {\r\n    sourceAccount: string;\r\n    amount: string;\r\n    currency: string;\r\n    destinationCardNumber: string;\r\n    cardPaymentType: string;\r\n    referenceNumber: number;\r\n    manuallyEnteredCardNumber: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { AgentifaiRequestFactoryService } from 'src/app/services/agentifai/agentifai-request-factory.service';\nimport { MBWayPartnerRequest } from 'src/app/models/operation/request/cards/MBWayPartnerRequest';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\n\nexport class SimulateMBWayAdhesionCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        `body\\.(operationId|operationStatus|${Anonymization.scheduling()})`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private requestFactory: AgentifaiRequestFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters = this.request.getParameters()\n        const request = this.createRequest(parameters);\n\n        return service.simulateAdhesionMbway(headers, request)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createRequest(parameters: any): MBWayPartnerRequest {\n        const request = new MBWayPartnerRequest();\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation;\n        request.phoneNumber = parameters.phoneNumber;\n        request.cardNumberMasked = parameters.cardNumberMasked;\n        request.amount = parameters.amount;\n        request.acceptedTransferCGD = parameters.acceptedTransferCGD;\n        request.scheduling = this.requestFactory.createScheduling(parameters);\n\n        return request;\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { AccountsUtils } from 'src/app/agentifai/commands/accounts/accounts-utils';\nimport { AgentifaiAccountsTransformerService } from 'src/app/services/agentifai/agentifai-accounts-transformer.service';\nimport { AgentifaiUtils } from 'src/app/agentifai/utils/agentifai-utils'\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetTransfersGeneralData implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        \"body\\.(\"\n        + \"frequentOperations\\.[^.]+\\.\"\n        + \"(operationName|operationType|operationId|amount)\"\n        + \"|accounts\\.[^.]+\\.\"\n        + `(${AccountsUtils.nonAnonymizedAccountsProperties})`\n        + \")(?:$|\\W)\"\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private accountsTransformer: AgentifaiAccountsTransformerService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n\n        return service.getTransferPageData(headers, false)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        var transformedResponse = this.transformResponse(response);\n        return this.createResponse(transformedResponse, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n    private transformResponse(response: any): any {\n        const data = AgentifaiUtils.mapFromString(response.data);\n\n        if (data.accounts != null) {\n            data.accounts = this.accountsTransformer.transformAccounts(data.accounts);\n            response.data = data;\n        }\n\n        return response;\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { AgentifaiRequestFactoryService } from 'src/app/services/agentifai/agentifai-request-factory.service';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { UpdateClientInfoRequest } from 'src/app/models/customers/updateClientInfo/UpdateClientInfoRequest';\nimport { UpdateClientInformationUtils } from './update-client-information-utils';\n\nexport class SimulateUpdateClientInformation implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexesPathsSuccess: String[] = [\n        \"headers.+\",\n        \"status\",\n        `body\\.(operationId|operationStatus|${Anonymization.scheduling()})`\n    ]\n\n    private nonAnonymizableRegexesPathsError: String[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private requestFactory: AgentifaiRequestFactoryService,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters: any = this.request.getParameters()\n        const request = this.createRequest(parameters);\n\n        return service.simulateUpdateClientInfo(headers, request)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(resp => this.createErrorResponse(resp))\n            );\n    }\n\n    private createRequest(parameters: any): UpdateClientInfoRequest {\n        const request = new UpdateClientInfoRequest()\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation\n        request.finalityQAList = this.requestFactory.createGenericKeyValueList(parameters.finalityQAList)\n\n        if (parameters.address) {\n            request.address = UpdateClientInformationUtils.createAddress(parameters.address)\n        }\n\n        if (parameters.personal) {\n            request.personal = UpdateClientInformationUtils.createPersonal(parameters.personal)\n        }\n        \n        if (parameters.attachments) {\n            request.attachments = UpdateClientInformationUtils.createAttachments(parameters.attachments)\n        }\n        \n        if (parameters.professional) {\n            request.professional = UpdateClientInformationUtils.createProfessional(parameters.professional)\n        }\n\n        if (parameters.scheduling) {\n            request.scheduling = this.requestFactory.createScheduling(parameters)\n        }\n\n        return request;\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexesPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizableRegexesPathsError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiRequestFactoryService } from 'src/app/services/agentifai/agentifai-request-factory.service';\nimport { Credential } from 'src/app/models/operation/Credential';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { UpdateClientInfoRequest } from 'src/app/models/customers/updateClientInfo/UpdateClientInfoRequest';\nimport { UpdateClientInformationUtils } from './update-client-information-utils';\n\nexport class ExecuteUpdateClientInformation implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexesPathsSuccess: String[] = [\n        \"headers.+\",\n        \"status\",\n        `body\\.(operationId|operationStatus|${Anonymization.scheduling()})`\n    ]\n\n    private nonAnonymizableRegexesPathsError: String[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private requestFactory: AgentifaiRequestFactoryService,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters = this.request.getParameters()\n        const request = this.createRequest(parameters)\n        const credential = this.createCredentials(parameters)\n\n        return service.executeUpdateClientInfo(headers, request, credential)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(resp => this.createErrorResponse(resp))\n            );\n    }\n\n    private createRequest(parameters: any): UpdateClientInfoRequest {\n        const request = new UpdateClientInfoRequest()\n        request.operationId = parameters.operationId\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation\n        request.finalityQAList = this.requestFactory.createGenericKeyValueList(parameters.finalityQAList)\n\n        if (parameters.address) {\n            request.address = UpdateClientInformationUtils.createAddress(parameters.address)\n        }\n\n        if (parameters.personal) {\n            request.personal = UpdateClientInformationUtils.createPersonal(parameters.personal)\n        }\n        \n        if (parameters.attachments) {\n            request.attachments = UpdateClientInformationUtils.createAttachments(parameters.attachments)\n        }\n        \n        if (parameters.professional) {\n            request.professional = UpdateClientInformationUtils.createProfessional(parameters.professional)\n        }\n\n        if (parameters.scheduling) {\n            request.scheduling = this.requestFactory.createScheduling(parameters)\n        }\n\n        if (parameters.scheduling) {\n            request.scheduling = this.requestFactory.createScheduling(parameters)\n        }\n\n        return request;\n    }\n\n    private createCredentials(parameters: any): Credential {\n        return this.requestFactory.createCredentials(parameters);\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexesPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizableRegexesPathsError)\n        )\n    }\n\n}","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJhcHAuY29tcG9uZW50LnNjc3MifQ== */\";","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { AgentifaiRequestFactoryService } from 'src/app/services/agentifai/agentifai-request-factory.service';\nimport { MBWayPartnerRequest } from 'src/app/models/operation/request/cards/MBWayPartnerRequest';\nimport { Credential } from 'src/app/models/operation/Credential';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\n\nexport class ExecuteMBWayAdhesionCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        `body\\.(operationId|operationStatus|${Anonymization.scheduling()})`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private requestFactory: AgentifaiRequestFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters = this.request.getParameters()\n        const request = this.createRequest(parameters);\n        const credential = this.createCredentials(parameters);\n\n        return service.executeAdhesionMbway(headers, request, credential)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createRequest(parameters: any): MBWayPartnerRequest {\n        const request = new MBWayPartnerRequest();\n        request.operationId = parseInt(parameters.operationId);\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation;\n        request.phoneNumber = parameters.phoneNumber;\n        request.cardNumberMasked = parameters.cardNumberMasked;\n        request.amount = parameters.amount;\n        request.acceptedTransferCGD = parameters.acceptedTransferCGD;\n        request.scheduling = this.requestFactory.createScheduling(parameters);\n\n        return request;\n    }\n\n    private createCredentials(parameters: any): Credential {\n        return this.requestFactory.createCredentials(parameters);\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { ResponseEvent } from 'src/app/agentifai/models/agentifai-response-event';\n\nexport class WidgetResponse {\n    data: ResponseEvent;\n    nonAnonymizableRegexPaths: Array<String>;\n\n    constructor(data: ResponseEvent, nonAnonymizableRegexPaths: String[]) {\n        this.data = data;\n        this.nonAnonymizableRegexPaths = nonAnonymizableRegexPaths;\n    }\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiRequestFactoryService } from 'src/app/services/agentifai/agentifai-request-factory.service';\nimport { ConsumerLoanAdhesionRequest } from 'src/app/models/operation/request/loans/ConsumerLoanAdhesionRequest';\nimport { GenericPersonalCreditWorkElement } from 'src/app/models/operation/request/loans/GenericPersonalCreditWorkElement';\n\nexport class SimulatePersonalLoanAdhesion implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        String.raw`^body\\.(operationId|success|errorMessage|simulationDate|amountMin|amountMax)$`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private requestFactory: AgentifaiRequestFactoryService,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters = this.request.getParameters()\n        const request = this.createRequest(parameters)\n\n        return service.simulateLoanRequest(headers, request)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createRequest(parameters: any): ConsumerLoanAdhesionRequest {\n        const request = new ConsumerLoanAdhesionRequest()\n\n        if (parameters.operationId != null) {\n            request.operationId = parseInt(parameters.operationId)\n        }\n\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation\n        request.scheduling = this.requestFactory.createScheduling(parameters)\n        request.currency = parameters.currency\n        request.targetAmount = parseInt(parameters.targetAmount)\n        request.periodMonths = parseInt(parameters.periodMonths)\n        request.includeDocuments = parameters.includeDocuments\n        request.fullKeyToAccount = parameters.fullKeyToAccount\n\n        if (parameters.profession != null) {\n            const profession = new GenericPersonalCreditWorkElement()\n            profession.cod = parameters.profession.cod\n            profession.description = parameters.profession.description\n            request.profissao = profession\n        }\n\n        if (parameters.jobSector != null) {\n            const jobSector = new GenericPersonalCreditWorkElement()\n            jobSector.cod = parameters.jobSector.cod\n            jobSector.description = parameters.jobSector.description\n            request.sector = jobSector\n        }\n\n        if (parameters.jobType != null) {\n            const jobType = new GenericPersonalCreditWorkElement()\n            jobType.cod = parameters.jobType.cod\n            jobType.description = parameters.jobType.description\n            request.trabalho = jobType\n        }\n\n        if (parameters.contractType != null) {\n            const contractType = new GenericPersonalCreditWorkElement()\n            contractType.cod = parameters.contractType.cod\n            contractType.description = parameters.contractType.description\n            request.contrato = contractType\n        }\n\n        if (parameters.jobServiceTime != null) {\n            request.antiguidade = parseInt(parameters.jobServiceTime)\n        }\n\n        request.codigoIRS = parameters.irsCode\n\n        if (parameters.grossIncome != null) {\n            request.rendimentoBruto = parseInt(parameters.grossIncome)\n        }\n\n        if (parameters.netIncome != null) {\n            request.rendimentoLiquido = parseInt(parameters.netIncome)\n        }\n\n        if (parameters.monthlyExpenses != null) {\n            request.encargosMensais = parseInt(parameters.monthlyExpenses)\n        }\n\n        if (parameters.householdExpenses != null) {\n            request.despesasFamiliares = parseInt(parameters.householdExpenses)\n        }\n\n        if (parameters.householdMembers != null) {\n            request.nrAgregado = parseInt(parameters.householdMembers)\n        }\n\n        request.prestacao = parameters.installment\n\n        request.defaultSimulation = parameters.defaultSimulation\n\n        return request;\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiRequestFactoryService } from 'src/app/services/agentifai/agentifai-request-factory.service';\nimport { TransferSEPARequest } from 'src/app/models/operation/request/transfers/TransferSEPARequest';\nimport { Credential } from 'src/app/models/operation/Credential';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\n\nexport class ExecuteSEPATransferCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexesPathsSuccess: String[] = [\n        \"headers.+\",\n        \"status\",\n        `body\\.(operationId|operationStatus|charges[.].*|${Anonymization.scheduling()})`\n    ]\n\n    private nonAnonymizableRegexesPathsError: String[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private requestFactory: AgentifaiRequestFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters: any = this.request.getParameters()\n        const request = this.createRequest(parameters);\n        const credential = this.createCredentials(parameters);\n\n        return service.executeSepaTransfer(headers, request, credential)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(resp => this.createErrorResponse(resp))\n            );\n    }\n\n    private createRequest(parameters: any): TransferSEPARequest {\n        const request = new TransferSEPARequest();\n        request.operationId = parameters.operationId;\n        request.forceDuplicateOperation = parameters.forceDuplicateOperation;\n        request.sourceAccount = parameters.sourceAccount;\n        request.destinationAccount = parameters.destinationAccount;\n        request.amount = parameters.amount;\n        request.currency = parameters.currency;\n        request.description = parameters.description;\n        request.destinationName = parameters.destinationName;\n        request.urgent = parameters.urgent;\n        request.charges = parameters.charges;\n        request.commissionFee = parseInt(parameters.commissionFee);\n        request.stampDuty = parseInt(parameters.stampDuty);\n        request.warningCharge = parseInt(parameters.warningCharge);\n        request.warningVAT = parseInt(parameters.warningVAT);\n        request.chargesSum = parseInt(parameters.chargesSum);\n        request.scheduling = this.requestFactory.createScheduling(parameters);\n\n        return request;\n    }\n\n    private createCredentials(parameters: any): Credential {\n        return this.requestFactory.createCredentials(parameters);\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexesPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizableRegexesPathsError)\n        )\n    }\n\n}","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\nimport { OperationProofByEmailRequest } from 'src/app/models/operation/OperationProofByEmailRequest';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\n\nexport class SendOperationProofCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\"\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n        const parameters = this.request.getParameters()\n        const operationId = Number(parameters[\"operationId\"]);\n        const proofRequest = this.createOperationProofRequest(parameters);\n\n        return service.sendOperationProofByEmail(headers, operationId, proofRequest)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n    private createOperationProofRequest(parameters: any): OperationProofByEmailRequest {\n        const proofRequest = new OperationProofByEmailRequest();\n        proofRequest.targetEmail = parameters.targetEmail;\n        proofRequest.targetCCEmail = parameters.targetCCEmail;\n        proofRequest.emailSubject = parameters.emailSubject;\n        return proofRequest;\n    }\n}","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetShowcaseCards implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexPathsSuccess: string[] = [\n        \"headers.+\",\n        \"status\",\n        String.raw`(name|descriptionHtml|otherInfo)$`\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService\n    ) {}\n    \n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders();\n\n        return service.getShowcaseCards(headers)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        return this.createResponse(response, true, this.nonAnonymizableRegexPathsSuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n}","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";","import { AgentifaiCommand } from 'src/app/agentifai/commands/commom/agentifai-command';\nimport { WidgetResponse } from 'src/app/agentifai/models/agentifai-widget-response';\nimport { AgentifaiResponseFactoryService } from 'src/app/services/agentifai/agentifai-response-factory.service';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { AgentifaiServicesProvider } from 'src/app/services/agentifai/agentifai-services.service';\nimport { AccountsUtils } from 'src/app/agentifai/commands/accounts/accounts-utils';\nimport { AgentifaiUtils } from 'src/app/agentifai/utils/agentifai-utils';\nimport { AgentifaiAccountsTransformerService } from 'src/app/services/agentifai/agentifai-accounts-transformer.service';\nimport { Anonymization } from 'src/app/agentifai/utils/anonymization-utils';\nimport { AgentifaiRequest } from 'src/app/agentifai/models/agentifai-request';\n\nexport class GetImmediateTransferAccountsCommand implements AgentifaiCommand<WidgetResponse> {\n\n    private nonAnonymizableRegexesPathsuccess: String[] = [\n        \"headers.+\",\n        \"status\",\n        \"body\\.(\"\n        + `defaultAccount\\.(${AccountsUtils.nonAnonymizedAccountsProperties})`\n        + `|accounts\\.[^.]+\\.(${AccountsUtils.nonAnonymizedAccountsProperties})`\n        + \")(?:$|\\W)\"\n    ]\n\n    private nonAnonymizablePathRegexError: string[] = Anonymization.NonAnonymizablePathRegexDefault;\n\n    constructor(\n        private request: AgentifaiRequest,\n        private responseFactory: AgentifaiResponseFactoryService,\n        private transformer: AgentifaiAccountsTransformerService\n    ) { }\n\n    execute(service: AgentifaiServicesProvider): Observable<WidgetResponse> {\n        const headers = this.request.getHeaders()\n\n        return service.getAccountsForImmediateTransfers(headers)\n            .pipe(\n                map(resp => this.createSuccessResponse(resp)),\n                catchError(error => this.createErrorResponse(error))\n            )\n    }\n\n    private createResponse(response: any, success: boolean, nonAnonymizableRegexesPaths: String[]): WidgetResponse {\n        return this.responseFactory.createResponseFromRestApi(response, success, nonAnonymizableRegexesPaths)\n    }\n\n    private createSuccessResponse(response: any): WidgetResponse {\n        var transformedResponse = this.transformResponse(response);\n        return this.createResponse(transformedResponse, true, this.nonAnonymizableRegexesPathsuccess)\n    }\n\n    private createErrorResponse(errorResponse: any) {\n        return throwError(\n            this.createResponse(errorResponse, false, this.nonAnonymizablePathRegexError)\n        )\n    }\n\n    private transformResponse(response: any): any {\n        const data = AgentifaiUtils.mapFromString(response.data);\n\n        if (data.defaultAccount != null && data.accounts != null) {\n            data.accounts = this.transformer.transformAccounts(data.accounts);\n            data.defaultAccount = this.transformer.transformAccount(data.defaultAccount);\n\n            response.data = data;\n        }\n\n        return response;\n    }\n\n}"]}